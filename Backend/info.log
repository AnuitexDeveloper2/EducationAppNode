{
  message: '>>>> authorService.create(), with: author = [object Object]',
  level: 'info',
  timestamp: '2020-02-19T10:01:00.836Z'
}
{
  message: '>>>> authorService.create(), with: author = [object Object]',
  level: 'info',
  timestamp: '2020-02-19T10:03:59.853Z'
}
{
  message: '>>>> authorService.create(), with: author = [object Object]',
  level: 'info',
  timestamp: '2020-02-19T10:04:56.797Z'
}
{
  message: '>>>> authorService.create(), with: author = [object Object]',
  level: 'info',
  timestamp: '2020-02-19T10:06:08.587Z'
}
{
  message: '>>>> authorService.create(), with: author = [object Object]',
  level: 'info',
  timestamp: '2020-02-19T10:06:47.574Z'
}
{
  message: '>>>> authorService.create(), with: author = [object Object]',
  level: 'info',
  timestamp: '2020-02-19T10:10:20.587Z'
}
{
  message: '>>>> authorService.create(), with: author = [object Object]',
  level: 'info',
  timestamp: '2020-02-19T10:12:06.141Z'
}
{
  message: '>>>> authorService.create(), with: author = [object Object]',
  level: 'info',
  timestamp: '2020-02-19T10:13:41.796Z'
}
{
  message: '>>>> authorService.create(), with: author = [object Object]',
  level: 'info',
  timestamp: '2020-02-19T10:14:17.924Z'
}
{
  message: '>>>> authorService.create(), with: author = [object Object]',
  level: 'info',
  timestamp: '2020-02-19T10:15:07.128Z'
}
{
  message: '>>>> authorService.create(), with: author = [object Object]',
  level: 'info',
  timestamp: '2020-02-19T10:16:59.705Z'
}
{
  message: '>>>> authorService.create(), invalid data = undefined',
  level: 'error',
  timestamp: '2020-02-19T10:16:59.709Z'
}
{
  message: '>>>> authorService.create(), with: author = [object Object]',
  level: 'info',
  timestamp: '2020-02-19T10:17:52.488Z'
}
{
  message: '>>>> authorService.create(), invalid data = instance requires property "name"',
  level: 'error',
  timestamp: '2020-02-19T10:17:52.492Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-19T10:48:46.089Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-19T11:36:43.793Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-19T11:42:37.096Z'
}
{
  message: '>>>> userService.edit(), with: user = [object Object]',
  level: 'info',
  timestamp: '2020-02-19T11:45:59.009Z'
}
{
  message: '>>>> userService.edit(), invalid data = instance additionalProperty "lastName" exists in instance when not allowed,instance additionalProperty "passwordHash" exists in instance when not allowed',
  level: 'error',
  timestamp: '2020-02-19T11:45:59.011Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-19T11:46:54.822Z'
}
{
  message: '>>>> userService.edit(), with: user = [object Object]',
  level: 'info',
  timestamp: '2020-02-19T11:46:57.927Z'
}
{
  message: '>>>> userService.edit(), invalid data = instance additionalProperty "passwordHash" exists in instance when not allowed',
  level: 'error',
  timestamp: '2020-02-19T11:46:57.929Z'
}
{
  message: '>>>> userService.edit(), with: user = [object Object]',
  level: 'info',
  timestamp: '2020-02-19T11:47:20.050Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-19T11:48:26.298Z'
}
{
  message: '>>>> userService.edit(), with: user = [object Object]',
  level: 'info',
  timestamp: '2020-02-19T11:48:27.765Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-19T11:51:23.991Z'
}
{
  message: '>>>> userService.edit(), with: user = [object Object]',
  level: 'info',
  timestamp: '2020-02-19T11:51:24.125Z'
}
{
  message: '>>>> userService.edit(), with: user = [object Object]',
  level: 'info',
  timestamp: '2020-02-19T11:51:38.895Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-19T11:55:04.878Z'
}
{
  message: '>>>> userService.edit(), with: user = [object Object]',
  level: 'info',
  timestamp: '2020-02-19T11:55:07.649Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-19T11:58:55.186Z'
}
{
  message: '>>>> userService.edit(), with: user = [object Object]',
  level: 'info',
  timestamp: '2020-02-19T11:58:55.262Z'
}
{
  message: '>>>> userService.edit(), with: user = [object Object]',
  level: 'info',
  timestamp: '2020-02-19T11:59:09.000Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-19T11:59:40.122Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-19T11:59:49.894Z'
}
{
  message: '>>>> userService.edit(), with: user = [object Object]',
  level: 'info',
  timestamp: '2020-02-19T11:59:49.928Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-19T12:00:32.925Z'
}
{
  message: '>>>> userService.edit(), with: user = [object Object]',
  level: 'info',
  timestamp: '2020-02-19T12:00:35.445Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-19T12:08:43.319Z'
}
{
  message: '>>>> userService.edit(), with: user = [object Object]',
  level: 'info',
  timestamp: '2020-02-19T12:08:47.661Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-19T12:09:35.073Z'
}
{
  message: '>>>> userService.edit(), with: user = [object Object]',
  level: 'info',
  timestamp: '2020-02-19T12:09:37.892Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-19T12:10:16.064Z'
}
{
  message: '>>>> userService.edit(), with: user = [object Object]',
  level: 'info',
  timestamp: '2020-02-19T12:10:16.326Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-19T12:10:37.983Z'
}
{
  message: '>>>> userService.edit(), with: user = [object Object]',
  level: 'info',
  timestamp: '2020-02-19T12:10:38.965Z'
}
{
  message: '>>>> userService.edit(), result = failed to update user',
  level: 'error',
  timestamp: '2020-02-19T12:10:38.978Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-19T12:12:04.302Z'
}
{
  message: '>>>> userService.edit(), with: user = [object Object]',
  level: 'info',
  timestamp: '2020-02-19T12:12:06.016Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-19T12:13:00.114Z'
}
{
  message: '>>>> userService.edit(), with: user = [object Object]',
  level: 'info',
  timestamp: '2020-02-19T12:13:00.352Z'
}
{
  message: '>>>> userService.edit(), result = failed to update user',
  level: 'error',
  timestamp: '2020-02-19T12:13:00.368Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-19T12:14:13.245Z'
}
{
  message: '>>>> userService.edit(), with: user = [object Object]',
  level: 'info',
  timestamp: '2020-02-19T12:14:13.423Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-19T12:15:22.706Z'
}
{
  message: '>>>> userService.edit(), with: user = [object Object]',
  level: 'info',
  timestamp: '2020-02-19T12:15:22.918Z'
}
{
  message: '>>>> userService.edit(), result = failed to update user',
  level: 'error',
  timestamp: '2020-02-19T12:15:22.935Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-19T12:16:30.005Z'
}
{
  message: '>>>> userService.edit(), with: user = [object Object]',
  level: 'info',
  timestamp: '2020-02-19T12:16:30.593Z'
}
{
  message: ">>>> userService.edit(), result = MongoError: Performing an update on the path '_id' would modify the immutable field '_id'",
  level: 'error',
  timestamp: '2020-02-19T12:16:30.618Z'
}
{
  message: '>>>> authorService.update(), with: author = [object Object]',
  level: 'info',
  timestamp: '2020-02-19T12:41:29.791Z'
}
{
  message: '>>>> authorService.update(), result = false',
  level: 'error',
  timestamp: '2020-02-19T12:41:29.803Z'
}
{
  message: '>>>> authorService.update(), with: author = [object Object]',
  level: 'info',
  timestamp: '2020-02-19T12:42:25.128Z'
}
{
  message: '>>>> userService.edit(), with: user = [object Object]',
  level: 'info',
  timestamp: '2020-02-19T12:50:27.747Z'
}
{
  message: ">>>> userService.edit(), result = MongoError: Performing an update on the path '_id' would modify the immutable field '_id'",
  level: 'error',
  timestamp: '2020-02-19T12:50:27.766Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-19T12:51:16.188Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-19T12:51:32.417Z'
}
{
  message: '>>>> userService.edit(), with: user = undefined',
  level: 'info',
  timestamp: '2020-02-19T12:51:33.230Z'
}
{
  message: ">>>> userService.edit(), result = MongoError: Performing an update on the path '_id' would modify the immutable field '_id'",
  level: 'error',
  timestamp: '2020-02-19T12:51:33.246Z'
}
{
  message: '>>>> authorService.update(), with: author = [object Object]',
  level: 'info',
  timestamp: '2020-02-19T12:54:01.546Z'
}
{
  message: '>>>> authorService.getAuthors(), with: filter = [object Object]',
  level: 'info',
  timestamp: '2020-02-19T12:57:45.788Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-19T12:59:22.839Z'
}
{
  message: '>>>> authorService.getAuthors(), with: filter = [object Object]',
  level: 'info',
  timestamp: '2020-02-19T12:59:23.160Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-19T12:59:50.463Z'
}
{
  message: '>>>> authorService.getAuthors(), with: filter = [object Object]',
  level: 'info',
  timestamp: '2020-02-19T12:59:50.952Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-19T13:02:45.061Z'
}
{
  message: '>>>> authorService.getAuthors(), with: filter = [object Object]',
  level: 'info',
  timestamp: '2020-02-19T13:02:45.421Z'
}
{
  message: '>>>> authorService.getAuthors(), with: filter = [object Object]',
  level: 'info',
  timestamp: '2020-02-19T13:04:36.594Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-19T13:09:51.452Z'
}
{
  message: '>>>> authorService.getAuthors(), with: filter = [object Object]',
  level: 'info',
  timestamp: '2020-02-19T13:10:31.076Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-19T13:10:50.124Z'
}
{
  message: '>>>> authorService.getAuthors(), with: filter = [object Object]',
  level: 'info',
  timestamp: '2020-02-19T13:10:50.236Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-19T13:11:35.539Z'
}
{
  message: '>>>> authorService.getAuthors(), with: filter = [object Object]',
  level: 'info',
  timestamp: '2020-02-19T13:11:35.653Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-19T13:11:52.301Z'
}
{
  message: '>>>> authorService.getAuthors(), with: filter = [object Object]',
  level: 'info',
  timestamp: '2020-02-19T13:11:54.129Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-19T13:12:17.188Z'
}
{
  message: '>>>> authorService.getAuthors(), with: filter = [object Object]',
  level: 'info',
  timestamp: '2020-02-19T13:13:08.891Z'
}
{
  message: '>>>> authorService.getAuthors(), with: filter = [object Object]',
  level: 'info',
  timestamp: '2020-02-19T13:13:25.965Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-19T13:13:49.462Z'
}
{
  message: '>>>> authorService.getAuthors(), with: filter = [object Object]',
  level: 'info',
  timestamp: '2020-02-19T13:13:49.529Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-19T13:17:21.003Z'
}
{
  message: '>>>> authorService.getAuthors(), with: filter = [object Object]',
  level: 'info',
  timestamp: '2020-02-19T13:17:21.096Z'
}
{
  message: '>>>> authorService.getAuthors(), with: filter = [object Object]',
  level: 'info',
  timestamp: '2020-02-19T13:17:44.776Z'
}
{
  message: '>>>> userService.edit(), with: user = undefined',
  level: 'info',
  timestamp: '2020-02-19T13:19:50.505Z'
}
{
  message: ">>>> userService.edit(), result = MongoError: Performing an update on the path '_id' would modify the immutable field '_id'",
  level: 'error',
  timestamp: '2020-02-19T13:19:50.526Z'
}
{
  message: '>>>> userService.edit(), with: user = undefined',
  level: 'info',
  timestamp: '2020-02-19T13:20:45.321Z'
}
{
  message: '>>>> userService.edit(), invalid data = instance additionalProperty "id" exists in instance when not allowed',
  level: 'error',
  timestamp: '2020-02-19T13:20:45.327Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-19T13:21:37.859Z'
}
{
  message: '>>>> userService.edit(), with: user = [object Object]',
  level: 'info',
  timestamp: '2020-02-19T13:21:37.978Z'
}
{
  message: '>>>> userService.edit(), result = MongoError: E11000 duplicate key error collection: educationdb.users index: userName_1 dup key: { userName: "Morgenshtern88" }',
  level: 'error',
  timestamp: '2020-02-19T13:21:38.007Z'
}
{
  message: '>>>> userService.edit(), with: user = [object Object]',
  level: 'info',
  timestamp: '2020-02-19T13:22:21.242Z'
}
{
  message: '>>>> userService.edit(), result = MongoError: E11000 duplicate key error collection: educationdb.users index: userName_1 dup key: { userName: "Morgenshtern" }',
  level: 'error',
  timestamp: '2020-02-19T13:22:21.260Z'
}
{
  message: '>>>> userService.edit(), with: user = [object Object]',
  level: 'info',
  timestamp: '2020-02-19T13:22:28.175Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-19T13:49:05.531Z'
}
{
  message: '>>>> authService.register(), with: model = [object Object]',
  level: 'info',
  timestamp: '2020-02-19T13:49:09.169Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-19T13:52:02.221Z'
}
{
  message: '>>>> authService.register(), with: model = [object Object]',
  level: 'info',
  timestamp: '2020-02-19T13:52:06.239Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-19T13:52:40.136Z'
}
{
  message: '>>>> authService.register(), with: model = [object Object]',
  level: 'info',
  timestamp: '2020-02-19T13:52:40.760Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-19T13:53:32.260Z'
}
{
  message: '>>>> authService.register(), with: model = [object Object]',
  level: 'info',
  timestamp: '2020-02-19T13:53:32.674Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-19T13:54:27.393Z'
}
{
  message: '>>>> authService.register(), with: model = [object Object]',
  level: 'info',
  timestamp: '2020-02-19T13:54:28.145Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-19T13:56:22.112Z'
}
{
  message: '>>>> authService.register(), with: model = [object Object]',
  level: 'info',
  timestamp: '2020-02-19T13:56:22.155Z'
}
{
  message: '>>>> authService.register(), with: model = [object Object]',
  level: 'info',
  timestamp: '2020-02-19T13:56:58.030Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-19T13:57:18.548Z'
}
{
  message: '>>>> authService.register(), with: model = [object Object]',
  level: 'info',
  timestamp: '2020-02-19T13:57:19.704Z'
}
{
  message: '>>>> authService.register(), with: model = [object Object]',
  level: 'info',
  timestamp: '2020-02-19T13:57:33.874Z'
}
{
  message: '>>>> authService.register(), invalid data = instance.passwordHash does not meet minimum length of 4',
  level: 'error',
  timestamp: '2020-02-19T13:57:33.879Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-19T13:59:21.370Z'
}
{
  message: '>>>> authService.register(), with: model = [object Object]',
  level: 'info',
  timestamp: '2020-02-19T13:59:21.395Z'
}
{
  message: '>>>> authService.register(), invalid data = instance.passwordHash does not meet minimum length of 4',
  level: 'error',
  timestamp: '2020-02-19T13:59:21.396Z'
}
{
  message: '>>>> authService.register(), with: model = [object Object]',
  level: 'info',
  timestamp: '2020-02-19T14:00:34.185Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-19T14:01:30.344Z'
}
{
  message: '>>>> authService.register(), with: model = [object Object]',
  level: 'info',
  timestamp: '2020-02-19T14:01:30.687Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-19T14:02:42.986Z'
}
{
  message: '>>>> authService.register(), with: model = [object Object]',
  level: 'info',
  timestamp: '2020-02-19T14:02:46.435Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-19T14:05:14.199Z'
}
{
  message: '>>>> authService.register(), with: model = [object Object]',
  level: 'info',
  timestamp: '2020-02-19T14:05:16.062Z'
}
{
  message: '>>>> authService.register(), result = invalid password',
  level: 'error',
  timestamp: '2020-02-19T14:05:16.159Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-19T15:40:46.201Z'
}
{
  message: '>>>> orderService.createOrder(), with: orderParam = [object Object]',
  level: 'info',
  timestamp: '2020-02-19T15:41:54.625Z'
}
{
  message: '>>>> orderService.createOrder(), invalid data = instance additionalProperty "sortType" exists in instance when not allowed,instance additionalProperty "searchString" exists in instance when not allowed,instance additionalProperty "pageNumber" exists in instance when not allowed,instance additionalProperty "pageSize" exists in instance when not allowed,instance requires property "_id"',
  level: 'error',
  timestamp: '2020-02-19T15:41:54.634Z'
}
{
  message: '>>>> orderService.createOrder(), with: orderParam = [object Object]',
  level: 'info',
  timestamp: '2020-02-19T15:42:05.783Z'
}
{
  message: '>>>> orderService.createOrder(), invalid data = instance requires property "_id"',
  level: 'error',
  timestamp: '2020-02-19T15:42:05.785Z'
}
{
  message: '>>>> orderService.createOrder(), with: orderParam = [object Object]',
  level: 'info',
  timestamp: '2020-02-19T15:43:06.499Z'
}
{
  message: '>>>> orderService.createOrder(), invalid data = instance requires property "_id"',
  level: 'error',
  timestamp: '2020-02-19T15:43:06.501Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-19T15:43:20.808Z'
}
{
  message: '>>>> orderService.createOrder(), with: orderParam = [object Object]',
  level: 'info',
  timestamp: '2020-02-19T15:43:22.889Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-19T15:44:14.720Z'
}
{
  message: '>>>> orderService.createOrder(), with: orderParam = [object Object]',
  level: 'info',
  timestamp: '2020-02-19T15:44:42.152Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-19T15:57:56.669Z'
}
{
  message: '>>>> orderService.createOrder(), with: orderParam = [object Object]',
  level: 'info',
  timestamp: '2020-02-19T15:57:56.896Z'
}
{
  message: '>>>> orderService.createOrder(), with: orderParam = [object Object]',
  level: 'info',
  timestamp: '2020-02-19T15:58:52.441Z'
}
{
  message: '>>>> orderService.createOrder(), with: orderParam = [object Object]',
  level: 'info',
  timestamp: '2020-02-19T16:00:34.791Z'
}
{
  message: '>>>> orderService.createOrder(), invalid data = instance requires property "payment_info"',
  level: 'error',
  timestamp: '2020-02-19T16:00:34.792Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-20T07:22:31.843Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-20T07:23:36.441Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-20T07:25:52.451Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-20T07:26:28.296Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-20T07:27:39.360Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-20T07:28:26.732Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-20T07:30:13.506Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-20T07:33:03.187Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-20T07:36:03.326Z'
}
{
  message: '>>>> printingEditionService.update(), with: printingEdition = [object Object]',
  level: 'info',
  timestamp: '2020-02-20T07:36:03.386Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-20T07:39:07.061Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-20T07:41:12.128Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-20T07:44:28.037Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-20T07:45:50.539Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-20T07:47:13.227Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-20T07:48:57.791Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-20T07:53:53.173Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-20T08:26:31.301Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-20T08:29:30.686Z'
}
{
  message: '>>>> authService.logIn(), with: model = [object Object]',
  level: 'info',
  timestamp: '2020-02-20T08:29:30.978Z'
}
{
  message: '>>>> authService.logIn(), result = invalid password',
  level: 'error',
  timestamp: '2020-02-20T08:29:31.020Z'
}
{
  message: '>>>> authService.logIn(), with: model = [object Object]',
  level: 'info',
  timestamp: '2020-02-20T08:30:03.228Z'
}
{
  message: '>>>> authService.logIn(), result = invalid password',
  level: 'error',
  timestamp: '2020-02-20T08:30:03.232Z'
}
{
  message: '>>>> authService.logIn(), with: model = [object Object]',
  level: 'info',
  timestamp: '2020-02-20T08:30:41.760Z'
}
{
  message: '>>>> printingEditionService.getById(), with: printingEdition id = [object Object]',
  level: 'info',
  timestamp: '2020-02-20T08:31:19.822Z'
}
{
  message: '>>>> printingEditionService.getById(), invalid data = instance additionalProperty "id" exists in instance when not allowed,instance requires property "_id"',
  level: 'error',
  timestamp: '2020-02-20T08:31:19.832Z'
}
{
  message: '>>>> printingEditionService.getById(), with: printingEdition id = [object Object]',
  level: 'info',
  timestamp: '2020-02-20T08:31:35.415Z'
}
{
  message: '>>>> printingEditionService.getById(), with: printingEdition id = [object Object]',
  level: 'info',
  timestamp: '2020-02-20T08:32:24.492Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-20T08:33:29.084Z'
}
{
  message: '>>>> printingEditionService.getById(), with: printingEdition id = [object Object]',
  level: 'info',
  timestamp: '2020-02-20T08:33:32.132Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-20T08:34:08.698Z'
}
{
  message: '>>>> printingEditionService.getById(), with: printingEdition id = [object Object]',
  level: 'info',
  timestamp: '2020-02-20T08:34:09.251Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-20T08:34:34.084Z'
}
{
  message: '>>>> printingEditionService.getById(), with: printingEdition id = [object Object]',
  level: 'info',
  timestamp: '2020-02-20T08:34:35.413Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-20T08:35:11.376Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-20T08:35:53.436Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-20T08:36:19.074Z'
}
{
  message: '>>>> printingEditionService.getById(), with: printingEdition id = [object Object]',
  level: 'info',
  timestamp: '2020-02-20T08:36:24.433Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-20T09:24:15.774Z'
}
{
  message: '>>>> authService.logIn(), with: model = [object Object]',
  level: 'info',
  timestamp: '2020-02-20T09:26:15.924Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-20T09:28:50.680Z'
}
{
  message: '>>> orderService.getOrdersForAdmin(), with filter = [object Object]',
  level: 'info',
  timestamp: '2020-02-20T09:28:58.341Z'
}
{
  message: '>>>> authService.logIn(), with: model = [object Object]',
  level: 'info',
  timestamp: '2020-02-20T09:31:28.976Z'
}
{
  message: '>>>> orderService.getOrdersForUser(), with: id = [object Object]',
  level: 'info',
  timestamp: '2020-02-20T09:31:58.909Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-20T09:33:19.900Z'
}
{
  message: '>>>> orderService.getOrdersForUser(), with: id = [object Object]',
  level: 'info',
  timestamp: '2020-02-20T09:33:22.214Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-20T09:33:39.957Z'
}
{
  message: '>>>> orderService.getOrdersForUser(), with: id = [object Object]',
  level: 'info',
  timestamp: '2020-02-20T09:33:40.514Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-20T09:34:32.849Z'
}
{
  message: '>>>> orderService.getOrdersForUser(), with: id = [object Object]',
  level: 'info',
  timestamp: '2020-02-20T09:34:35.148Z'
}
{
  message: '>>>> orderService.getOrdersForUser(), with: id = [object Object]',
  level: 'info',
  timestamp: '2020-02-20T09:34:37.405Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-20T09:35:14.837Z'
}
{
  message: '>>>> orderService.getOrdersForUser(), with: id = [object Object]',
  level: 'info',
  timestamp: '2020-02-20T09:35:16.996Z'
}
{
  message: '>>>> orderService.getOrdersForUser(), with: id = [object Object]',
  level: 'info',
  timestamp: '2020-02-20T09:35:18.561Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-20T09:35:42.456Z'
}
{
  message: '>>>> orderService.getOrdersForUser(), with: id = [object Object]',
  level: 'info',
  timestamp: '2020-02-20T09:35:43.034Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-20T09:36:28.102Z'
}
{
  message: '>>>> orderService.getOrdersForUser(), with: id = [object Object]',
  level: 'info',
  timestamp: '2020-02-20T09:36:28.788Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-20T09:37:19.790Z'
}
{
  message: '>>>> orderService.getOrdersForUser(), with: id = [object Object]',
  level: 'info',
  timestamp: '2020-02-20T09:37:20.989Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-20T09:37:58.188Z'
}
{
  message: '>>>> orderService.getOrdersForUser(), with: id = [object Object]',
  level: 'info',
  timestamp: '2020-02-20T09:37:58.598Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-20T09:39:18.793Z'
}
{
  message: '>>>> orderService.getOrdersForUser(), with: id = [object Object]',
  level: 'info',
  timestamp: '2020-02-20T09:39:20.967Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-20T09:40:01.721Z'
}
{
  message: '>>>> orderService.getOrdersForUser(), with: id = [object Object]',
  level: 'info',
  timestamp: '2020-02-20T09:40:02.291Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-20T09:40:21.818Z'
}
{
  message: '>>>> orderService.getOrdersForUser(), with: id = [object Object]',
  level: 'info',
  timestamp: '2020-02-20T09:40:24.659Z'
}
{
  message: '>>>> orderService.getOrdersForUser(), with: id = [object Object]',
  level: 'info',
  timestamp: '2020-02-20T09:40:25.699Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-20T09:40:40.000Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-20T09:40:51.419Z'
}
{
  message: '>>>> orderService.getOrdersForUser(), with: id = [object Object]',
  level: 'info',
  timestamp: '2020-02-20T09:40:55.238Z'
}
{
  message: '>>>> orderService.getOrdersForUser(), with: id = [object Object]',
  level: 'info',
  timestamp: '2020-02-20T09:40:56.923Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-20T09:41:41.420Z'
}
{
  message: '>>>> orderService.getOrdersForUser(), with: id = [object Object]',
  level: 'info',
  timestamp: '2020-02-20T09:41:43.851Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-20T09:42:18.203Z'
}
{
  message: '>>>> orderService.getOrdersForUser(), with: id = [object Object]',
  level: 'info',
  timestamp: '2020-02-20T09:42:21.060Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-20T09:43:43.644Z'
}
{
  message: '>>>> orderService.getOrdersForUser(), with: id = [object Object]',
  level: 'info',
  timestamp: '2020-02-20T09:43:46.125Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-20T09:45:10.624Z'
}
{
  message: '>>>> orderService.getOrdersForUser(), with: id = [object Object]',
  level: 'info',
  timestamp: '2020-02-20T09:45:13.828Z'
}
{
  message: '>>>> orderService.getOrdersForUser(), with: id = [object Object]',
  level: 'info',
  timestamp: '2020-02-20T09:45:16.693Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-20T09:46:09.691Z'
}
{
  message: '>>>> orderService.getOrdersForUser(), with: id = [object Object]',
  level: 'info',
  timestamp: '2020-02-20T09:46:11.821Z'
}
{
  message: '>>>> orderService.getOrdersForUser(), with: id = [object Object]',
  level: 'info',
  timestamp: '2020-02-20T09:46:12.851Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-20T09:48:10.908Z'
}
{
  message: '>>>> orderService.getOrdersForUser(), with: id = [object Object]',
  level: 'info',
  timestamp: '2020-02-20T09:48:11.299Z'
}
{
  message: '>>>> authService.logIn(), with: model = [object Object]',
  level: 'info',
  timestamp: '2020-02-20T09:55:14.961Z'
}
{
  message: '>>> orderService.getOrdersForAdmin(), with filter = [object Object]',
  level: 'info',
  timestamp: '2020-02-20T09:55:38.604Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-20T09:57:00.650Z'
}
{
  message: '>>> orderService.getOrdersForAdmin(), with filter = [object Object]',
  level: 'info',
  timestamp: '2020-02-20T09:57:01.159Z'
}
{
  message: '>>> orderService.getOrdersForAdmin(), with filter = [object Object]',
  level: 'info',
  timestamp: '2020-02-20T09:57:58.912Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-20T09:59:24.696Z'
}
{
  message: '>>> orderService.getOrdersForAdmin(), with filter = [object Object]',
  level: 'info',
  timestamp: '2020-02-20T09:59:27.612Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-20T10:00:07.128Z'
}
{
  message: '>>> orderService.getOrdersForAdmin(), with filter = [object Object]',
  level: 'info',
  timestamp: '2020-02-20T10:00:07.380Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-20T10:00:31.719Z'
}
{
  message: '>>> orderService.getOrdersForAdmin(), with filter = [object Object]',
  level: 'info',
  timestamp: '2020-02-20T10:00:31.864Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-20T10:01:19.525Z'
}
{
  message: '>>> orderService.getOrdersForAdmin(), with filter = [object Object]',
  level: 'info',
  timestamp: '2020-02-20T10:01:22.870Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-20T10:04:03.477Z'
}
{
  message: '>>> orderService.getOrdersForAdmin(), with filter = [object Object]',
  level: 'info',
  timestamp: '2020-02-20T10:04:06.486Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-20T10:06:04.720Z'
}
{
  message: '>>>> authorService.getAuthors(), with: filter = [object Object]',
  level: 'info',
  timestamp: '2020-02-20T10:06:15.018Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-20T10:08:02.974Z'
}
{
  message: '>>>> authorService.getAuthors(), with: filter = [object Object]',
  level: 'info',
  timestamp: '2020-02-20T10:08:12.495Z'
}
{
  message: '>>>> authorService.getAuthors(), with: filter = [object Object]',
  level: 'info',
  timestamp: '2020-02-20T10:08:24.154Z'
}
{
  message: '>>>> authorService.getAuthors(), with: filter = [object Object]',
  level: 'info',
  timestamp: '2020-02-20T10:08:32.873Z'
}
{
  message: '>>>> authorService.getAuthors(), with: filter = [object Object]',
  level: 'info',
  timestamp: '2020-02-20T10:08:47.123Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-20T10:09:55.979Z'
}
{
  message: '>>> orderService.getOrdersForAdmin(), with filter = [object Object]',
  level: 'info',
  timestamp: '2020-02-20T10:10:00.355Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-20T10:10:21.198Z'
}
{
  message: '>>> orderService.getOrdersForAdmin(), with filter = [object Object]',
  level: 'info',
  timestamp: '2020-02-20T10:10:21.392Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-20T10:11:56.202Z'
}
{
  message: '>>> orderService.getOrdersForAdmin(), with filter = [object Object]',
  level: 'info',
  timestamp: '2020-02-20T10:12:01.975Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-20T10:52:18.653Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-20T10:53:49.301Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-20T10:54:39.787Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-20T10:55:03.263Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-20T10:56:26.711Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-20T11:04:23.778Z'
}
{
  message: '>>>> authService.logIn(), with: model = [object Object]',
  level: 'info',
  timestamp: '2020-02-20T11:05:23.785Z'
}
{
  message: '>>>> authService.logIn(), with: model = [object Object]',
  level: 'info',
  timestamp: '2020-02-20T11:05:30.067Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-20T11:06:38.713Z'
}
{
  message: '>>>> authService.logIn(), with: model = [object Object]',
  level: 'info',
  timestamp: '2020-02-20T11:06:43.366Z'
}
{
  message: '>>>> authService.logIn(), with: model = [object Object]',
  level: 'info',
  timestamp: '2020-02-20T11:07:04.136Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-20T11:07:27.425Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-20T11:08:33.831Z'
}
{
  message: '>>>> authService.logIn(), with: model = [object Object]',
  level: 'info',
  timestamp: '2020-02-20T11:08:34.156Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-20T11:09:11.731Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-20T11:13:36.919Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-20T15:41:19.082Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-20T15:41:59.266Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-20T16:05:02.137Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-20T16:44:47.337Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-20T16:47:37.611Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-20T16:49:34.609Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-20T16:50:09.723Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-20T16:51:20.741Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-20T16:52:17.700Z'
}
{
  message: '>>>> userService.edit(), with: user = [object Object]',
  level: 'info',
  timestamp: '2020-02-20T16:52:17.903Z'
}
{
  message: '>>>> userService.edit(), invalid data = instance additionalProperty "passwordHash" exists in instance when not allowed',
  level: 'error',
  timestamp: '2020-02-20T16:52:17.909Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-20T16:55:29.703Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-20T16:56:03.343Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-20T16:56:16.691Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-20T16:57:52.812Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-20T16:59:18.014Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-20T17:01:36.594Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-20T17:01:51.010Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-21T07:28:55.540Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-21T07:32:40.318Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-21T07:33:31.126Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-21T07:40:08.784Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-21T07:44:33.684Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-21T08:07:59.639Z'
}
{
  message: '>>>> userService.getById(), with user id = [object Object]',
  level: 'info',
  timestamp: '2020-02-21T08:08:09.620Z'
}
{
  message: '>>>> userService.getById(), with user id = [object Object]',
  level: 'info',
  timestamp: '2020-02-21T08:08:32.981Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-21T08:11:57.920Z'
}
{
  message: '>>>> userService.getById(), with user id = [object Object]',
  level: 'info',
  timestamp: '2020-02-21T08:11:59.049Z'
}
{
  message: '>>>> userService.getById(), with user id = [object Object]',
  level: 'info',
  timestamp: '2020-02-21T08:12:12.570Z'
}
{
  message: '>>>> userService.getById(), with user id = [object Object]',
  level: 'info',
  timestamp: '2020-02-21T08:12:35.513Z'
}
{
  message: '>>>> userService.getById(), with user id = [object Object]',
  level: 'info',
  timestamp: '2020-02-21T08:12:57.270Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-21T08:14:10.680Z'
}
{
  message: '>>>> userService.getById(), with user id = [object Object]',
  level: 'info',
  timestamp: '2020-02-21T08:14:11.412Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-21T08:15:34.618Z'
}
{
  message: '>>>> userService.getById(), with user id = [object Object]',
  level: 'info',
  timestamp: '2020-02-21T08:15:40.664Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-21T08:16:39.707Z'
}
{
  message: '>>>> userService.getById(), with user id = [object Object]',
  level: 'info',
  timestamp: '2020-02-21T08:16:43.626Z'
}
{
  message: '>>>> userService.getById(), with user id = [object Object]',
  level: 'info',
  timestamp: '2020-02-21T08:18:21.573Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-21T08:18:33.444Z'
}
{
  message: '>>>> userService.getById(), with user id = [object Object]',
  level: 'info',
  timestamp: '2020-02-21T08:18:33.827Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-21T08:21:50.400Z'
}
{
  message: '>>>> userService.getById(), with user id = [object Object]',
  level: 'info',
  timestamp: '2020-02-21T08:21:50.850Z'
}
{
  message: `>>>> userService.getById(), result = Cast to ObjectId failed for value "{ _id: '5ec19a004abf333fc8a2668' }" at path "_id" for model "User"`,
  level: 'error',
  timestamp: '2020-02-21T08:21:50.854Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-21T08:38:50.712Z'
}
{
  message: '>>>> userService.getById(), with user id = [object Object]',
  level: 'info',
  timestamp: '2020-02-21T08:38:50.793Z'
}
{
  message: '>>>> userService.getById(), invalid data = [object Object]',
  level: 'error',
  timestamp: '2020-02-21T08:38:50.794Z'
}
{
  message: '>>>> userService.getById(), with user id = [object Object]',
  level: 'info',
  timestamp: '2020-02-21T08:39:12.278Z'
}
{
  message: '>>>> userService.remove(), with: user = [object Object]',
  level: 'info',
  timestamp: '2020-02-21T08:39:48.735Z'
}
{
  message: '>>>> authService.logIn(), with: model = [object Object]',
  level: 'info',
  timestamp: '2020-02-21T08:48:28.911Z'
}
{
  message: '>>>> authorService.create(), with: Id = [object Object]',
  level: 'info',
  timestamp: '2020-02-21T08:48:50.391Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-21T08:51:23.434Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-21T08:52:21.404Z'
}
{
  message: '>>>> userService.remove(), with: user = [object Object]',
  level: 'info',
  timestamp: '2020-02-21T08:52:23.604Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-21T08:53:38.645Z'
}
{
  message: '>>>> userService.remove(), with: user = [object Object]',
  level: 'info',
  timestamp: '2020-02-21T08:53:39.062Z'
}
{
  message: '>>>> userService.remove(), with: user = [object Object]',
  level: 'info',
  timestamp: '2020-02-21T08:53:40.549Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-21T08:54:01.693Z'
}
{
  message: '>>>> userService.remove(), with: user = [object Object]',
  level: 'info',
  timestamp: '2020-02-21T08:54:02.340Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-21T08:55:42.130Z'
}
{
  message: '>>>> userService.remove(), with: user = [object Object]',
  level: 'info',
  timestamp: '2020-02-21T08:55:42.204Z'
}
{
  message: '>>>> userService.remove(), with: user = [object Object]',
  level: 'info',
  timestamp: '2020-02-21T08:55:45.228Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-21T08:56:20.394Z'
}
{
  message: '>>>> userService.remove(), with: user = [object Object]',
  level: 'info',
  timestamp: '2020-02-21T08:56:20.482Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-21T08:57:26.371Z'
}
{
  message: '>>>> userService.remove(), with: user = [object Object]',
  level: 'info',
  timestamp: '2020-02-21T08:57:29.103Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-21T09:11:37.730Z'
}
{
  message: '>>>> userService.remove(), with: user = [object Object]',
  level: 'info',
  timestamp: '2020-02-21T09:11:38.025Z'
}
{
  message: '>>>> userService.remove(), with: user = [object Object]',
  level: 'info',
  timestamp: '2020-02-21T09:12:20.494Z'
}
{
  message: '>>>> authService.register(), with: author = [object Object]',
  level: 'info',
  timestamp: '2020-02-21T09:13:56.517Z'
}
{
  message: '>>>> authService.register(), result = undefined',
  level: 'error',
  timestamp: '2020-02-21T09:13:56.625Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-21T09:15:56.822Z'
}
{
  message: '>>>> userService.remove(), with: user = [object Object]',
  level: 'info',
  timestamp: '2020-02-21T09:16:08.941Z'
}
{
  message: '>>>> userService.remove(), with: user = [object Object]',
  level: 'info',
  timestamp: '2020-02-21T09:17:32.401Z'
}
{
  message: '>>>> userService.remove(), with: user = [object Object]',
  level: 'info',
  timestamp: '2020-02-21T09:17:33.831Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-21T09:18:26.111Z'
}
{
  message: '>>>> userService.remove(), with: user = [object Object]',
  level: 'info',
  timestamp: '2020-02-21T09:18:29.029Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-21T09:18:57.630Z'
}
{
  message: '>>>> userService.remove(), with: user = [object Object]',
  level: 'info',
  timestamp: '2020-02-21T09:18:57.677Z'
}
{
  message: '>>>> userService.remove(), with: user = [object Object]',
  level: 'info',
  timestamp: '2020-02-21T09:19:19.165Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-21T09:20:03.027Z'
}
{
  message: '>>>> userService.remove(), with: user = [object Object]',
  level: 'info',
  timestamp: '2020-02-21T09:20:15.964Z'
}
{
  message: '>>>> userService.remove(), with: user = [object Object]',
  level: 'info',
  timestamp: '2020-02-21T09:20:19.721Z'
}
{
  message: '>>>> userService.remove(), invalid data = [object Object]',
  level: 'error',
  timestamp: '2020-02-21T09:20:19.723Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-21T09:21:25.847Z'
}
{
  message: '>>>> userService.remove(), with: user = "[object Object]"',
  level: 'info',
  timestamp: '2020-02-21T09:21:27.862Z'
}
{
  message: '>>>> userService.remove(), invalid data = [object Object]',
  level: 'error',
  timestamp: '2020-02-21T09:21:27.864Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-21T09:22:43.899Z'
}
{
  message: '">>>> userService.remove(), with: user = [object Object]"',
  level: 'info',
  timestamp: '2020-02-21T09:22:44.282Z'
}
{
  message: '>>>> userService.remove(), invalid data = [object Object]',
  level: 'error',
  timestamp: '2020-02-21T09:22:44.284Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-21T09:25:42.197Z'
}
{
  message: '">>>> userService.remove(), with: user = [object Object]"',
  level: 'info',
  timestamp: '2020-02-21T09:25:42.536Z'
}
{
  message: '>>>> userService.remove(), invalid data = [object Object]',
  level: 'error',
  timestamp: '2020-02-21T09:25:42.538Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-21T09:27:49.646Z'
}
{
  message: '>>>> userService.remove(), with: user = false',
  level: 'info',
  timestamp: '2020-02-21T09:27:49.846Z'
}
{
  message: '>>>> userService.remove(), invalid data = [object Object]',
  level: 'error',
  timestamp: '2020-02-21T09:27:49.848Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-21T09:30:13.824Z'
}
{
  message: '>>>> userService.remove(), with: user = false',
  level: 'info',
  timestamp: '2020-02-21T09:30:14.211Z'
}
{
  message: '>>>> userService.remove(), invalid data = [object Object]',
  level: 'error',
  timestamp: '2020-02-21T09:30:14.212Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-21T09:30:35.894Z'
}
{
  message: '>>>> userService.remove(), with: user = false',
  level: 'info',
  timestamp: '2020-02-21T09:30:38.195Z'
}
{
  message: '>>>> userService.remove(), invalid data = function toString() { [native code] }',
  level: 'error',
  timestamp: '2020-02-21T09:30:38.196Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-21T09:33:28.337Z'
}
{
  message: '>>>> userService.remove(), with: user = false',
  level: 'info',
  timestamp: '2020-02-21T09:33:30.925Z'
}
{
  message: '>>>> userService.remove(), invalid data = {"_id":"5e3c19a004abf333f8a2668"}',
  level: 'error',
  timestamp: '2020-02-21T09:33:30.927Z'
}
{
  message: '>>>> userService.remove(), with: user = true',
  level: 'info',
  timestamp: '2020-02-21T09:36:09.641Z'
}
{
  message: '>>>> userService.remove(), with: user = true',
  level: 'info',
  timestamp: '2020-02-21T09:36:19.464Z'
}
{
  message: '>>>> userService.remove(), with: user = true',
  level: 'info',
  timestamp: '2020-02-21T09:36:28.338Z'
}
{
  message: '>>>> userService.remove(), with: user = true',
  level: 'info',
  timestamp: '2020-02-21T09:36:41.970Z'
}
{
  message: '>>>> userService.remove(), with: user = true',
  level: 'info',
  timestamp: '2020-02-21T09:36:51.366Z'
}
{
  message: '>>>> userService.remove(), with: user = true',
  level: 'info',
  timestamp: '2020-02-21T09:37:16.767Z'
}
{
  message: '>>>> userService.remove(), with: user = true',
  level: 'info',
  timestamp: '2020-02-21T09:37:26.743Z'
}
{
  message: '>>>> authService.logIn(), with: model = [object Object]',
  level: 'info',
  timestamp: '2020-02-21T09:46:28.302Z'
}
{
  message: '>>>> authorService.getAuthors(), with: filter = [object Object]',
  level: 'info',
  timestamp: '2020-02-21T09:46:44.626Z'
}
{
  message: '>>>> authorService.getAuthors(), with: filter = [object Object]',
  level: 'info',
  timestamp: '2020-02-21T09:47:04.012Z'
}
{
  message: '>>>> authorService.getAuthors(), with: filter = [object Object]',
  level: 'info',
  timestamp: '2020-02-21T09:47:27.593Z'
}
{
  message: '>>>> authorService.getAuthors(), with: filter = [object Object]',
  level: 'info',
  timestamp: '2020-02-21T09:47:40.012Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-21T09:56:46.801Z'
}
{
  message: '>>>> authService.register(), with: author = {"userName":"params","email":"params@yandex.com","avatar":"C:/Anuitex/avatar","firstName":"reove","lastName":"test","passwordHash":"25012005"}',
  level: 'info',
  timestamp: '2020-02-21T09:58:27.751Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-21T10:00:47.900Z'
}
{
  message: '>>>> authorService.getAuthors(), with: filter = {"searchString":"richter","pageNumber":1,"pageSize":10}',
  level: 'info',
  timestamp: '2020-02-21T10:00:55.693Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-21T10:55:34.477Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-21T10:56:55.672Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-21T11:00:44.866Z'
}
{
  message: '>>>> userService.changePassword(), with user changePasswordParam = {"_id":"5e4ba967c18d4f204cb8ea35","oldPassword":"25012005","newPassword":"29041988"}',
  level: 'info',
  timestamp: '2020-02-21T11:00:47.040Z'
}
{
  message: '>>>> userService.changePassword(), invalid data = {"_id":"5e4ba967c18d4f204cb8ea35","oldPassword":"25012005","newPassword":"29041988"}',
  level: 'error',
  timestamp: '2020-02-21T11:00:47.047Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-21T11:01:41.796Z'
}
{
  message: '>>>> userService.changePassword(), with user changePasswordParam = {"_id":"5e4ba967c18d4f204cb8ea35","oldPassword":"25012005","newPassword":"29041988"}',
  level: 'info',
  timestamp: '2020-02-21T11:01:46.183Z'
}
{
  message: '>>>> authService.logIn(), with: model = {"email":"swagger@gmail.com","passwordHash":"25012005"}',
  level: 'info',
  timestamp: '2020-02-21T11:02:51.172Z'
}
{
  message: '>>>> authService.logIn(), with: model = {"email":"swagger@gmail.com","passwordHash":"29041988"}',
  level: 'info',
  timestamp: '2020-02-21T11:03:02.220Z'
}
{
  message: '>>>> authService.logIn(), result = invalid password',
  level: 'error',
  timestamp: '2020-02-21T11:03:02.309Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-21T11:05:07.660Z'
}
{
  message: '>>>> userService.changePassword(), with user changePasswordParam = {"_id":"5e4ba967c18d4f204cb8ea35","oldPassword":"25012005","newPassword":"29041988"}',
  level: 'info',
  timestamp: '2020-02-21T11:05:08.264Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-21T11:08:40.052Z'
}
{
  message: '>>>> userService.changePassword(), with user changePasswordParam = {"_id":"5e4ba967c18d4f204cb8ea35","oldPassword":"25012005","newPassword":"29041988"}',
  level: 'info',
  timestamp: '2020-02-21T11:08:43.263Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-21T11:10:20.110Z'
}
{
  message: '>>>> userService.changePassword(), with user changePasswordParam = {"_id":"5e4ba967c18d4f204cb8ea35","oldPassword":"25012005","newPassword":"29041988"}',
  level: 'info',
  timestamp: '2020-02-21T11:10:20.587Z'
}
{
  message: '>>>> userService.remove(), with: user id = {"_id":"5e4ba967c18d4f204cb8ea35"}',
  level: 'info',
  timestamp: '2020-02-21T11:11:20.861Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-21T11:12:05.802Z'
}
{
  message: '>>>> userService.remove(), with: user id = {"_id":"5e4ba967c18d4f204cb8ea35"}',
  level: 'info',
  timestamp: '2020-02-21T11:12:14.237Z'
}
{
  message: '>>>> userService.remove(), with: user id = {"_id":"5e4ba967c18d4f204cb8ea35"}',
  level: 'info',
  timestamp: '2020-02-21T11:13:23.505Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-21T11:13:40.219Z'
}
{
  message: '>>>> userService.changePassword(), with user changePasswordParam = {"_id":"5e4ba967c18d4f204cb8ea35","oldPassword":"25012005","newPassword":"29041988"}',
  level: 'info',
  timestamp: '2020-02-21T11:13:40.291Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-21T11:14:23.719Z'
}
{
  message: '>>>> userService.changePassword(), with user changePasswordParam = {"_id":"5e4ba967c18d4f204cb8ea35","oldPassword":"25012005","newPassword":"29041988"}',
  level: 'info',
  timestamp: '2020-02-21T11:14:24.102Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-21T11:14:52.636Z'
}
{
  message: '>>>> userService.changePassword(), with user changePasswordParam = {"_id":"5e4ba967c18d4f204cb8ea35","oldPassword":"25012005","newPassword":"29041988"}',
  level: 'info',
  timestamp: '2020-02-21T11:14:53.570Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-21T11:17:07.625Z'
}
{
  message: '>>>> userService.changePassword(), with user changePasswordParam = {"_id":"5e4ba967c18d4f204cb8ea35","oldPassword":"25012005","newPassword":"29041988"}',
  level: 'info',
  timestamp: '2020-02-21T11:17:08.005Z'
}
{
  message: '>>>> authService.logIn(), with: model = {"email":"swagger@gmail.com","passwordHash":"29041988"}',
  level: 'info',
  timestamp: '2020-02-21T11:18:09.550Z'
}
{
  message: '>>>> authService.logIn(), result = invalid password',
  level: 'error',
  timestamp: '2020-02-21T11:18:09.634Z'
}
{
  message: '>>>> authService.logIn(), with: model = {"email":"swagger@gmail.com","passwordHash":"25012005"}',
  level: 'info',
  timestamp: '2020-02-21T11:18:17.070Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-21T11:18:48.522Z'
}
{
  message: '>>>> userService.changePassword(), with user changePasswordParam = {"_id":"5e4ba967c18d4f204cb8ea35","oldPassword":"25012005","newPassword":"29041988"}',
  level: 'info',
  timestamp: '2020-02-21T11:18:48.867Z'
}
{
  message: '>>>> authService.logIn(), with: model = {"email":"swagger@gmail.com","passwordHash":"25012005"}',
  level: 'info',
  timestamp: '2020-02-21T11:19:08.500Z'
}
{
  message: '>>>> authService.logIn(), result = invalid password',
  level: 'error',
  timestamp: '2020-02-21T11:19:08.581Z'
}
{
  message: '>>>> authService.logIn(), with: model = {"email":"swagger@gmail.com","passwordHash":"29041988"}',
  level: 'info',
  timestamp: '2020-02-21T11:19:12.507Z'
}
{
  message: '>>>> userService.changePassword(), with user changePasswordParam = {"_id":"5e4ba967c18d4f204cb8ea35","oldPassword":"25012005","newPassword":"29041988"}',
  level: 'info',
  timestamp: '2020-02-21T11:19:36.618Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-21T11:20:11.761Z'
}
{
  message: '>>>> userService.changePassword(), with user changePasswordParam = {"_id":"5e4ba967c18d4f204cb8ea35","oldPassword":"25012005","newPassword":"29041988"}',
  level: 'info',
  timestamp: '2020-02-21T11:20:14.306Z'
}
{
  message: '>>>> userService.changePassword(), result = invalid password',
  level: 'error',
  timestamp: '2020-02-21T11:20:14.400Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-21T11:26:19.967Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-21T11:33:36.853Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-21T11:34:14.142Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-21T11:38:01.410Z'
}
{
  message: '>>>> userService.getById(), with user id = {}',
  level: 'info',
  timestamp: '2020-02-21T11:38:33.638Z'
}
{
  message: '>>>> userService.getById(), invalid data = {}',
  level: 'error',
  timestamp: '2020-02-21T11:38:33.640Z'
}
{
  message: '>>>> userService.getById(), with user id = {}',
  level: 'info',
  timestamp: '2020-02-21T11:39:12.054Z'
}
{
  message: '>>>> userService.getById(), invalid data = {}',
  level: 'error',
  timestamp: '2020-02-21T11:39:12.056Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-21T11:40:40.437Z'
}
{
  message: '>>>> userService.getById(), with user id = {}',
  level: 'info',
  timestamp: '2020-02-21T11:41:09.082Z'
}
{
  message: '>>>> userService.getById(), invalid data = {}',
  level: 'error',
  timestamp: '2020-02-21T11:41:09.091Z'
}
{
  message: '>>>> userService.getById(), with user id = {"_id":"5e4ba967c18d4f204cb8ea35"}',
  level: 'info',
  timestamp: '2020-02-21T11:41:44.227Z'
}
{
  message: '>>>> userService.getById(), with user id = {}',
  level: 'info',
  timestamp: '2020-02-21T11:42:04.392Z'
}
{
  message: '>>>> userService.getById(), invalid data = {}',
  level: 'error',
  timestamp: '2020-02-21T11:42:04.396Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-21T11:42:41.668Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-21T11:43:31.636Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-21T11:44:45.053Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-21T11:45:29.423Z'
}
{
  message: '>>>> userService.getById(), with user id = {}',
  level: 'info',
  timestamp: '2020-02-21T11:45:47.858Z'
}
{
  message: '>>>> userService.getById(), invalid data = {}',
  level: 'error',
  timestamp: '2020-02-21T11:45:47.860Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-21T11:47:11.979Z'
}
{
  message: '>>>> userService.getById(), with user id = {"_id":"5e4ba967c18d4f204cb8ea35"}',
  level: 'info',
  timestamp: '2020-02-21T11:48:05.420Z'
}
{
  message: '>>>> userService.getById(), with user id = {}',
  level: 'info',
  timestamp: '2020-02-21T11:48:17.112Z'
}
{
  message: '>>>> userService.getById(), invalid data = {}',
  level: 'error',
  timestamp: '2020-02-21T11:48:17.118Z'
}
{
  message: '>>>> userService.getById(), with user id = {"_id":"5e4ba967c18d4f204cb8ea35"}',
  level: 'info',
  timestamp: '2020-02-21T11:51:23.063Z'
}
{
  message: '>>>> userService.getById(), with user id = {}',
  level: 'info',
  timestamp: '2020-02-21T11:51:34.245Z'
}
{
  message: '>>>> userService.getById(), invalid data = {}',
  level: 'error',
  timestamp: '2020-02-21T11:51:34.254Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-21T12:40:44.425Z'
}
{
  message: '>>>> userService.getById(), with user id = {"_id":"5e4ba967c18d4f204cb8ea35"}',
  level: 'info',
  timestamp: '2020-02-21T12:41:38.744Z'
}
{
  message: '>>>> userService.getById(), with user id = {"_id":"5e4651df6e62e11f4889ac9d"}',
  level: 'info',
  timestamp: '2020-02-21T12:41:58.532Z'
}
{
  message: '>>>> userService.remove(), with: user id = {"_id":"5e4651df6e62e11f4889ac9d"}',
  level: 'info',
  timestamp: '2020-02-21T12:42:09.906Z'
}
{
  message: '>>>> userService.remove(), with: user id = {"_id":"5e4651df6e62e11f4889ac9d"}',
  level: 'info',
  timestamp: '2020-02-21T12:42:16.391Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-21T15:56:45.978Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-21T15:57:37.640Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-21T16:03:19.454Z'
}
{
  message: '>>>> printingEditionService.create(), with: printingEditionParam = {"title":"The Night of the","description":"History and fate collide as the Nazis rise to power in The Night in Lisbon, a classic tale of survival from the renowned author of All Quiet on the Western Front.","cover_image":"https://www.uphe.com/sites/default/files/2015/04/All-Quiet-on-the-Western-Front-Gallery-1.jpg","type":0,"price":150,"author_ids":[{"_id":"5e4692843577602830c4c5dc"},{"_id":"5e4d09f63696501a00e2b31a"}]}',
  level: 'info',
  timestamp: '2020-02-21T16:04:00.757Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-21T16:04:34.645Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-24T08:50:44.699Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-24T08:52:46.579Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-24T08:53:00.798Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-24T08:53:38.497Z'
}
{
  message: '>>>> authorService.update(), with: author = {"name":"Roger Joseph Zelazny","_id":"5e4d0a553696501a00e2b31b"}',
  level: 'info',
  timestamp: '2020-02-24T08:53:44.926Z'
}
{
  message: '>>>> authorService.update(), with: author = {"name":"Jason Krol","_id":"5e4bc6f7ff84370d80484184"}',
  level: 'info',
  timestamp: '2020-02-24T08:54:28.690Z'
}
{
  message: '>>>> authorService.update(), result = false',
  level: 'error',
  timestamp: '2020-02-24T08:54:28.695Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-24T08:55:45.998Z'
}
{
  message: '>>>> authorService.update(), with: author = {"name":"Jason Krol","_id":"5e4bc6f7ff84370d80484184"}',
  level: 'info',
  timestamp: '2020-02-24T08:55:46.158Z'
}
{
  message: '>>>> authorService.update(), result = false',
  level: 'error',
  timestamp: '2020-02-24T08:55:46.172Z'
}
{
  message: '>>>> authorService.update(), with: author = {"name":"Jason Krl","_id":"5e4bc6f7ff84370d80484184"}',
  level: 'info',
  timestamp: '2020-02-24T08:56:13.313Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-24T08:56:29.168Z'
}
{
  message: '>>>> authorService.update(), with: author = {"name":"Jason Krol","_id":"5e4bc6f7ff84370d80484184"}',
  level: 'info',
  timestamp: '2020-02-24T08:56:50.464Z'
}
{
  message: '>>>> authorService.create(), with: author = {"name":"Philip K. Dick"}',
  level: 'info',
  timestamp: '2020-02-24T08:57:58.341Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-24T08:58:53.822Z'
}
{
  message: '>>>> authorService.create(), with: author = {"name":"Philip K. Dick"}',
  level: 'info',
  timestamp: '2020-02-24T08:58:54.081Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-24T08:59:43.404Z'
}
{
  message: '>>>> authorService.create(), with: author = {"name":"Philip K. Dick"}',
  level: 'info',
  timestamp: '2020-02-24T09:02:51.535Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-24T09:12:32.379Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-24T09:13:01.551Z'
}
{
  message: '>>>> authorService.create(), with: author = {"name":"Philip K. Dick"}',
  level: 'info',
  timestamp: '2020-02-24T09:13:02.851Z'
}
{
  message: '>>>> authorService.create(), with: author = {"name":"Philip K. Dick"}',
  level: 'info',
  timestamp: '2020-02-24T09:13:04.293Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-24T09:13:34.694Z'
}
{
  message: '>>>> authorService.create(), with: author = {"name":"Philip K. Dick"}',
  level: 'info',
  timestamp: '2020-02-24T09:23:36.877Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-24T09:24:19.140Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-24T09:25:00.940Z'
}
{
  message: '>>>> authorService.create(), with: author = {"name":"Robert Sheckley"}',
  level: 'info',
  timestamp: '2020-02-24T09:25:46.909Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-24T09:26:17.754Z'
}
{
  message: '>>>> authorService.create(), with: author = {"name":"Robert Sheckley"}',
  level: 'info',
  timestamp: '2020-02-24T09:26:17.811Z'
}
{
  message: '>>>> authorService.create(), with: author = {"name":"Some author"}',
  level: 'info',
  timestamp: '2020-02-24T09:27:28.135Z'
}
{
  message: '>>>> authorService.create(), with: author = {"name":"Robert Sheckly"}',
  level: 'info',
  timestamp: '2020-02-24T09:29:20.858Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-24T09:30:34.597Z'
}
{
  message: '>>>> authService.register(), with: author = {"userName":"SomesUser","email":"User@Yandex.ru","avatar":"C:/","firstName":"Somes","lastName":"User","passwordHash":"25012005"}',
  level: 'info',
  timestamp: '2020-02-24T09:31:38.106Z'
}
{
  message: '>>>> authService.register(), invalid data = instance.avatar does not meet minimum length of 4',
  level: 'error',
  timestamp: '2020-02-24T09:31:38.108Z'
}
{
  message: '>>>> authService.register(), with: author = {"userName":"SomesUser","email":"User@Yandex.ru","avatar":"C:/assets","firstName":"Somes","lastName":"User","passwordHash":"25012005"}',
  level: 'info',
  timestamp: '2020-02-24T09:31:54.444Z'
}
{
  message: '>>>> authorService.create(), with: author = {"name":"Robert Shecklyr"}',
  level: 'info',
  timestamp: '2020-02-24T09:33:04.255Z'
}
{
  message: '>>>> authorService.update(), with: author = {"name":"Terry Pratchet","_id":"5e3d1c71c818e21204ac2b8b"}',
  level: 'info',
  timestamp: '2020-02-24T09:33:41.034Z'
}
{
  message: '>>>> authorService.create(), with: author = {"name":"Robert "}',
  level: 'info',
  timestamp: '2020-02-24T09:34:33.838Z'
}
{
  message: '>>>> userService.getById(), with user id = {}',
  level: 'info',
  timestamp: '2020-02-24T09:36:37.818Z'
}
{
  message: '>>>> userService.getById(), invalid data = {}',
  level: 'error',
  timestamp: '2020-02-24T09:36:37.827Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-24T13:19:31.493Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-24T13:50:05.599Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-24T13:53:31.440Z'
}
{
  message: '>>>> authorService.create(), with: author = {"name":"tiofxdbzf","stock":0,"price":0}',
  level: 'info',
  timestamp: '2020-02-24T13:53:43.637Z'
}
{
  message: '>>>> authorService.create(), invalid data = instance additionalProperty "stock" exists in instance when not allowed,instance additionalProperty "price" exists in instance when not allowed',
  level: 'error',
  timestamp: '2020-02-24T13:53:43.640Z'
}
{
  message: '>>>> authorService.create(), with: author = {"name":"yuipo","stock":0,"price":0}',
  level: 'info',
  timestamp: '2020-02-24T13:54:00.461Z'
}
{
  message: '>>>> authorService.create(), invalid data = instance additionalProperty "stock" exists in instance when not allowed,instance additionalProperty "price" exists in instance when not allowed',
  level: 'error',
  timestamp: '2020-02-24T13:54:00.463Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-24T13:55:30.657Z'
}
{
  message: '>>>> authorService.create(), with: author = {"stock":0,"price":0,"name":"fdsghdf"}',
  level: 'info',
  timestamp: '2020-02-24T13:55:55.425Z'
}
{
  message: '>>>> authorService.create(), invalid data = instance additionalProperty "stock" exists in instance when not allowed,instance additionalProperty "price" exists in instance when not allowed',
  level: 'error',
  timestamp: '2020-02-24T13:55:55.438Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-24T14:48:21.434Z'
}
{
  message: '>>>> authorService.create(), with: author = {"name":"Goncharuk Vladimir"}',
  level: 'info',
  timestamp: '2020-02-24T14:48:39.405Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-24T14:53:07.450Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-25T10:44:52.956Z'
}
{
  message: '>>>> authorService.create(), with: author = {"name":"Goncharuk Vladimir","stock":"sd","price":"dfgh"}',
  level: 'info',
  timestamp: '2020-02-25T11:03:35.268Z'
}
{
  message: '>>>> authorService.create(), invalid data = instance additionalProperty "stock" exists in instance when not allowed,instance additionalProperty "price" exists in instance when not allowed',
  level: 'error',
  timestamp: '2020-02-25T11:03:35.308Z'
}
{
  message: '>>>> authorService.create(), with: author = {"userName":"HokkeyMan","firstName":"Gordie ","lastName":"yuk "}',
  level: 'info',
  timestamp: '2020-02-25T11:04:48.542Z'
}
{
  message: '>>>> authorService.create(), invalid data = instance additionalProperty "userName" exists in instance when not allowed,instance additionalProperty "firstName" exists in instance when not allowed,instance additionalProperty "lastName" exists in instance when not allowed,instance requires property "name"',
  level: 'error',
  timestamp: '2020-02-25T11:04:48.552Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-25T11:06:02.378Z'
}
{
  message: '>>>> authorService.create(), with: author = {"userName":"dgfh","firstName":"dfgh","lastName":"fsdgh"}',
  level: 'info',
  timestamp: '2020-02-25T11:06:32.375Z'
}
{
  message: '>>>> authorService.create(), invalid data = instance additionalProperty "userName" exists in instance when not allowed,instance additionalProperty "firstName" exists in instance when not allowed,instance additionalProperty "lastName" exists in instance when not allowed,instance requires property "name"',
  level: 'error',
  timestamp: '2020-02-25T11:06:32.378Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-25T11:09:49.667Z'
}
{
  message: '>>>> authorService.create(), with: author = {"userName":"HokkeyMan","firstName":"Gordie ","lastName":"yuk","email":"paderborner2019@gmail.com","password":"25012005"}',
  level: 'info',
  timestamp: '2020-02-25T11:10:26.115Z'
}
{
  message: '>>>> authorService.create(), invalid data = instance additionalProperty "userName" exists in instance when not allowed,instance additionalProperty "firstName" exists in instance when not allowed,instance additionalProperty "lastName" exists in instance when not allowed,instance additionalProperty "email" exists in instance when not allowed,instance additionalProperty "password" exists in instance when not allowed,instance requires property "name"',
  level: 'error',
  timestamp: '2020-02-25T11:10:26.118Z'
}
{
  message: '>>>> authService.register(), with: author = {"userName":"HokkeyMan","firstName":"Gordie ","lastName":"yuk","email":"paderborner2019@gmail.com","password":"25012005"}',
  level: 'info',
  timestamp: '2020-02-25T11:13:36.227Z'
}
{
  message: '>>>> authService.register(), invalid data = instance.lastName does not meet minimum length of 4,instance additionalProperty "password" exists in instance when not allowed,instance requires property "passwordHash"',
  level: 'error',
  timestamp: '2020-02-25T11:13:36.229Z'
}
{
  message: '>>>> authService.register(), with: author = {"userName":"HokkeyMan","firstName":"Gordie ","lastName":"Goncharuk","email":"paderborner2019@gmail.com","password":"25012005"}',
  level: 'info',
  timestamp: '2020-02-25T11:14:04.767Z'
}
{
  message: '>>>> authService.register(), invalid data = instance additionalProperty "password" exists in instance when not allowed,instance requires property "passwordHash"',
  level: 'error',
  timestamp: '2020-02-25T11:14:04.769Z'
}
{
  message: '>>>> authService.register(), with: author = {"userName":"HokkeyMan","firstName":"Gordie ","lastName":"Goncharuk","email":"paderborner2019@gmail.com","passwordHash":"25012005"}',
  level: 'info',
  timestamp: '2020-02-25T11:16:15.718Z'
}
{
  message: '>>>> authService.register(), with: author = {"userName":"HokkeyMan","firstName":"asd"}',
  level: 'info',
  timestamp: '2020-02-25T12:01:32.503Z'
}
{
  message: '>>>> authService.register(), invalid data = instance.firstName does not meet minimum length of 4,instance requires property "email",instance requires property "lastName",instance requires property "passwordHash"',
  level: 'error',
  timestamp: '2020-02-25T12:01:32.513Z'
}
