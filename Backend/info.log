{
  message: '>>>> authorService.create(), with: author = [object Object]',
  level: 'info',
  timestamp: '2020-02-19T10:01:00.836Z'
}
{
  message: '>>>> authorService.create(), with: author = [object Object]',
  level: 'info',
  timestamp: '2020-02-19T10:03:59.853Z'
}
{
  message: '>>>> authorService.create(), with: author = [object Object]',
  level: 'info',
  timestamp: '2020-02-19T10:04:56.797Z'
}
{
  message: '>>>> authorService.create(), with: author = [object Object]',
  level: 'info',
  timestamp: '2020-02-19T10:06:08.587Z'
}
{
  message: '>>>> authorService.create(), with: author = [object Object]',
  level: 'info',
  timestamp: '2020-02-19T10:06:47.574Z'
}
{
  message: '>>>> authorService.create(), with: author = [object Object]',
  level: 'info',
  timestamp: '2020-02-19T10:10:20.587Z'
}
{
  message: '>>>> authorService.create(), with: author = [object Object]',
  level: 'info',
  timestamp: '2020-02-19T10:12:06.141Z'
}
{
  message: '>>>> authorService.create(), with: author = [object Object]',
  level: 'info',
  timestamp: '2020-02-19T10:13:41.796Z'
}
{
  message: '>>>> authorService.create(), with: author = [object Object]',
  level: 'info',
  timestamp: '2020-02-19T10:14:17.924Z'
}
{
  message: '>>>> authorService.create(), with: author = [object Object]',
  level: 'info',
  timestamp: '2020-02-19T10:15:07.128Z'
}
{
  message: '>>>> authorService.create(), with: author = [object Object]',
  level: 'info',
  timestamp: '2020-02-19T10:16:59.705Z'
}
{
  message: '>>>> authorService.create(), invalid data = undefined',
  level: 'error',
  timestamp: '2020-02-19T10:16:59.709Z'
}
{
  message: '>>>> authorService.create(), with: author = [object Object]',
  level: 'info',
  timestamp: '2020-02-19T10:17:52.488Z'
}
{
  message: '>>>> authorService.create(), invalid data = instance requires property "name"',
  level: 'error',
  timestamp: '2020-02-19T10:17:52.492Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-19T10:48:46.089Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-19T11:36:43.793Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-19T11:42:37.096Z'
}
{
  message: '>>>> userService.edit(), with: user = [object Object]',
  level: 'info',
  timestamp: '2020-02-19T11:45:59.009Z'
}
{
  message: '>>>> userService.edit(), invalid data = instance additionalProperty "lastName" exists in instance when not allowed,instance additionalProperty "passwordHash" exists in instance when not allowed',
  level: 'error',
  timestamp: '2020-02-19T11:45:59.011Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-19T11:46:54.822Z'
}
{
  message: '>>>> userService.edit(), with: user = [object Object]',
  level: 'info',
  timestamp: '2020-02-19T11:46:57.927Z'
}
{
  message: '>>>> userService.edit(), invalid data = instance additionalProperty "passwordHash" exists in instance when not allowed',
  level: 'error',
  timestamp: '2020-02-19T11:46:57.929Z'
}
{
  message: '>>>> userService.edit(), with: user = [object Object]',
  level: 'info',
  timestamp: '2020-02-19T11:47:20.050Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-19T11:48:26.298Z'
}
{
  message: '>>>> userService.edit(), with: user = [object Object]',
  level: 'info',
  timestamp: '2020-02-19T11:48:27.765Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-19T11:51:23.991Z'
}
{
  message: '>>>> userService.edit(), with: user = [object Object]',
  level: 'info',
  timestamp: '2020-02-19T11:51:24.125Z'
}
{
  message: '>>>> userService.edit(), with: user = [object Object]',
  level: 'info',
  timestamp: '2020-02-19T11:51:38.895Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-19T11:55:04.878Z'
}
{
  message: '>>>> userService.edit(), with: user = [object Object]',
  level: 'info',
  timestamp: '2020-02-19T11:55:07.649Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-19T11:58:55.186Z'
}
{
  message: '>>>> userService.edit(), with: user = [object Object]',
  level: 'info',
  timestamp: '2020-02-19T11:58:55.262Z'
}
{
  message: '>>>> userService.edit(), with: user = [object Object]',
  level: 'info',
  timestamp: '2020-02-19T11:59:09.000Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-19T11:59:40.122Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-19T11:59:49.894Z'
}
{
  message: '>>>> userService.edit(), with: user = [object Object]',
  level: 'info',
  timestamp: '2020-02-19T11:59:49.928Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-19T12:00:32.925Z'
}
{
  message: '>>>> userService.edit(), with: user = [object Object]',
  level: 'info',
  timestamp: '2020-02-19T12:00:35.445Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-19T12:08:43.319Z'
}
{
  message: '>>>> userService.edit(), with: user = [object Object]',
  level: 'info',
  timestamp: '2020-02-19T12:08:47.661Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-19T12:09:35.073Z'
}
{
  message: '>>>> userService.edit(), with: user = [object Object]',
  level: 'info',
  timestamp: '2020-02-19T12:09:37.892Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-19T12:10:16.064Z'
}
{
  message: '>>>> userService.edit(), with: user = [object Object]',
  level: 'info',
  timestamp: '2020-02-19T12:10:16.326Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-19T12:10:37.983Z'
}
{
  message: '>>>> userService.edit(), with: user = [object Object]',
  level: 'info',
  timestamp: '2020-02-19T12:10:38.965Z'
}
{
  message: '>>>> userService.edit(), result = failed to update user',
  level: 'error',
  timestamp: '2020-02-19T12:10:38.978Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-19T12:12:04.302Z'
}
{
  message: '>>>> userService.edit(), with: user = [object Object]',
  level: 'info',
  timestamp: '2020-02-19T12:12:06.016Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-19T12:13:00.114Z'
}
{
  message: '>>>> userService.edit(), with: user = [object Object]',
  level: 'info',
  timestamp: '2020-02-19T12:13:00.352Z'
}
{
  message: '>>>> userService.edit(), result = failed to update user',
  level: 'error',
  timestamp: '2020-02-19T12:13:00.368Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-19T12:14:13.245Z'
}
{
  message: '>>>> userService.edit(), with: user = [object Object]',
  level: 'info',
  timestamp: '2020-02-19T12:14:13.423Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-19T12:15:22.706Z'
}
{
  message: '>>>> userService.edit(), with: user = [object Object]',
  level: 'info',
  timestamp: '2020-02-19T12:15:22.918Z'
}
{
  message: '>>>> userService.edit(), result = failed to update user',
  level: 'error',
  timestamp: '2020-02-19T12:15:22.935Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-19T12:16:30.005Z'
}
{
  message: '>>>> userService.edit(), with: user = [object Object]',
  level: 'info',
  timestamp: '2020-02-19T12:16:30.593Z'
}
{
  message: ">>>> userService.edit(), result = MongoError: Performing an update on the path '_id' would modify the immutable field '_id'",
  level: 'error',
  timestamp: '2020-02-19T12:16:30.618Z'
}
{
  message: '>>>> authorService.update(), with: author = [object Object]',
  level: 'info',
  timestamp: '2020-02-19T12:41:29.791Z'
}
{
  message: '>>>> authorService.update(), result = false',
  level: 'error',
  timestamp: '2020-02-19T12:41:29.803Z'
}
{
  message: '>>>> authorService.update(), with: author = [object Object]',
  level: 'info',
  timestamp: '2020-02-19T12:42:25.128Z'
}
{
  message: '>>>> userService.edit(), with: user = [object Object]',
  level: 'info',
  timestamp: '2020-02-19T12:50:27.747Z'
}
{
  message: ">>>> userService.edit(), result = MongoError: Performing an update on the path '_id' would modify the immutable field '_id'",
  level: 'error',
  timestamp: '2020-02-19T12:50:27.766Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-19T12:51:16.188Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-19T12:51:32.417Z'
}
{
  message: '>>>> userService.edit(), with: user = undefined',
  level: 'info',
  timestamp: '2020-02-19T12:51:33.230Z'
}
{
  message: ">>>> userService.edit(), result = MongoError: Performing an update on the path '_id' would modify the immutable field '_id'",
  level: 'error',
  timestamp: '2020-02-19T12:51:33.246Z'
}
{
  message: '>>>> authorService.update(), with: author = [object Object]',
  level: 'info',
  timestamp: '2020-02-19T12:54:01.546Z'
}
{
  message: '>>>> authorService.getAuthors(), with: filter = [object Object]',
  level: 'info',
  timestamp: '2020-02-19T12:57:45.788Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-19T12:59:22.839Z'
}
{
  message: '>>>> authorService.getAuthors(), with: filter = [object Object]',
  level: 'info',
  timestamp: '2020-02-19T12:59:23.160Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-19T12:59:50.463Z'
}
{
  message: '>>>> authorService.getAuthors(), with: filter = [object Object]',
  level: 'info',
  timestamp: '2020-02-19T12:59:50.952Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-19T13:02:45.061Z'
}
{
  message: '>>>> authorService.getAuthors(), with: filter = [object Object]',
  level: 'info',
  timestamp: '2020-02-19T13:02:45.421Z'
}
{
  message: '>>>> authorService.getAuthors(), with: filter = [object Object]',
  level: 'info',
  timestamp: '2020-02-19T13:04:36.594Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-19T13:09:51.452Z'
}
{
  message: '>>>> authorService.getAuthors(), with: filter = [object Object]',
  level: 'info',
  timestamp: '2020-02-19T13:10:31.076Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-19T13:10:50.124Z'
}
{
  message: '>>>> authorService.getAuthors(), with: filter = [object Object]',
  level: 'info',
  timestamp: '2020-02-19T13:10:50.236Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-19T13:11:35.539Z'
}
{
  message: '>>>> authorService.getAuthors(), with: filter = [object Object]',
  level: 'info',
  timestamp: '2020-02-19T13:11:35.653Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-19T13:11:52.301Z'
}
{
  message: '>>>> authorService.getAuthors(), with: filter = [object Object]',
  level: 'info',
  timestamp: '2020-02-19T13:11:54.129Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-19T13:12:17.188Z'
}
{
  message: '>>>> authorService.getAuthors(), with: filter = [object Object]',
  level: 'info',
  timestamp: '2020-02-19T13:13:08.891Z'
}
{
  message: '>>>> authorService.getAuthors(), with: filter = [object Object]',
  level: 'info',
  timestamp: '2020-02-19T13:13:25.965Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-19T13:13:49.462Z'
}
{
  message: '>>>> authorService.getAuthors(), with: filter = [object Object]',
  level: 'info',
  timestamp: '2020-02-19T13:13:49.529Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-19T13:17:21.003Z'
}
{
  message: '>>>> authorService.getAuthors(), with: filter = [object Object]',
  level: 'info',
  timestamp: '2020-02-19T13:17:21.096Z'
}
{
  message: '>>>> authorService.getAuthors(), with: filter = [object Object]',
  level: 'info',
  timestamp: '2020-02-19T13:17:44.776Z'
}
{
  message: '>>>> userService.edit(), with: user = undefined',
  level: 'info',
  timestamp: '2020-02-19T13:19:50.505Z'
}
{
  message: ">>>> userService.edit(), result = MongoError: Performing an update on the path '_id' would modify the immutable field '_id'",
  level: 'error',
  timestamp: '2020-02-19T13:19:50.526Z'
}
{
  message: '>>>> userService.edit(), with: user = undefined',
  level: 'info',
  timestamp: '2020-02-19T13:20:45.321Z'
}
{
  message: '>>>> userService.edit(), invalid data = instance additionalProperty "id" exists in instance when not allowed',
  level: 'error',
  timestamp: '2020-02-19T13:20:45.327Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-19T13:21:37.859Z'
}
{
  message: '>>>> userService.edit(), with: user = [object Object]',
  level: 'info',
  timestamp: '2020-02-19T13:21:37.978Z'
}
{
  message: '>>>> userService.edit(), result = MongoError: E11000 duplicate key error collection: educationdb.users index: userName_1 dup key: { userName: "Morgenshtern88" }',
  level: 'error',
  timestamp: '2020-02-19T13:21:38.007Z'
}
{
  message: '>>>> userService.edit(), with: user = [object Object]',
  level: 'info',
  timestamp: '2020-02-19T13:22:21.242Z'
}
{
  message: '>>>> userService.edit(), result = MongoError: E11000 duplicate key error collection: educationdb.users index: userName_1 dup key: { userName: "Morgenshtern" }',
  level: 'error',
  timestamp: '2020-02-19T13:22:21.260Z'
}
{
  message: '>>>> userService.edit(), with: user = [object Object]',
  level: 'info',
  timestamp: '2020-02-19T13:22:28.175Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-19T13:49:05.531Z'
}
{
  message: '>>>> authService.register(), with: model = [object Object]',
  level: 'info',
  timestamp: '2020-02-19T13:49:09.169Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-19T13:52:02.221Z'
}
{
  message: '>>>> authService.register(), with: model = [object Object]',
  level: 'info',
  timestamp: '2020-02-19T13:52:06.239Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-19T13:52:40.136Z'
}
{
  message: '>>>> authService.register(), with: model = [object Object]',
  level: 'info',
  timestamp: '2020-02-19T13:52:40.760Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-19T13:53:32.260Z'
}
{
  message: '>>>> authService.register(), with: model = [object Object]',
  level: 'info',
  timestamp: '2020-02-19T13:53:32.674Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-19T13:54:27.393Z'
}
{
  message: '>>>> authService.register(), with: model = [object Object]',
  level: 'info',
  timestamp: '2020-02-19T13:54:28.145Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-19T13:56:22.112Z'
}
{
  message: '>>>> authService.register(), with: model = [object Object]',
  level: 'info',
  timestamp: '2020-02-19T13:56:22.155Z'
}
{
  message: '>>>> authService.register(), with: model = [object Object]',
  level: 'info',
  timestamp: '2020-02-19T13:56:58.030Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-19T13:57:18.548Z'
}
{
  message: '>>>> authService.register(), with: model = [object Object]',
  level: 'info',
  timestamp: '2020-02-19T13:57:19.704Z'
}
{
  message: '>>>> authService.register(), with: model = [object Object]',
  level: 'info',
  timestamp: '2020-02-19T13:57:33.874Z'
}
{
  message: '>>>> authService.register(), invalid data = instance.passwordHash does not meet minimum length of 4',
  level: 'error',
  timestamp: '2020-02-19T13:57:33.879Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-19T13:59:21.370Z'
}
{
  message: '>>>> authService.register(), with: model = [object Object]',
  level: 'info',
  timestamp: '2020-02-19T13:59:21.395Z'
}
{
  message: '>>>> authService.register(), invalid data = instance.passwordHash does not meet minimum length of 4',
  level: 'error',
  timestamp: '2020-02-19T13:59:21.396Z'
}
{
  message: '>>>> authService.register(), with: model = [object Object]',
  level: 'info',
  timestamp: '2020-02-19T14:00:34.185Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-19T14:01:30.344Z'
}
{
  message: '>>>> authService.register(), with: model = [object Object]',
  level: 'info',
  timestamp: '2020-02-19T14:01:30.687Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-19T14:02:42.986Z'
}
{
  message: '>>>> authService.register(), with: model = [object Object]',
  level: 'info',
  timestamp: '2020-02-19T14:02:46.435Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-19T14:05:14.199Z'
}
{
  message: '>>>> authService.register(), with: model = [object Object]',
  level: 'info',
  timestamp: '2020-02-19T14:05:16.062Z'
}
{
  message: '>>>> authService.register(), result = invalid password',
  level: 'error',
  timestamp: '2020-02-19T14:05:16.159Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-19T15:40:46.201Z'
}
{
  message: '>>>> orderService.createOrder(), with: orderParam = [object Object]',
  level: 'info',
  timestamp: '2020-02-19T15:41:54.625Z'
}
{
  message: '>>>> orderService.createOrder(), invalid data = instance additionalProperty "sortType" exists in instance when not allowed,instance additionalProperty "searchString" exists in instance when not allowed,instance additionalProperty "pageNumber" exists in instance when not allowed,instance additionalProperty "pageSize" exists in instance when not allowed,instance requires property "_id"',
  level: 'error',
  timestamp: '2020-02-19T15:41:54.634Z'
}
{
  message: '>>>> orderService.createOrder(), with: orderParam = [object Object]',
  level: 'info',
  timestamp: '2020-02-19T15:42:05.783Z'
}
{
  message: '>>>> orderService.createOrder(), invalid data = instance requires property "_id"',
  level: 'error',
  timestamp: '2020-02-19T15:42:05.785Z'
}
{
  message: '>>>> orderService.createOrder(), with: orderParam = [object Object]',
  level: 'info',
  timestamp: '2020-02-19T15:43:06.499Z'
}
{
  message: '>>>> orderService.createOrder(), invalid data = instance requires property "_id"',
  level: 'error',
  timestamp: '2020-02-19T15:43:06.501Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-19T15:43:20.808Z'
}
{
  message: '>>>> orderService.createOrder(), with: orderParam = [object Object]',
  level: 'info',
  timestamp: '2020-02-19T15:43:22.889Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-19T15:44:14.720Z'
}
{
  message: '>>>> orderService.createOrder(), with: orderParam = [object Object]',
  level: 'info',
  timestamp: '2020-02-19T15:44:42.152Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-19T15:57:56.669Z'
}
{
  message: '>>>> orderService.createOrder(), with: orderParam = [object Object]',
  level: 'info',
  timestamp: '2020-02-19T15:57:56.896Z'
}
{
  message: '>>>> orderService.createOrder(), with: orderParam = [object Object]',
  level: 'info',
  timestamp: '2020-02-19T15:58:52.441Z'
}
{
  message: '>>>> orderService.createOrder(), with: orderParam = [object Object]',
  level: 'info',
  timestamp: '2020-02-19T16:00:34.791Z'
}
{
  message: '>>>> orderService.createOrder(), invalid data = instance requires property "payment_info"',
  level: 'error',
  timestamp: '2020-02-19T16:00:34.792Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-20T07:22:31.843Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-20T07:23:36.441Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-20T07:25:52.451Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-20T07:26:28.296Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-20T07:27:39.360Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-20T07:28:26.732Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-20T07:30:13.506Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-20T07:33:03.187Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-20T07:36:03.326Z'
}
{
  message: '>>>> printingEditionService.update(), with: printingEdition = [object Object]',
  level: 'info',
  timestamp: '2020-02-20T07:36:03.386Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-20T07:39:07.061Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-20T07:41:12.128Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-20T07:44:28.037Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-20T07:45:50.539Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-20T07:47:13.227Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-20T07:48:57.791Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-20T07:53:53.173Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-20T08:26:31.301Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-20T08:29:30.686Z'
}
{
  message: '>>>> authService.logIn(), with: model = [object Object]',
  level: 'info',
  timestamp: '2020-02-20T08:29:30.978Z'
}
{
  message: '>>>> authService.logIn(), result = invalid password',
  level: 'error',
  timestamp: '2020-02-20T08:29:31.020Z'
}
{
  message: '>>>> authService.logIn(), with: model = [object Object]',
  level: 'info',
  timestamp: '2020-02-20T08:30:03.228Z'
}
{
  message: '>>>> authService.logIn(), result = invalid password',
  level: 'error',
  timestamp: '2020-02-20T08:30:03.232Z'
}
{
  message: '>>>> authService.logIn(), with: model = [object Object]',
  level: 'info',
  timestamp: '2020-02-20T08:30:41.760Z'
}
{
  message: '>>>> printingEditionService.getById(), with: printingEdition id = [object Object]',
  level: 'info',
  timestamp: '2020-02-20T08:31:19.822Z'
}
{
  message: '>>>> printingEditionService.getById(), invalid data = instance additionalProperty "id" exists in instance when not allowed,instance requires property "_id"',
  level: 'error',
  timestamp: '2020-02-20T08:31:19.832Z'
}
{
  message: '>>>> printingEditionService.getById(), with: printingEdition id = [object Object]',
  level: 'info',
  timestamp: '2020-02-20T08:31:35.415Z'
}
{
  message: '>>>> printingEditionService.getById(), with: printingEdition id = [object Object]',
  level: 'info',
  timestamp: '2020-02-20T08:32:24.492Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-20T08:33:29.084Z'
}
{
  message: '>>>> printingEditionService.getById(), with: printingEdition id = [object Object]',
  level: 'info',
  timestamp: '2020-02-20T08:33:32.132Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-20T08:34:08.698Z'
}
{
  message: '>>>> printingEditionService.getById(), with: printingEdition id = [object Object]',
  level: 'info',
  timestamp: '2020-02-20T08:34:09.251Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-20T08:34:34.084Z'
}
{
  message: '>>>> printingEditionService.getById(), with: printingEdition id = [object Object]',
  level: 'info',
  timestamp: '2020-02-20T08:34:35.413Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-20T08:35:11.376Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-20T08:35:53.436Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-20T08:36:19.074Z'
}
{
  message: '>>>> printingEditionService.getById(), with: printingEdition id = [object Object]',
  level: 'info',
  timestamp: '2020-02-20T08:36:24.433Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-20T09:24:15.774Z'
}
{
  message: '>>>> authService.logIn(), with: model = [object Object]',
  level: 'info',
  timestamp: '2020-02-20T09:26:15.924Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-20T09:28:50.680Z'
}
{
  message: '>>> orderService.getOrdersForAdmin(), with filter = [object Object]',
  level: 'info',
  timestamp: '2020-02-20T09:28:58.341Z'
}
{
  message: '>>>> authService.logIn(), with: model = [object Object]',
  level: 'info',
  timestamp: '2020-02-20T09:31:28.976Z'
}
{
  message: '>>>> orderService.getOrdersForUser(), with: id = [object Object]',
  level: 'info',
  timestamp: '2020-02-20T09:31:58.909Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-20T09:33:19.900Z'
}
{
  message: '>>>> orderService.getOrdersForUser(), with: id = [object Object]',
  level: 'info',
  timestamp: '2020-02-20T09:33:22.214Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-20T09:33:39.957Z'
}
{
  message: '>>>> orderService.getOrdersForUser(), with: id = [object Object]',
  level: 'info',
  timestamp: '2020-02-20T09:33:40.514Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-20T09:34:32.849Z'
}
{
  message: '>>>> orderService.getOrdersForUser(), with: id = [object Object]',
  level: 'info',
  timestamp: '2020-02-20T09:34:35.148Z'
}
{
  message: '>>>> orderService.getOrdersForUser(), with: id = [object Object]',
  level: 'info',
  timestamp: '2020-02-20T09:34:37.405Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-20T09:35:14.837Z'
}
{
  message: '>>>> orderService.getOrdersForUser(), with: id = [object Object]',
  level: 'info',
  timestamp: '2020-02-20T09:35:16.996Z'
}
{
  message: '>>>> orderService.getOrdersForUser(), with: id = [object Object]',
  level: 'info',
  timestamp: '2020-02-20T09:35:18.561Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-20T09:35:42.456Z'
}
{
  message: '>>>> orderService.getOrdersForUser(), with: id = [object Object]',
  level: 'info',
  timestamp: '2020-02-20T09:35:43.034Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-20T09:36:28.102Z'
}
{
  message: '>>>> orderService.getOrdersForUser(), with: id = [object Object]',
  level: 'info',
  timestamp: '2020-02-20T09:36:28.788Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-20T09:37:19.790Z'
}
{
  message: '>>>> orderService.getOrdersForUser(), with: id = [object Object]',
  level: 'info',
  timestamp: '2020-02-20T09:37:20.989Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-20T09:37:58.188Z'
}
{
  message: '>>>> orderService.getOrdersForUser(), with: id = [object Object]',
  level: 'info',
  timestamp: '2020-02-20T09:37:58.598Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-20T09:39:18.793Z'
}
{
  message: '>>>> orderService.getOrdersForUser(), with: id = [object Object]',
  level: 'info',
  timestamp: '2020-02-20T09:39:20.967Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-20T09:40:01.721Z'
}
{
  message: '>>>> orderService.getOrdersForUser(), with: id = [object Object]',
  level: 'info',
  timestamp: '2020-02-20T09:40:02.291Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-20T09:40:21.818Z'
}
{
  message: '>>>> orderService.getOrdersForUser(), with: id = [object Object]',
  level: 'info',
  timestamp: '2020-02-20T09:40:24.659Z'
}
{
  message: '>>>> orderService.getOrdersForUser(), with: id = [object Object]',
  level: 'info',
  timestamp: '2020-02-20T09:40:25.699Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-20T09:40:40.000Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-20T09:40:51.419Z'
}
{
  message: '>>>> orderService.getOrdersForUser(), with: id = [object Object]',
  level: 'info',
  timestamp: '2020-02-20T09:40:55.238Z'
}
{
  message: '>>>> orderService.getOrdersForUser(), with: id = [object Object]',
  level: 'info',
  timestamp: '2020-02-20T09:40:56.923Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-20T09:41:41.420Z'
}
{
  message: '>>>> orderService.getOrdersForUser(), with: id = [object Object]',
  level: 'info',
  timestamp: '2020-02-20T09:41:43.851Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-20T09:42:18.203Z'
}
{
  message: '>>>> orderService.getOrdersForUser(), with: id = [object Object]',
  level: 'info',
  timestamp: '2020-02-20T09:42:21.060Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-20T09:43:43.644Z'
}
{
  message: '>>>> orderService.getOrdersForUser(), with: id = [object Object]',
  level: 'info',
  timestamp: '2020-02-20T09:43:46.125Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-20T09:45:10.624Z'
}
{
  message: '>>>> orderService.getOrdersForUser(), with: id = [object Object]',
  level: 'info',
  timestamp: '2020-02-20T09:45:13.828Z'
}
{
  message: '>>>> orderService.getOrdersForUser(), with: id = [object Object]',
  level: 'info',
  timestamp: '2020-02-20T09:45:16.693Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-20T09:46:09.691Z'
}
{
  message: '>>>> orderService.getOrdersForUser(), with: id = [object Object]',
  level: 'info',
  timestamp: '2020-02-20T09:46:11.821Z'
}
{
  message: '>>>> orderService.getOrdersForUser(), with: id = [object Object]',
  level: 'info',
  timestamp: '2020-02-20T09:46:12.851Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-20T09:48:10.908Z'
}
{
  message: '>>>> orderService.getOrdersForUser(), with: id = [object Object]',
  level: 'info',
  timestamp: '2020-02-20T09:48:11.299Z'
}
{
  message: '>>>> authService.logIn(), with: model = [object Object]',
  level: 'info',
  timestamp: '2020-02-20T09:55:14.961Z'
}
{
  message: '>>> orderService.getOrdersForAdmin(), with filter = [object Object]',
  level: 'info',
  timestamp: '2020-02-20T09:55:38.604Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-20T09:57:00.650Z'
}
{
  message: '>>> orderService.getOrdersForAdmin(), with filter = [object Object]',
  level: 'info',
  timestamp: '2020-02-20T09:57:01.159Z'
}
{
  message: '>>> orderService.getOrdersForAdmin(), with filter = [object Object]',
  level: 'info',
  timestamp: '2020-02-20T09:57:58.912Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-20T09:59:24.696Z'
}
{
  message: '>>> orderService.getOrdersForAdmin(), with filter = [object Object]',
  level: 'info',
  timestamp: '2020-02-20T09:59:27.612Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-20T10:00:07.128Z'
}
{
  message: '>>> orderService.getOrdersForAdmin(), with filter = [object Object]',
  level: 'info',
  timestamp: '2020-02-20T10:00:07.380Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-20T10:00:31.719Z'
}
{
  message: '>>> orderService.getOrdersForAdmin(), with filter = [object Object]',
  level: 'info',
  timestamp: '2020-02-20T10:00:31.864Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-20T10:01:19.525Z'
}
{
  message: '>>> orderService.getOrdersForAdmin(), with filter = [object Object]',
  level: 'info',
  timestamp: '2020-02-20T10:01:22.870Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-20T10:04:03.477Z'
}
{
  message: '>>> orderService.getOrdersForAdmin(), with filter = [object Object]',
  level: 'info',
  timestamp: '2020-02-20T10:04:06.486Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-20T10:06:04.720Z'
}
{
  message: '>>>> authorService.getAuthors(), with: filter = [object Object]',
  level: 'info',
  timestamp: '2020-02-20T10:06:15.018Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-20T10:08:02.974Z'
}
{
  message: '>>>> authorService.getAuthors(), with: filter = [object Object]',
  level: 'info',
  timestamp: '2020-02-20T10:08:12.495Z'
}
{
  message: '>>>> authorService.getAuthors(), with: filter = [object Object]',
  level: 'info',
  timestamp: '2020-02-20T10:08:24.154Z'
}
{
  message: '>>>> authorService.getAuthors(), with: filter = [object Object]',
  level: 'info',
  timestamp: '2020-02-20T10:08:32.873Z'
}
{
  message: '>>>> authorService.getAuthors(), with: filter = [object Object]',
  level: 'info',
  timestamp: '2020-02-20T10:08:47.123Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-20T10:09:55.979Z'
}
{
  message: '>>> orderService.getOrdersForAdmin(), with filter = [object Object]',
  level: 'info',
  timestamp: '2020-02-20T10:10:00.355Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-20T10:10:21.198Z'
}
{
  message: '>>> orderService.getOrdersForAdmin(), with filter = [object Object]',
  level: 'info',
  timestamp: '2020-02-20T10:10:21.392Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-20T10:11:56.202Z'
}
{
  message: '>>> orderService.getOrdersForAdmin(), with filter = [object Object]',
  level: 'info',
  timestamp: '2020-02-20T10:12:01.975Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-20T10:52:18.653Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-20T10:53:49.301Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-20T10:54:39.787Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-20T10:55:03.263Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-20T10:56:26.711Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-20T11:04:23.778Z'
}
{
  message: '>>>> authService.logIn(), with: model = [object Object]',
  level: 'info',
  timestamp: '2020-02-20T11:05:23.785Z'
}
{
  message: '>>>> authService.logIn(), with: model = [object Object]',
  level: 'info',
  timestamp: '2020-02-20T11:05:30.067Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-20T11:06:38.713Z'
}
{
  message: '>>>> authService.logIn(), with: model = [object Object]',
  level: 'info',
  timestamp: '2020-02-20T11:06:43.366Z'
}
{
  message: '>>>> authService.logIn(), with: model = [object Object]',
  level: 'info',
  timestamp: '2020-02-20T11:07:04.136Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-20T11:07:27.425Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-20T11:08:33.831Z'
}
{
  message: '>>>> authService.logIn(), with: model = [object Object]',
  level: 'info',
  timestamp: '2020-02-20T11:08:34.156Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-20T11:09:11.731Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-20T11:13:36.919Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-20T15:41:19.082Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-20T15:41:59.266Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-20T16:05:02.137Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-20T16:44:47.337Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-20T16:47:37.611Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-20T16:49:34.609Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-20T16:50:09.723Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-20T16:51:20.741Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-20T16:52:17.700Z'
}
{
  message: '>>>> userService.edit(), with: user = [object Object]',
  level: 'info',
  timestamp: '2020-02-20T16:52:17.903Z'
}
{
  message: '>>>> userService.edit(), invalid data = instance additionalProperty "passwordHash" exists in instance when not allowed',
  level: 'error',
  timestamp: '2020-02-20T16:52:17.909Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-20T16:55:29.703Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-20T16:56:03.343Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-20T16:56:16.691Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-20T16:57:52.812Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-20T16:59:18.014Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-20T17:01:36.594Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-20T17:01:51.010Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-21T07:28:55.540Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-21T07:32:40.318Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-21T07:33:31.126Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-21T07:40:08.784Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-21T07:44:33.684Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-21T08:07:59.639Z'
}
{
  message: '>>>> userService.getById(), with user id = [object Object]',
  level: 'info',
  timestamp: '2020-02-21T08:08:09.620Z'
}
{
  message: '>>>> userService.getById(), with user id = [object Object]',
  level: 'info',
  timestamp: '2020-02-21T08:08:32.981Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-21T08:11:57.920Z'
}
{
  message: '>>>> userService.getById(), with user id = [object Object]',
  level: 'info',
  timestamp: '2020-02-21T08:11:59.049Z'
}
{
  message: '>>>> userService.getById(), with user id = [object Object]',
  level: 'info',
  timestamp: '2020-02-21T08:12:12.570Z'
}
{
  message: '>>>> userService.getById(), with user id = [object Object]',
  level: 'info',
  timestamp: '2020-02-21T08:12:35.513Z'
}
{
  message: '>>>> userService.getById(), with user id = [object Object]',
  level: 'info',
  timestamp: '2020-02-21T08:12:57.270Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-21T08:14:10.680Z'
}
{
  message: '>>>> userService.getById(), with user id = [object Object]',
  level: 'info',
  timestamp: '2020-02-21T08:14:11.412Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-21T08:15:34.618Z'
}
{
  message: '>>>> userService.getById(), with user id = [object Object]',
  level: 'info',
  timestamp: '2020-02-21T08:15:40.664Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-21T08:16:39.707Z'
}
{
  message: '>>>> userService.getById(), with user id = [object Object]',
  level: 'info',
  timestamp: '2020-02-21T08:16:43.626Z'
}
{
  message: '>>>> userService.getById(), with user id = [object Object]',
  level: 'info',
  timestamp: '2020-02-21T08:18:21.573Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-21T08:18:33.444Z'
}
{
  message: '>>>> userService.getById(), with user id = [object Object]',
  level: 'info',
  timestamp: '2020-02-21T08:18:33.827Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-21T08:21:50.400Z'
}
{
  message: '>>>> userService.getById(), with user id = [object Object]',
  level: 'info',
  timestamp: '2020-02-21T08:21:50.850Z'
}
{
  message: `>>>> userService.getById(), result = Cast to ObjectId failed for value "{ _id: '5ec19a004abf333fc8a2668' }" at path "_id" for model "User"`,
  level: 'error',
  timestamp: '2020-02-21T08:21:50.854Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-21T08:38:50.712Z'
}
{
  message: '>>>> userService.getById(), with user id = [object Object]',
  level: 'info',
  timestamp: '2020-02-21T08:38:50.793Z'
}
{
  message: '>>>> userService.getById(), invalid data = [object Object]',
  level: 'error',
  timestamp: '2020-02-21T08:38:50.794Z'
}
{
  message: '>>>> userService.getById(), with user id = [object Object]',
  level: 'info',
  timestamp: '2020-02-21T08:39:12.278Z'
}
{
  message: '>>>> userService.remove(), with: user = [object Object]',
  level: 'info',
  timestamp: '2020-02-21T08:39:48.735Z'
}
{
  message: '>>>> authService.logIn(), with: model = [object Object]',
  level: 'info',
  timestamp: '2020-02-21T08:48:28.911Z'
}
{
  message: '>>>> authorService.create(), with: Id = [object Object]',
  level: 'info',
  timestamp: '2020-02-21T08:48:50.391Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-21T08:51:23.434Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-21T08:52:21.404Z'
}
{
  message: '>>>> userService.remove(), with: user = [object Object]',
  level: 'info',
  timestamp: '2020-02-21T08:52:23.604Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-21T08:53:38.645Z'
}
{
  message: '>>>> userService.remove(), with: user = [object Object]',
  level: 'info',
  timestamp: '2020-02-21T08:53:39.062Z'
}
{
  message: '>>>> userService.remove(), with: user = [object Object]',
  level: 'info',
  timestamp: '2020-02-21T08:53:40.549Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-21T08:54:01.693Z'
}
{
  message: '>>>> userService.remove(), with: user = [object Object]',
  level: 'info',
  timestamp: '2020-02-21T08:54:02.340Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-21T08:55:42.130Z'
}
{
  message: '>>>> userService.remove(), with: user = [object Object]',
  level: 'info',
  timestamp: '2020-02-21T08:55:42.204Z'
}
{
  message: '>>>> userService.remove(), with: user = [object Object]',
  level: 'info',
  timestamp: '2020-02-21T08:55:45.228Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-21T08:56:20.394Z'
}
{
  message: '>>>> userService.remove(), with: user = [object Object]',
  level: 'info',
  timestamp: '2020-02-21T08:56:20.482Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-21T08:57:26.371Z'
}
{
  message: '>>>> userService.remove(), with: user = [object Object]',
  level: 'info',
  timestamp: '2020-02-21T08:57:29.103Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-21T09:11:37.730Z'
}
{
  message: '>>>> userService.remove(), with: user = [object Object]',
  level: 'info',
  timestamp: '2020-02-21T09:11:38.025Z'
}
{
  message: '>>>> userService.remove(), with: user = [object Object]',
  level: 'info',
  timestamp: '2020-02-21T09:12:20.494Z'
}
{
  message: '>>>> authService.register(), with: author = [object Object]',
  level: 'info',
  timestamp: '2020-02-21T09:13:56.517Z'
}
{
  message: '>>>> authService.register(), result = undefined',
  level: 'error',
  timestamp: '2020-02-21T09:13:56.625Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-21T09:15:56.822Z'
}
{
  message: '>>>> userService.remove(), with: user = [object Object]',
  level: 'info',
  timestamp: '2020-02-21T09:16:08.941Z'
}
{
  message: '>>>> userService.remove(), with: user = [object Object]',
  level: 'info',
  timestamp: '2020-02-21T09:17:32.401Z'
}
{
  message: '>>>> userService.remove(), with: user = [object Object]',
  level: 'info',
  timestamp: '2020-02-21T09:17:33.831Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-21T09:18:26.111Z'
}
{
  message: '>>>> userService.remove(), with: user = [object Object]',
  level: 'info',
  timestamp: '2020-02-21T09:18:29.029Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-21T09:18:57.630Z'
}
{
  message: '>>>> userService.remove(), with: user = [object Object]',
  level: 'info',
  timestamp: '2020-02-21T09:18:57.677Z'
}
{
  message: '>>>> userService.remove(), with: user = [object Object]',
  level: 'info',
  timestamp: '2020-02-21T09:19:19.165Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-21T09:20:03.027Z'
}
{
  message: '>>>> userService.remove(), with: user = [object Object]',
  level: 'info',
  timestamp: '2020-02-21T09:20:15.964Z'
}
{
  message: '>>>> userService.remove(), with: user = [object Object]',
  level: 'info',
  timestamp: '2020-02-21T09:20:19.721Z'
}
{
  message: '>>>> userService.remove(), invalid data = [object Object]',
  level: 'error',
  timestamp: '2020-02-21T09:20:19.723Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-21T09:21:25.847Z'
}
{
  message: '>>>> userService.remove(), with: user = "[object Object]"',
  level: 'info',
  timestamp: '2020-02-21T09:21:27.862Z'
}
{
  message: '>>>> userService.remove(), invalid data = [object Object]',
  level: 'error',
  timestamp: '2020-02-21T09:21:27.864Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-21T09:22:43.899Z'
}
{
  message: '">>>> userService.remove(), with: user = [object Object]"',
  level: 'info',
  timestamp: '2020-02-21T09:22:44.282Z'
}
{
  message: '>>>> userService.remove(), invalid data = [object Object]',
  level: 'error',
  timestamp: '2020-02-21T09:22:44.284Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-21T09:25:42.197Z'
}
{
  message: '">>>> userService.remove(), with: user = [object Object]"',
  level: 'info',
  timestamp: '2020-02-21T09:25:42.536Z'
}
{
  message: '>>>> userService.remove(), invalid data = [object Object]',
  level: 'error',
  timestamp: '2020-02-21T09:25:42.538Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-21T09:27:49.646Z'
}
{
  message: '>>>> userService.remove(), with: user = false',
  level: 'info',
  timestamp: '2020-02-21T09:27:49.846Z'
}
{
  message: '>>>> userService.remove(), invalid data = [object Object]',
  level: 'error',
  timestamp: '2020-02-21T09:27:49.848Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-21T09:30:13.824Z'
}
{
  message: '>>>> userService.remove(), with: user = false',
  level: 'info',
  timestamp: '2020-02-21T09:30:14.211Z'
}
{
  message: '>>>> userService.remove(), invalid data = [object Object]',
  level: 'error',
  timestamp: '2020-02-21T09:30:14.212Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-21T09:30:35.894Z'
}
{
  message: '>>>> userService.remove(), with: user = false',
  level: 'info',
  timestamp: '2020-02-21T09:30:38.195Z'
}
{
  message: '>>>> userService.remove(), invalid data = function toString() { [native code] }',
  level: 'error',
  timestamp: '2020-02-21T09:30:38.196Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-21T09:33:28.337Z'
}
{
  message: '>>>> userService.remove(), with: user = false',
  level: 'info',
  timestamp: '2020-02-21T09:33:30.925Z'
}
{
  message: '>>>> userService.remove(), invalid data = {"_id":"5e3c19a004abf333f8a2668"}',
  level: 'error',
  timestamp: '2020-02-21T09:33:30.927Z'
}
{
  message: '>>>> userService.remove(), with: user = true',
  level: 'info',
  timestamp: '2020-02-21T09:36:09.641Z'
}
{
  message: '>>>> userService.remove(), with: user = true',
  level: 'info',
  timestamp: '2020-02-21T09:36:19.464Z'
}
{
  message: '>>>> userService.remove(), with: user = true',
  level: 'info',
  timestamp: '2020-02-21T09:36:28.338Z'
}
{
  message: '>>>> userService.remove(), with: user = true',
  level: 'info',
  timestamp: '2020-02-21T09:36:41.970Z'
}
{
  message: '>>>> userService.remove(), with: user = true',
  level: 'info',
  timestamp: '2020-02-21T09:36:51.366Z'
}
{
  message: '>>>> userService.remove(), with: user = true',
  level: 'info',
  timestamp: '2020-02-21T09:37:16.767Z'
}
{
  message: '>>>> userService.remove(), with: user = true',
  level: 'info',
  timestamp: '2020-02-21T09:37:26.743Z'
}
{
  message: '>>>> authService.logIn(), with: model = [object Object]',
  level: 'info',
  timestamp: '2020-02-21T09:46:28.302Z'
}
{
  message: '>>>> authorService.getAuthors(), with: filter = [object Object]',
  level: 'info',
  timestamp: '2020-02-21T09:46:44.626Z'
}
{
  message: '>>>> authorService.getAuthors(), with: filter = [object Object]',
  level: 'info',
  timestamp: '2020-02-21T09:47:04.012Z'
}
{
  message: '>>>> authorService.getAuthors(), with: filter = [object Object]',
  level: 'info',
  timestamp: '2020-02-21T09:47:27.593Z'
}
{
  message: '>>>> authorService.getAuthors(), with: filter = [object Object]',
  level: 'info',
  timestamp: '2020-02-21T09:47:40.012Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-21T09:56:46.801Z'
}
{
  message: '>>>> authService.register(), with: author = {"userName":"params","email":"params@yandex.com","avatar":"C:/Anuitex/avatar","firstName":"reove","lastName":"test","passwordHash":"25012005"}',
  level: 'info',
  timestamp: '2020-02-21T09:58:27.751Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-21T10:00:47.900Z'
}
{
  message: '>>>> authorService.getAuthors(), with: filter = {"searchString":"richter","pageNumber":1,"pageSize":10}',
  level: 'info',
  timestamp: '2020-02-21T10:00:55.693Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-21T10:55:34.477Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-21T10:56:55.672Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-21T11:00:44.866Z'
}
{
  message: '>>>> userService.changePassword(), with user changePasswordParam = {"_id":"5e4ba967c18d4f204cb8ea35","oldPassword":"25012005","newPassword":"29041988"}',
  level: 'info',
  timestamp: '2020-02-21T11:00:47.040Z'
}
{
  message: '>>>> userService.changePassword(), invalid data = {"_id":"5e4ba967c18d4f204cb8ea35","oldPassword":"25012005","newPassword":"29041988"}',
  level: 'error',
  timestamp: '2020-02-21T11:00:47.047Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-21T11:01:41.796Z'
}
{
  message: '>>>> userService.changePassword(), with user changePasswordParam = {"_id":"5e4ba967c18d4f204cb8ea35","oldPassword":"25012005","newPassword":"29041988"}',
  level: 'info',
  timestamp: '2020-02-21T11:01:46.183Z'
}
{
  message: '>>>> authService.logIn(), with: model = {"email":"swagger@gmail.com","passwordHash":"25012005"}',
  level: 'info',
  timestamp: '2020-02-21T11:02:51.172Z'
}
{
  message: '>>>> authService.logIn(), with: model = {"email":"swagger@gmail.com","passwordHash":"29041988"}',
  level: 'info',
  timestamp: '2020-02-21T11:03:02.220Z'
}
{
  message: '>>>> authService.logIn(), result = invalid password',
  level: 'error',
  timestamp: '2020-02-21T11:03:02.309Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-21T11:05:07.660Z'
}
{
  message: '>>>> userService.changePassword(), with user changePasswordParam = {"_id":"5e4ba967c18d4f204cb8ea35","oldPassword":"25012005","newPassword":"29041988"}',
  level: 'info',
  timestamp: '2020-02-21T11:05:08.264Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-21T11:08:40.052Z'
}
{
  message: '>>>> userService.changePassword(), with user changePasswordParam = {"_id":"5e4ba967c18d4f204cb8ea35","oldPassword":"25012005","newPassword":"29041988"}',
  level: 'info',
  timestamp: '2020-02-21T11:08:43.263Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-21T11:10:20.110Z'
}
{
  message: '>>>> userService.changePassword(), with user changePasswordParam = {"_id":"5e4ba967c18d4f204cb8ea35","oldPassword":"25012005","newPassword":"29041988"}',
  level: 'info',
  timestamp: '2020-02-21T11:10:20.587Z'
}
{
  message: '>>>> userService.remove(), with: user id = {"_id":"5e4ba967c18d4f204cb8ea35"}',
  level: 'info',
  timestamp: '2020-02-21T11:11:20.861Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-21T11:12:05.802Z'
}
{
  message: '>>>> userService.remove(), with: user id = {"_id":"5e4ba967c18d4f204cb8ea35"}',
  level: 'info',
  timestamp: '2020-02-21T11:12:14.237Z'
}
{
  message: '>>>> userService.remove(), with: user id = {"_id":"5e4ba967c18d4f204cb8ea35"}',
  level: 'info',
  timestamp: '2020-02-21T11:13:23.505Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-21T11:13:40.219Z'
}
{
  message: '>>>> userService.changePassword(), with user changePasswordParam = {"_id":"5e4ba967c18d4f204cb8ea35","oldPassword":"25012005","newPassword":"29041988"}',
  level: 'info',
  timestamp: '2020-02-21T11:13:40.291Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-21T11:14:23.719Z'
}
{
  message: '>>>> userService.changePassword(), with user changePasswordParam = {"_id":"5e4ba967c18d4f204cb8ea35","oldPassword":"25012005","newPassword":"29041988"}',
  level: 'info',
  timestamp: '2020-02-21T11:14:24.102Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-21T11:14:52.636Z'
}
{
  message: '>>>> userService.changePassword(), with user changePasswordParam = {"_id":"5e4ba967c18d4f204cb8ea35","oldPassword":"25012005","newPassword":"29041988"}',
  level: 'info',
  timestamp: '2020-02-21T11:14:53.570Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-21T11:17:07.625Z'
}
{
  message: '>>>> userService.changePassword(), with user changePasswordParam = {"_id":"5e4ba967c18d4f204cb8ea35","oldPassword":"25012005","newPassword":"29041988"}',
  level: 'info',
  timestamp: '2020-02-21T11:17:08.005Z'
}
{
  message: '>>>> authService.logIn(), with: model = {"email":"swagger@gmail.com","passwordHash":"29041988"}',
  level: 'info',
  timestamp: '2020-02-21T11:18:09.550Z'
}
{
  message: '>>>> authService.logIn(), result = invalid password',
  level: 'error',
  timestamp: '2020-02-21T11:18:09.634Z'
}
{
  message: '>>>> authService.logIn(), with: model = {"email":"swagger@gmail.com","passwordHash":"25012005"}',
  level: 'info',
  timestamp: '2020-02-21T11:18:17.070Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-21T11:18:48.522Z'
}
{
  message: '>>>> userService.changePassword(), with user changePasswordParam = {"_id":"5e4ba967c18d4f204cb8ea35","oldPassword":"25012005","newPassword":"29041988"}',
  level: 'info',
  timestamp: '2020-02-21T11:18:48.867Z'
}
{
  message: '>>>> authService.logIn(), with: model = {"email":"swagger@gmail.com","passwordHash":"25012005"}',
  level: 'info',
  timestamp: '2020-02-21T11:19:08.500Z'
}
{
  message: '>>>> authService.logIn(), result = invalid password',
  level: 'error',
  timestamp: '2020-02-21T11:19:08.581Z'
}
{
  message: '>>>> authService.logIn(), with: model = {"email":"swagger@gmail.com","passwordHash":"29041988"}',
  level: 'info',
  timestamp: '2020-02-21T11:19:12.507Z'
}
{
  message: '>>>> userService.changePassword(), with user changePasswordParam = {"_id":"5e4ba967c18d4f204cb8ea35","oldPassword":"25012005","newPassword":"29041988"}',
  level: 'info',
  timestamp: '2020-02-21T11:19:36.618Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-21T11:20:11.761Z'
}
{
  message: '>>>> userService.changePassword(), with user changePasswordParam = {"_id":"5e4ba967c18d4f204cb8ea35","oldPassword":"25012005","newPassword":"29041988"}',
  level: 'info',
  timestamp: '2020-02-21T11:20:14.306Z'
}
{
  message: '>>>> userService.changePassword(), result = invalid password',
  level: 'error',
  timestamp: '2020-02-21T11:20:14.400Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-21T11:26:19.967Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-21T11:33:36.853Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-21T11:34:14.142Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-21T11:38:01.410Z'
}
{
  message: '>>>> userService.getById(), with user id = {}',
  level: 'info',
  timestamp: '2020-02-21T11:38:33.638Z'
}
{
  message: '>>>> userService.getById(), invalid data = {}',
  level: 'error',
  timestamp: '2020-02-21T11:38:33.640Z'
}
{
  message: '>>>> userService.getById(), with user id = {}',
  level: 'info',
  timestamp: '2020-02-21T11:39:12.054Z'
}
{
  message: '>>>> userService.getById(), invalid data = {}',
  level: 'error',
  timestamp: '2020-02-21T11:39:12.056Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-21T11:40:40.437Z'
}
{
  message: '>>>> userService.getById(), with user id = {}',
  level: 'info',
  timestamp: '2020-02-21T11:41:09.082Z'
}
{
  message: '>>>> userService.getById(), invalid data = {}',
  level: 'error',
  timestamp: '2020-02-21T11:41:09.091Z'
}
{
  message: '>>>> userService.getById(), with user id = {"_id":"5e4ba967c18d4f204cb8ea35"}',
  level: 'info',
  timestamp: '2020-02-21T11:41:44.227Z'
}
{
  message: '>>>> userService.getById(), with user id = {}',
  level: 'info',
  timestamp: '2020-02-21T11:42:04.392Z'
}
{
  message: '>>>> userService.getById(), invalid data = {}',
  level: 'error',
  timestamp: '2020-02-21T11:42:04.396Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-21T11:42:41.668Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-21T11:43:31.636Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-21T11:44:45.053Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-21T11:45:29.423Z'
}
{
  message: '>>>> userService.getById(), with user id = {}',
  level: 'info',
  timestamp: '2020-02-21T11:45:47.858Z'
}
{
  message: '>>>> userService.getById(), invalid data = {}',
  level: 'error',
  timestamp: '2020-02-21T11:45:47.860Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-21T11:47:11.979Z'
}
{
  message: '>>>> userService.getById(), with user id = {"_id":"5e4ba967c18d4f204cb8ea35"}',
  level: 'info',
  timestamp: '2020-02-21T11:48:05.420Z'
}
{
  message: '>>>> userService.getById(), with user id = {}',
  level: 'info',
  timestamp: '2020-02-21T11:48:17.112Z'
}
{
  message: '>>>> userService.getById(), invalid data = {}',
  level: 'error',
  timestamp: '2020-02-21T11:48:17.118Z'
}
{
  message: '>>>> userService.getById(), with user id = {"_id":"5e4ba967c18d4f204cb8ea35"}',
  level: 'info',
  timestamp: '2020-02-21T11:51:23.063Z'
}
{
  message: '>>>> userService.getById(), with user id = {}',
  level: 'info',
  timestamp: '2020-02-21T11:51:34.245Z'
}
{
  message: '>>>> userService.getById(), invalid data = {}',
  level: 'error',
  timestamp: '2020-02-21T11:51:34.254Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-21T12:40:44.425Z'
}
{
  message: '>>>> userService.getById(), with user id = {"_id":"5e4ba967c18d4f204cb8ea35"}',
  level: 'info',
  timestamp: '2020-02-21T12:41:38.744Z'
}
{
  message: '>>>> userService.getById(), with user id = {"_id":"5e4651df6e62e11f4889ac9d"}',
  level: 'info',
  timestamp: '2020-02-21T12:41:58.532Z'
}
{
  message: '>>>> userService.remove(), with: user id = {"_id":"5e4651df6e62e11f4889ac9d"}',
  level: 'info',
  timestamp: '2020-02-21T12:42:09.906Z'
}
{
  message: '>>>> userService.remove(), with: user id = {"_id":"5e4651df6e62e11f4889ac9d"}',
  level: 'info',
  timestamp: '2020-02-21T12:42:16.391Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-21T15:56:45.978Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-21T15:57:37.640Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-21T16:03:19.454Z'
}
{
  message: '>>>> printingEditionService.create(), with: printingEditionParam = {"title":"The Night of the","description":"History and fate collide as the Nazis rise to power in The Night in Lisbon, a classic tale of survival from the renowned author of All Quiet on the Western Front.","cover_image":"https://www.uphe.com/sites/default/files/2015/04/All-Quiet-on-the-Western-Front-Gallery-1.jpg","type":0,"price":150,"author_ids":[{"_id":"5e4692843577602830c4c5dc"},{"_id":"5e4d09f63696501a00e2b31a"}]}',
  level: 'info',
  timestamp: '2020-02-21T16:04:00.757Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-21T16:04:34.645Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-24T08:50:44.699Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-24T08:52:46.579Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-24T08:53:00.798Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-24T08:53:38.497Z'
}
{
  message: '>>>> authorService.update(), with: author = {"name":"Roger Joseph Zelazny","_id":"5e4d0a553696501a00e2b31b"}',
  level: 'info',
  timestamp: '2020-02-24T08:53:44.926Z'
}
{
  message: '>>>> authorService.update(), with: author = {"name":"Jason Krol","_id":"5e4bc6f7ff84370d80484184"}',
  level: 'info',
  timestamp: '2020-02-24T08:54:28.690Z'
}
{
  message: '>>>> authorService.update(), result = false',
  level: 'error',
  timestamp: '2020-02-24T08:54:28.695Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-24T08:55:45.998Z'
}
{
  message: '>>>> authorService.update(), with: author = {"name":"Jason Krol","_id":"5e4bc6f7ff84370d80484184"}',
  level: 'info',
  timestamp: '2020-02-24T08:55:46.158Z'
}
{
  message: '>>>> authorService.update(), result = false',
  level: 'error',
  timestamp: '2020-02-24T08:55:46.172Z'
}
{
  message: '>>>> authorService.update(), with: author = {"name":"Jason Krl","_id":"5e4bc6f7ff84370d80484184"}',
  level: 'info',
  timestamp: '2020-02-24T08:56:13.313Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-24T08:56:29.168Z'
}
{
  message: '>>>> authorService.update(), with: author = {"name":"Jason Krol","_id":"5e4bc6f7ff84370d80484184"}',
  level: 'info',
  timestamp: '2020-02-24T08:56:50.464Z'
}
{
  message: '>>>> authorService.create(), with: author = {"name":"Philip K. Dick"}',
  level: 'info',
  timestamp: '2020-02-24T08:57:58.341Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-24T08:58:53.822Z'
}
{
  message: '>>>> authorService.create(), with: author = {"name":"Philip K. Dick"}',
  level: 'info',
  timestamp: '2020-02-24T08:58:54.081Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-24T08:59:43.404Z'
}
{
  message: '>>>> authorService.create(), with: author = {"name":"Philip K. Dick"}',
  level: 'info',
  timestamp: '2020-02-24T09:02:51.535Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-24T09:12:32.379Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-24T09:13:01.551Z'
}
{
  message: '>>>> authorService.create(), with: author = {"name":"Philip K. Dick"}',
  level: 'info',
  timestamp: '2020-02-24T09:13:02.851Z'
}
{
  message: '>>>> authorService.create(), with: author = {"name":"Philip K. Dick"}',
  level: 'info',
  timestamp: '2020-02-24T09:13:04.293Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-24T09:13:34.694Z'
}
{
  message: '>>>> authorService.create(), with: author = {"name":"Philip K. Dick"}',
  level: 'info',
  timestamp: '2020-02-24T09:23:36.877Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-24T09:24:19.140Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-24T09:25:00.940Z'
}
{
  message: '>>>> authorService.create(), with: author = {"name":"Robert Sheckley"}',
  level: 'info',
  timestamp: '2020-02-24T09:25:46.909Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-24T09:26:17.754Z'
}
{
  message: '>>>> authorService.create(), with: author = {"name":"Robert Sheckley"}',
  level: 'info',
  timestamp: '2020-02-24T09:26:17.811Z'
}
{
  message: '>>>> authorService.create(), with: author = {"name":"Some author"}',
  level: 'info',
  timestamp: '2020-02-24T09:27:28.135Z'
}
{
  message: '>>>> authorService.create(), with: author = {"name":"Robert Sheckly"}',
  level: 'info',
  timestamp: '2020-02-24T09:29:20.858Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-24T09:30:34.597Z'
}
{
  message: '>>>> authService.register(), with: author = {"userName":"SomesUser","email":"User@Yandex.ru","avatar":"C:/","firstName":"Somes","lastName":"User","passwordHash":"25012005"}',
  level: 'info',
  timestamp: '2020-02-24T09:31:38.106Z'
}
{
  message: '>>>> authService.register(), invalid data = instance.avatar does not meet minimum length of 4',
  level: 'error',
  timestamp: '2020-02-24T09:31:38.108Z'
}
{
  message: '>>>> authService.register(), with: author = {"userName":"SomesUser","email":"User@Yandex.ru","avatar":"C:/assets","firstName":"Somes","lastName":"User","passwordHash":"25012005"}',
  level: 'info',
  timestamp: '2020-02-24T09:31:54.444Z'
}
{
  message: '>>>> authorService.create(), with: author = {"name":"Robert Shecklyr"}',
  level: 'info',
  timestamp: '2020-02-24T09:33:04.255Z'
}
{
  message: '>>>> authorService.update(), with: author = {"name":"Terry Pratchet","_id":"5e3d1c71c818e21204ac2b8b"}',
  level: 'info',
  timestamp: '2020-02-24T09:33:41.034Z'
}
{
  message: '>>>> authorService.create(), with: author = {"name":"Robert "}',
  level: 'info',
  timestamp: '2020-02-24T09:34:33.838Z'
}
{
  message: '>>>> userService.getById(), with user id = {}',
  level: 'info',
  timestamp: '2020-02-24T09:36:37.818Z'
}
{
  message: '>>>> userService.getById(), invalid data = {}',
  level: 'error',
  timestamp: '2020-02-24T09:36:37.827Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-24T13:19:31.493Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-24T13:50:05.599Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-24T13:53:31.440Z'
}
{
  message: '>>>> authorService.create(), with: author = {"name":"tiofxdbzf","stock":0,"price":0}',
  level: 'info',
  timestamp: '2020-02-24T13:53:43.637Z'
}
{
  message: '>>>> authorService.create(), invalid data = instance additionalProperty "stock" exists in instance when not allowed,instance additionalProperty "price" exists in instance when not allowed',
  level: 'error',
  timestamp: '2020-02-24T13:53:43.640Z'
}
{
  message: '>>>> authorService.create(), with: author = {"name":"yuipo","stock":0,"price":0}',
  level: 'info',
  timestamp: '2020-02-24T13:54:00.461Z'
}
{
  message: '>>>> authorService.create(), invalid data = instance additionalProperty "stock" exists in instance when not allowed,instance additionalProperty "price" exists in instance when not allowed',
  level: 'error',
  timestamp: '2020-02-24T13:54:00.463Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-24T13:55:30.657Z'
}
{
  message: '>>>> authorService.create(), with: author = {"stock":0,"price":0,"name":"fdsghdf"}',
  level: 'info',
  timestamp: '2020-02-24T13:55:55.425Z'
}
{
  message: '>>>> authorService.create(), invalid data = instance additionalProperty "stock" exists in instance when not allowed,instance additionalProperty "price" exists in instance when not allowed',
  level: 'error',
  timestamp: '2020-02-24T13:55:55.438Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-24T14:48:21.434Z'
}
{
  message: '>>>> authorService.create(), with: author = {"name":"Goncharuk Vladimir"}',
  level: 'info',
  timestamp: '2020-02-24T14:48:39.405Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-24T14:53:07.450Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-25T10:44:52.956Z'
}
{
  message: '>>>> authorService.create(), with: author = {"name":"Goncharuk Vladimir","stock":"sd","price":"dfgh"}',
  level: 'info',
  timestamp: '2020-02-25T11:03:35.268Z'
}
{
  message: '>>>> authorService.create(), invalid data = instance additionalProperty "stock" exists in instance when not allowed,instance additionalProperty "price" exists in instance when not allowed',
  level: 'error',
  timestamp: '2020-02-25T11:03:35.308Z'
}
{
  message: '>>>> authorService.create(), with: author = {"userName":"HokkeyMan","firstName":"Gordie ","lastName":"yuk "}',
  level: 'info',
  timestamp: '2020-02-25T11:04:48.542Z'
}
{
  message: '>>>> authorService.create(), invalid data = instance additionalProperty "userName" exists in instance when not allowed,instance additionalProperty "firstName" exists in instance when not allowed,instance additionalProperty "lastName" exists in instance when not allowed,instance requires property "name"',
  level: 'error',
  timestamp: '2020-02-25T11:04:48.552Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-25T11:06:02.378Z'
}
{
  message: '>>>> authorService.create(), with: author = {"userName":"dgfh","firstName":"dfgh","lastName":"fsdgh"}',
  level: 'info',
  timestamp: '2020-02-25T11:06:32.375Z'
}
{
  message: '>>>> authorService.create(), invalid data = instance additionalProperty "userName" exists in instance when not allowed,instance additionalProperty "firstName" exists in instance when not allowed,instance additionalProperty "lastName" exists in instance when not allowed,instance requires property "name"',
  level: 'error',
  timestamp: '2020-02-25T11:06:32.378Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-25T11:09:49.667Z'
}
{
  message: '>>>> authorService.create(), with: author = {"userName":"HokkeyMan","firstName":"Gordie ","lastName":"yuk","email":"paderborner2019@gmail.com","password":"25012005"}',
  level: 'info',
  timestamp: '2020-02-25T11:10:26.115Z'
}
{
  message: '>>>> authorService.create(), invalid data = instance additionalProperty "userName" exists in instance when not allowed,instance additionalProperty "firstName" exists in instance when not allowed,instance additionalProperty "lastName" exists in instance when not allowed,instance additionalProperty "email" exists in instance when not allowed,instance additionalProperty "password" exists in instance when not allowed,instance requires property "name"',
  level: 'error',
  timestamp: '2020-02-25T11:10:26.118Z'
}
{
  message: '>>>> authService.register(), with: author = {"userName":"HokkeyMan","firstName":"Gordie ","lastName":"yuk","email":"paderborner2019@gmail.com","password":"25012005"}',
  level: 'info',
  timestamp: '2020-02-25T11:13:36.227Z'
}
{
  message: '>>>> authService.register(), invalid data = instance.lastName does not meet minimum length of 4,instance additionalProperty "password" exists in instance when not allowed,instance requires property "passwordHash"',
  level: 'error',
  timestamp: '2020-02-25T11:13:36.229Z'
}
{
  message: '>>>> authService.register(), with: author = {"userName":"HokkeyMan","firstName":"Gordie ","lastName":"Goncharuk","email":"paderborner2019@gmail.com","password":"25012005"}',
  level: 'info',
  timestamp: '2020-02-25T11:14:04.767Z'
}
{
  message: '>>>> authService.register(), invalid data = instance additionalProperty "password" exists in instance when not allowed,instance requires property "passwordHash"',
  level: 'error',
  timestamp: '2020-02-25T11:14:04.769Z'
}
{
  message: '>>>> authService.register(), with: author = {"userName":"HokkeyMan","firstName":"Gordie ","lastName":"Goncharuk","email":"paderborner2019@gmail.com","passwordHash":"25012005"}',
  level: 'info',
  timestamp: '2020-02-25T11:16:15.718Z'
}
{
  message: '>>>> authService.register(), with: author = {"userName":"HokkeyMan","firstName":"asd"}',
  level: 'info',
  timestamp: '2020-02-25T12:01:32.503Z'
}
{
  message: '>>>> authService.register(), invalid data = instance.firstName does not meet minimum length of 4,instance requires property "email",instance requires property "lastName",instance requires property "passwordHash"',
  level: 'error',
  timestamp: '2020-02-25T12:01:32.513Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-26T12:20:03.983Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-26T12:20:48.770Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-26T12:22:25.220Z'
}
{
  message: '>>>> printingEditionService.create(), with: printingEditionParam = {"title":"The Colour of Magic","description":"dasfgvds","cover_image":"strdsddsing","type":0,"price":0,"currency":"USD","author_ids":"5e3d1c71c818e21204ac2b8b"}',
  level: 'info',
  timestamp: '2020-02-26T12:22:28.726Z'
}
{
  message: '>>>> printingEditionService.create(), with: printingEditionParam = {"title":"The Colour of Magic","description":"dasfgvds","cover_image":"strdsddsing","type":0,"price":0,"currency":"USD","author_ids":"5e3d1c71c818e21204ac2b8b"}',
  level: 'info',
  timestamp: '2020-02-26T12:23:00.261Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-26T12:23:45.059Z'
}
{
  message: '>>>> printingEditionService.create(), with: printingEditionParam = {"title":"The Colour of Magic","description":"dasfgvds","cover_image":"strdsddsing","type":0,"price":0,"currency":"USD","author_ids":"5e3d1c71c818e21204ac2b8b"}',
  level: 'info',
  timestamp: '2020-02-26T12:23:48.925Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-26T12:26:25.445Z'
}
{
  message: '>>>> authService.register(), with: user = {"userName":"kjnkld","email":"sister@gmail.com","avatar":"dsa","firstName":"asdfdas","lastName":"adsf","passwordHash":"25012005"}',
  level: 'info',
  timestamp: '2020-02-26T12:27:09.837Z'
}
{
  message: '>>>> authService.register(), invalid data = instance.avatar does not meet minimum length of 4',
  level: 'error',
  timestamp: '2020-02-26T12:27:09.839Z'
}
{
  message: '>>>> authService.register(), with: user = {"userName":"kjnkld","email":"sister@gmail.com","avatar":"dssadfa","firstName":"asdfdas","lastName":"adsf","passwordHash":"25012005"}',
  level: 'info',
  timestamp: '2020-02-26T12:27:18.913Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-26T12:27:57.113Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-26T12:29:36.872Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-26T12:30:01.200Z'
}
{
  message: '>>>> authService.register(), with: user = {"userName":"kjnkld","email":"sister@gmail.com","avatar":"dssadfa","firstName":"asdfdas","lastName":"adsf","passwordHash":"25012005"}',
  level: 'info',
  timestamp: '2020-02-26T12:30:04.682Z'
}
{
  message: '>>>> authService.register(), with: user = {"userName":"kjnkld","email":"sister@gmail.com","avatar":"dssadfa","firstName":"asdfdas","lastName":"adsf","passwordHash":"25012005"}',
  level: 'info',
  timestamp: '2020-02-26T12:33:39.309Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-26T12:35:54.133Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-26T12:36:03.100Z'
}
{
  message: '>>>> authService.logIn(), with: model = {"email":"morgenshtern1988@gmail.com","passwordHash":"25012005"}',
  level: 'info',
  timestamp: '2020-02-26T15:26:57.155Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-26T15:28:13.789Z'
}
{
  message: '>>>> authService.logIn(), with: model = {"email":"morgenshtern1988@gmail.com","passwordHash":"25012005"}',
  level: 'info',
  timestamp: '2020-02-26T15:28:34.090Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-27T14:39:34.613Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-27T14:41:23.608Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-27T14:49:43.013Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-27T14:49:58.214Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-28T09:23:24.093Z'
}
{
  message: '>>>> authService.register(), with: user = {"userName":"testEmail","email":"paderborner2019@gmail.com","avatar":"C/:assets/fot.png","firstName":"test","lastName":"email","passwordHash":"25012005"}',
  level: 'info',
  timestamp: '2020-02-28T09:24:38.109Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-28T09:37:01.837Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-28T09:46:01.366Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-28T09:47:55.826Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-28T09:52:49.978Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-28T09:57:30.710Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-28T09:58:08.467Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-28T10:02:11.861Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-28T10:03:49.479Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-28T10:04:21.367Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-28T10:04:35.751Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-28T10:16:05.657Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-28T10:16:30.539Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-28T10:18:41.047Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-28T10:18:52.925Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-28T10:19:44.363Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-28T10:21:30.089Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-28T10:21:54.440Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-28T10:22:19.408Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-28T10:24:42.043Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-28T10:25:50.676Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-28T10:26:32.357Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-28T10:27:04.636Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-28T10:28:34.136Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-28T10:29:30.202Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-28T10:29:37.945Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-28T10:31:58.130Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-28T10:32:20.260Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-28T10:33:19.078Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-28T10:40:24.247Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-28T10:41:02.428Z'
}
{
  message: '>>>> authService.confirmEmail(), error = email [object Object] has not been assigned to any user ',
  level: 'error',
  timestamp: '2020-02-28T10:41:42.386Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-28T10:42:24.464Z'
}
{
  message: '>>>> authService.confirmEmail(), error = email [object Object] has not been assigned to any user ',
  level: 'error',
  timestamp: '2020-02-28T10:42:25.415Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-28T10:43:01.786Z'
}
{
  message: '>>>> authService.confirmEmail(), error = email {"email":"paderorner2019@gmail.com"} has not been assigned to any user ',
  level: 'error',
  timestamp: '2020-02-28T10:43:08.668Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-28T10:43:55.787Z'
}
{
  message: '>>>> authService.confirmEmail(), error  {"email":"paderorner2019@gmail.com"} has not been assigned to any user ',
  level: 'error',
  timestamp: '2020-02-28T10:43:56.676Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-28T10:46:23.524Z'
}
{
  message: '>>>> authorService.getAuthors(), with: filter = {"pageNumber":1,"pageSize":5}',
  level: 'info',
  timestamp: '2020-02-28T10:46:41.411Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-28T11:03:11.993Z'
}
{
  message: '>>>> authorService.create(), with: author = {"email":"swagger@gmail.com","passwordHash":"29041988"}',
  level: 'info',
  timestamp: '2020-02-28T11:03:26.640Z'
}
{
  message: '>>>> authorService.create(), invalid data = instance additionalProperty "email" exists in instance when not allowed,instance additionalProperty "passwordHash" exists in instance when not allowed,instance requires property "name"',
  level: 'error',
  timestamp: '2020-02-28T11:03:26.641Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-28T11:04:39.248Z'
}
{
  message: '>>>> authorService.create(), with: author = {"name":"someAuthor","product_ids":"5e4ceab1c4321b25fc7d58b1"}',
  level: 'info',
  timestamp: '2020-02-28T11:05:43.022Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-28T11:07:03.958Z'
}
{
  message: '>>>> authorService.getAuthors(), with: filter = {"pageNumber":1,"pageSize":5}',
  level: 'info',
  timestamp: '2020-02-28T11:07:06.136Z'
}
{
  message: '>>>> authorService.getAuthors(), with: filter = {"pageNumber":2,"pageSize":20}',
  level: 'info',
  timestamp: '2020-02-28T11:07:25.475Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-28T11:09:46.376Z'
}
{
  message: '>>>> authorService.getAuthors(), with: filter = {"pageNumber":2,"pageSize":20}',
  level: 'info',
  timestamp: '2020-02-28T11:09:47.185Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-28T11:15:43.261Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-28T11:16:41.502Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-28T11:20:08.964Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-28T11:25:22.382Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-28T11:26:02.879Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-28T11:31:10.001Z'
}
{
  message: '>>>> printingEditionService.create(), with: printingEditionParam = {"_id":"testBook","title":"test","description":"book","cover_image":"stridfdng","type":0,"price":2309,"currency":"USD","author_ids":"5e5396b94434eb347cdf6219"}',
  level: 'info',
  timestamp: '2020-02-28T11:32:23.168Z'
}
{
  message: '>>>> printingEditionService.create(), with: printingEditionParam = {"title":"test","description":"book","cover_image":"stridfdng","type":0,"price":2309,"currency":"USD","author_ids":"5e5396b94434eb347cdf6219"}',
  level: 'info',
  timestamp: '2020-02-28T11:32:37.158Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-28T12:21:46.275Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-28T12:22:01.928Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-28T12:23:02.262Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-28T12:23:12.608Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-28T12:23:27.400Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-28T12:26:12.202Z'
}
{
  message: '>>>> printingEditionService.create(), with: printingEditionParam = {"title":"Some","description":"dsgfdsg","cover_image":"sdgagsfg","type":0,"price":2345,"currency":"USD","author_ids":"5e4554bdb7f6f522dc3156a0"}',
  level: 'info',
  timestamp: '2020-02-28T12:27:02.313Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-28T12:29:20.807Z'
}
{
  message: '>>>> printingEditionService.create(), with: printingEditionParam = {"title":"Some","description":"dsgfdsg","cover_image":"sdgagsfg","type":0,"price":2345,"currency":"USD","author_ids":"5e4554bdb7f6f522dc3156a0"}',
  level: 'info',
  timestamp: '2020-02-28T12:29:22.446Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-28T12:30:14.913Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-28T12:34:12.233Z'
}
{
  message: '>>>> printingEditionService.create(), with: printingEditionParam = {"title":"Some","description":"dsgfdsg","cover_image":"sdgagsfg","type":0,"price":2345,"currency":"USD","author_ids":"5e4554bdb7f6f522dc3156a0"}',
  level: 'info',
  timestamp: '2020-02-28T12:34:16.738Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-28T12:34:51.312Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-28T12:35:00.890Z'
}
{
  message: '>>>> printingEditionService.create(), with: printingEditionParam = {"title":"Some","description":"dsgfdsg","cover_image":"sdgagsfg","type":0,"price":2345,"currency":"USD","author_ids":"5e4554bdb7f6f522dc3156a0"}',
  level: 'info',
  timestamp: '2020-02-28T12:35:00.956Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-28T12:38:05.758Z'
}
{
  message: '>>>> printingEditionService.create(), with: printingEditionParam = {"title":"Some","description":"dsgfdsg","cover_image":"sdgagsfg","type":0,"price":2345,"currency":"USD","author_ids":"5e4554bdb7f6f522dc3156a0"}',
  level: 'info',
  timestamp: '2020-02-28T12:38:06.432Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-28T12:40:11.995Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-28T12:41:23.466Z'
}
{
  message: '>>>> printingEditionService.create(), with: printingEditionParam = {"title":"Some","description":"dsgfdsg","cover_image":"sdgagsfg","type":0,"price":2345,"currency":"USD","author_ids":"5e4554bdb7f6f522dc3156a0"}',
  level: 'info',
  timestamp: '2020-02-28T12:41:23.497Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-28T12:42:27.708Z'
}
{
  message: '>>>> printingEditionService.create(), with: printingEditionParam = {"title":"Some","description":"dsgfdsg","cover_image":"sdgagsfg","type":0,"price":2345,"currency":"USD","author_ids":"5e4554bdb7f6f522dc3156a0"}',
  level: 'info',
  timestamp: '2020-02-28T12:42:27.796Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-28T12:48:32.861Z'
}
{
  message: '>>>> printingEditionService.create(), with: printingEditionParam = {"title":"Some","description":"dsgfdsg","cover_image":"sdgagsfg","type":0,"price":2345,"currency":"USD","author_ids":"5e4554bdb7f6f522dc3156a0"}',
  level: 'info',
  timestamp: '2020-02-28T12:48:40.417Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-28T12:49:20.071Z'
}
{
  message: '>>>> printingEditionService.create(), with: printingEditionParam = {"title":"Some","description":"dsgfdsg","cover_image":"sdgagsfg","type":0,"price":2345,"currency":"USD","author_ids":"5e4554bdb7f6f522dc3156a0"}',
  level: 'info',
  timestamp: '2020-02-28T12:49:20.223Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-28T12:52:47.466Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-28T12:52:58.186Z'
}
{
  message: '>>>> printingEditionService.create(), with: printingEditionParam = {"title":"Some","description":"dsgfdsg","cover_image":"sdgagsfg","type":0,"price":2345,"currency":"USD","author_ids":"5e4554bdb7f6f522dc3156a0"}',
  level: 'info',
  timestamp: '2020-02-28T12:53:00.767Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-28T12:55:33.081Z'
}
{
  message: '>>>> printingEditionService.create(), with: printingEditionParam = {"title":"Some","description":"dsgfdsg","cover_image":"sdgagsfg","type":0,"price":2345,"currency":"USD","author_ids":"5e4554bdb7f6f522dc3156a0"}',
  level: 'info',
  timestamp: '2020-02-28T12:55:35.303Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-28T12:56:07.354Z'
}
{
  message: '>>>> printingEditionService.create(), with: printingEditionParam = {"title":"Some","description":"dsgfdsg","cover_image":"sdgagsfg","type":0,"price":2345,"currency":"USD","author_ids":"5e4554bdb7f6f522dc3156a0"}',
  level: 'info',
  timestamp: '2020-02-28T12:56:07.484Z'
}
{
  message: '>>>> printingEditionService.create(), with: printingEditionParam = {"title":"Some","description":"dsgfdsg","cover_image":"sdgagsfg","type":0,"price":2345,"currency":"USD","author_ids":[{"_id":"5e4554bdb7f6f522dc3156a0"}]}',
  level: 'info',
  timestamp: '2020-02-28T12:58:27.290Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-28T12:59:40.371Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-28T13:00:22.984Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-28T13:00:30.199Z'
}
{
  message: '>>>> printingEditionService.create(), with: printingEditionParam = {"title":"Some","description":"dsgfdsg","cover_image":"sdgagsfg","type":0,"price":2345,"currency":"USD","author_ids":[{"_id":"5e4554bdb7f6f522dc3156a0"}]}',
  level: 'info',
  timestamp: '2020-02-28T13:00:31.149Z'
}
{
  message: '>>>> authorService.getAuthors(), with: filter = {"searchString":"a","pageNumber":1,"pageSize":10}',
  level: 'info',
  timestamp: '2020-02-28T13:02:17.905Z'
}
{
  message: '>>>> authorService.getAuthors(), with: filter = {"pageNumber":1,"pageSize":10}',
  level: 'info',
  timestamp: '2020-02-28T13:02:53.547Z'
}
{
  message: '>>>> authorService.getAuthors(), with: filter = {"pageNumber":2,"pageSize":10}',
  level: 'info',
  timestamp: '2020-02-28T13:04:01.761Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-28T13:14:23.017Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-28T13:20:18.643Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-28T13:21:39.413Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-28T13:23:31.532Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-28T13:24:13.200Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-28T13:26:56.992Z'
}
{
  message: '>>>> authorService.getAuthors(), with: filter = {"searchString":"Robert Sheckley","pageNumber":2,"pageSize":10}',
  level: 'info',
  timestamp: '2020-02-28T13:27:38.587Z'
}
{
  message: '>>>> authorService.getAuthors(), with: filter = {"searchString":"Robert Sheckley","pageNumber":1,"pageSize":10}',
  level: 'info',
  timestamp: '2020-02-28T13:27:47.198Z'
}
{
  message: '>>>> printingEditionService.update(), with: printingEdition = {"title":"Some","description":"dsgfdsg","cover_image":"sdgagsfg","type":0,"price":2345,"currency":"USD","author_ids":[{"_id":"5e4554bdb7f6f522dc3156a0"},{"_id":"5e5396b94434eb347cdf6219"}]}',
  level: 'info',
  timestamp: '2020-02-28T13:28:38.049Z'
}
{
  message: '>>>> printingEditionService.update(), invalid data = instance.author_ids is not of a type(s) string',
  level: 'error',
  timestamp: '2020-02-28T13:28:38.051Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-28T13:29:47.845Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-28T13:30:21.900Z'
}
{
  message: '>>>> printingEditionService.update(), with: printingEdition = {"title":"Some","description":"dsgfdsg","cover_image":"sdgagsfg","type":0,"price":2345,"currency":"USD","author_ids":[{"_id":"5e4554bdb7f6f522dc3156a0"},{"_id":"5e5396b94434eb347cdf6219"}]}',
  level: 'info',
  timestamp: '2020-02-28T13:30:24.571Z'
}
{
  message: '>>>> authorService.getAuthors(), with: filter = {"searchString":"Robert Sheckley","pageNumber":1,"pageSize":10}',
  level: 'info',
  timestamp: '2020-02-28T13:30:32.939Z'
}
{
  message: '>>>> authorService.getAuthors(), with: filter = {"searchString":"Robert Sheckley","pageNumber":1,"pageSize":10}',
  level: 'info',
  timestamp: '2020-02-28T13:30:35.208Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-28T13:33:23.332Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-28T13:44:52.149Z'
}
{
  message: '>>>> printingEditionService.update(), with: printingEdition = {"title":"Some","description":"dsgfdsg","cover_image":"sdgagsfg","type":0,"price":2345,"currency":"USD","author_ids":[{"_id":"5e4554bdb7f6f522dc3156a0"},{"_id":"5e5396b94434eb347cdf6219"}]}',
  level: 'info',
  timestamp: '2020-02-28T13:44:53.694Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-28T13:45:24.472Z'
}
{
  message: '>>>> printingEditionService.update(), with: printingEdition = {"title":"Some","description":"dsgfdsg","cover_image":"sdgagsfg","type":0,"price":2345,"currency":"USD","author_ids":[{"_id":"5e4554bdb7f6f522dc3156a0"},{"_id":"5e5396b94434eb347cdf6219"}]}',
  level: 'info',
  timestamp: '2020-02-28T13:45:24.838Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-28T13:46:24.702Z'
}
{
  message: '>>>> printingEditionService.update(), with: printingEdition = {"title":"Some","description":"dsgfdsg","cover_image":"sdgagsfg","type":0,"price":2345,"currency":"USD","author_ids":[{"_id":"5e4554bdb7f6f522dc3156a0"},{"_id":"5e5396b94434eb347cdf6219"}]}',
  level: 'info',
  timestamp: '2020-02-28T13:46:25.905Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-28T13:46:42.974Z'
}
{
  message: '>>>> printingEditionService.update(), with: printingEdition = {"title":"Some","description":"dsgfdsg","cover_image":"sdgagsfg","type":0,"price":2345,"currency":"USD","author_ids":[{"_id":"5e4554bdb7f6f522dc3156a0"},{"_id":"5e5396b94434eb347cdf6219"}]}',
  level: 'info',
  timestamp: '2020-02-28T13:46:44.398Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-28T13:47:36.438Z'
}
{
  message: '>>>> printingEditionService.update(), with: printingEdition = {"title":"Some","description":"dsgfdsg","cover_image":"sdgagsfg","type":0,"price":2345,"currency":"USD","author_ids":[{"_id":"5e4554bdb7f6f522dc3156a0"},{"_id":"5e5396b94434eb347cdf6219"}]}',
  level: 'info',
  timestamp: '2020-02-28T13:47:37.594Z'
}
{
  message: '>>>> printingEditionService.update(), with: printingEdition = {"_id":"5e5907a2b4919a3d8c8583f7","title":"Some","description":"dsgfdsg","cover_image":"sdgagsfg","type":0,"price":2345,"currency":"USD","author_ids":[{"_id":"5e4554bdb7f6f522dc3156a0"},{"_id":"5e5396b94434eb347cdf6219"}]}',
  level: 'info',
  timestamp: '2020-02-28T13:48:33.194Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-28T13:54:39.785Z'
}
{
  message: '>>>> printingEditionService.update(), with: printingEdition = {"_id":"5e5907a2b4919a3d8c8583f7","title":"Some","description":"dsgfdsg","cover_image":"sdgagsfg","type":0,"price":2345,"currency":"USD","author_ids":[{"_id":"5e4554bdb7f6f522dc3156a0"},{"_id":"5e5396b94434eb347cdf6219"}]}',
  level: 'info',
  timestamp: '2020-02-28T13:54:41.651Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-28T13:55:06.867Z'
}
{
  message: '>>>> printingEditionService.update(), with: printingEdition = {"_id":"5e5907a2b4919a3d8c8583f7","title":"Some","description":"dsgfdsg","cover_image":"sdgagsfg","type":0,"price":2345,"currency":"USD","author_ids":[{"_id":"5e4554bdb7f6f522dc3156a0"},{"_id":"5e5396b94434eb347cdf6219"}]}',
  level: 'info',
  timestamp: '2020-02-28T13:55:52.078Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-28T13:56:35.626Z'
}
{
  message: '>>>> printingEditionService.update(), with: printingEdition = {"_id":"5e5907a2b4919a3d8c8583f7","title":"Some","description":"dsgfdsg","cover_image":"sdgagsfg","type":0,"price":2345,"currency":"USD","author_ids":[{"_id":"5e4554bdb7f6f522dc3156a0"},{"_id":"5e5396b94434eb347cdf6219"}]}',
  level: 'info',
  timestamp: '2020-02-28T13:56:36.530Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-28T13:56:58.786Z'
}
{
  message: '>>>> printingEditionService.update(), with: printingEdition = {"_id":"5e5907a2b4919a3d8c8583f7","title":"Some","description":"dsgfdsg","cover_image":"sdgagsfg","type":0,"price":2345,"currency":"USD","author_ids":[{"_id":"5e4554bdb7f6f522dc3156a0"},{"_id":"5e5396b94434eb347cdf6219"}]}',
  level: 'info',
  timestamp: '2020-02-28T13:56:59.245Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-28T13:57:30.052Z'
}
{
  message: '>>>> printingEditionService.update(), with: printingEdition = {"_id":"5e5907a2b4919a3d8c8583f7","title":"Some","description":"dsgfdsg","cover_image":"sdgagsfg","type":0,"price":2345,"currency":"USD","author_ids":[{"_id":"5e4554bdb7f6f522dc3156a0"},{"_id":"5e5396b94434eb347cdf6219"}]}',
  level: 'info',
  timestamp: '2020-02-28T13:57:30.338Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-28T13:58:14.716Z'
}
{
  message: '>>>> printingEditionService.update(), with: printingEdition = {"_id":"5e5907a2b4919a3d8c8583f7","title":"Some","description":"dsgfdsg","cover_image":"sdgagsfg","type":0,"price":2345,"currency":"USD","author_ids":[{"_id":"5e4554bdb7f6f522dc3156a0"},{"_id":"5e5396b94434eb347cdf6219"}]}',
  level: 'info',
  timestamp: '2020-02-28T13:58:14.831Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-28T13:59:23.336Z'
}
{
  message: '>>>> printingEditionService.update(), with: printingEdition = {"_id":"5e5907a2b4919a3d8c8583f7","title":"Some","description":"dsgfdsg","cover_image":"sdgagsfg","type":0,"price":2345,"currency":"USD","author_ids":[{"_id":"5e4554bdb7f6f522dc3156a0"},{"_id":"5e5396b94434eb347cdf6219"}]}',
  level: 'info',
  timestamp: '2020-02-28T13:59:23.656Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-28T14:00:06.781Z'
}
{
  message: '>>>> printingEditionService.update(), with: printingEdition = {"_id":"5e5907a2b4919a3d8c8583f7","title":"Some","description":"dsgfdsg","cover_image":"sdgagsfg","type":0,"price":2345,"currency":"USD","author_ids":[{"_id":"5e4554bdb7f6f522dc3156a0"},{"_id":"5e5396b94434eb347cdf6219"}]}',
  level: 'info',
  timestamp: '2020-02-28T14:00:06.893Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-28T14:02:01.573Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-28T14:02:08.845Z'
}
{
  message: '>>>> printingEditionService.update(), with: printingEdition = {"_id":"5e5907a2b4919a3d8c8583f7","title":"Some","description":"dsgfdsg","cover_image":"sdgagsfg","type":0,"price":2345,"currency":"USD","author_ids":[{"_id":"5e4554bdb7f6f522dc3156a0"},{"_id":"5e5396b94434eb347cdf6219"}]}',
  level: 'info',
  timestamp: '2020-02-28T14:02:09.129Z'
}
{
  message: '>>>> printingEditionService.update(), with: printingEdition = {"_id":"5e5907a2b4919a3d8c8583f7","title":"Some","description":"dsgfdsg","cover_image":"sdgagsfg","type":0,"price":2345,"currency":"USD","author_ids":[{"_id":"5e4554bdb7f6f522dc3156a0"},{"_id":"5e5396b94434eb347cdf6219"}]}',
  level: 'info',
  timestamp: '2020-02-28T14:02:12.289Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-28T14:02:40.188Z'
}
{
  message: '>>>> printingEditionService.update(), with: printingEdition = {"_id":"5e5907a2b4919a3d8c8583f7","title":"Some","description":"dsgfdsg","cover_image":"sdgagsfg","type":0,"price":2345,"currency":"USD","author_ids":[{"_id":"5e4554bdb7f6f522dc3156a0"},{"_id":"5e5396b94434eb347cdf6219"}]}',
  level: 'info',
  timestamp: '2020-02-28T14:02:40.391Z'
}
{
  message: '>>>> printingEditionService.update(), result = false',
  level: 'error',
  timestamp: '2020-02-28T14:02:40.418Z'
}
{
  message: '>>>> authorService.getAuthors(), with: filter = {"searchString":"Robert Sheckley","pageNumber":1,"pageSize":10}',
  level: 'info',
  timestamp: '2020-02-28T14:02:58.366Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-28T14:04:50.917Z'
}
{
  message: '>>>> authorService.getAuthors(), with: filter = {"searchString":"weber","pageNumber":1,"pageSize":10}',
  level: 'info',
  timestamp: '2020-02-28T14:06:37.302Z'
}
{
  message: '>>>> authorService.getAuthors(), with: filter = {"searchString":"david","pageNumber":1,"pageSize":10}',
  level: 'info',
  timestamp: '2020-02-28T14:06:57.668Z'
}
{
  message: '>>>> authorService.getAuthors(), with: filter = {"searchString":"david","pageNumber":1,"pageSize":10}',
  level: 'info',
  timestamp: '2020-02-28T14:08:27.904Z'
}
{
  message: '>>>> printingEditionService.update(), with: printingEdition = {"_id":"5e46bd86b2b3d403c4db8fdf","title":"Three Comrades","description":"From the acclaimed author of All Quiet on the Western Front comes Three Comrades, a harrowing novel that follows a group of friends as they cope with upheaval in Germany between World Wars I and II.","cover_image":"sdgagsfg","type":0,"price":75,"currency":"USD","author_ids":[{"_id":"5e4554bdb7f6f522dc3156a0"},{"_id":"5e4692843577602830c4c5dc"}]}',
  level: 'info',
  timestamp: '2020-02-28T14:10:25.182Z'
}
{
  message: '>>>> authorService.getAuthors(), with: filter = {"searchString":"david","pageNumber":1,"pageSize":10}',
  level: 'info',
  timestamp: '2020-02-28T14:10:29.918Z'
}
{
  message: '>>>> authorService.getAuthors(), with: filter = {"searchString":"Leo Tolstoy","pageNumber":1,"pageSize":10}',
  level: 'info',
  timestamp: '2020-02-28T14:11:10.751Z'
}
{
  message: '>>>> printingEditionService.update(), with: printingEdition = {"_id":"5e46bd86b2b3d403c4db8fdf","title":"Three Comrades","description":"From the acclaimed author of All Quiet on the Western Front comes Three Comrades, a harrowing novel that follows a group of friends as they cope with upheaval in Germany between World Wars I and II.","cover_image":"sdgagsfg","type":0,"price":75,"currency":"USD","author_ids":[{"_id":"5e4692843577602830c4c5dc"}]}',
  level: 'info',
  timestamp: '2020-02-28T14:12:49.849Z'
}
{
  message: '>>>> authorService.getAuthors(), with: filter = {"searchString":"Leo Tolstoy","pageNumber":1,"pageSize":10}',
  level: 'info',
  timestamp: '2020-02-28T14:12:53.427Z'
}
{
  message: '>>>> authorService.getAuthors(), with: filter = {"searchString":"Leo Tolstoy","pageNumber":1,"pageSize":10}',
  level: 'info',
  timestamp: '2020-02-28T14:13:00.833Z'
}
{
  message: '>>>> printingEditionService.update(), with: printingEdition = {"_id":"5e46bd86b2b3d403c4db8fdf","title":"Three Comrades","description":"From the acclaimed author of All Quiet on the Western Front comes Three Comrades, a harrowing novel that follows a group of friends as they cope with upheaval in Germany between World Wars I and II.","cover_image":"sdgagsfg","type":0,"price":75,"currency":"USD","author_ids":[{"_id":"5e4554bdb7f6f522dc3156a0"},{"_id":"5e4692843577602830c4c5dc"}]}',
  level: 'info',
  timestamp: '2020-02-28T14:13:34.156Z'
}
{
  message: '>>>> authorService.getAuthors(), with: filter = {"searchString":"Leo Tolstoy","pageNumber":1,"pageSize":10}',
  level: 'info',
  timestamp: '2020-02-28T14:13:37.386Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-28T14:14:06.914Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-28T14:15:20.347Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-28T14:15:37.936Z'
}
{
  message: '>>>> printingEditionService.update(), with: printingEdition = {"_id":"5e46bd86b2b3d403c4db8fdf","title":"Three Comrades","description":"From the acclaimed author of All Quiet on the Western Front comes Three Comrades, a harrowing novel that follows a group of friends as they cope with upheaval in Germany between World Wars I and II.","cover_image":"sdgagsfg","type":0,"price":75,"currency":"USD","author_ids":[{"_id":"5e4554bdb7f6f522dc3156a0"},{"_id":"5e4692843577602830c4c5dc"}]}',
  level: 'info',
  timestamp: '2020-02-28T14:15:48.463Z'
}
{
  message: '>>>> printingEditionService.update(), result = false',
  level: 'error',
  timestamp: '2020-02-28T14:15:48.516Z'
}
{
  message: '>>>> authorService.getAuthors(), with: filter = {"searchString":"Leo Tolstoy","pageNumber":1,"pageSize":10}',
  level: 'info',
  timestamp: '2020-02-28T14:16:10.529Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-28T14:17:25.404Z'
}
{
  message: '>>>> printingEditionService.update(), with: printingEdition = {"_id":"5e46bd86b2b3d403c4db8fdf","title":"Three Comrades","description":"From the acclaimed author of All Quiet on the Western Front comes Three Comrades, a harrowing novel that follows a group of friends as they cope with upheaval in Germany between World Wars I and II.","cover_image":"sdgagsfg","type":0,"price":75,"currency":"USD","author_ids":[{"_id":"5e4554bdb7f6f522dc3156a0"},{"_id":"5e4692843577602830c4c5dc"}]}',
  level: 'info',
  timestamp: '2020-02-28T14:17:34.172Z'
}
{
  message: '>>>> printingEditionService.update(), result = false',
  level: 'error',
  timestamp: '2020-02-28T14:17:34.198Z'
}
{
  message: '>>>> authorService.getAuthors(), with: filter = {"searchString":"Leo Tolstoy","pageNumber":1,"pageSize":10}',
  level: 'info',
  timestamp: '2020-02-28T14:17:37.994Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-28T14:21:04.065Z'
}
{
  message: '>>>> printingEditionService.update(), with: printingEdition = {"_id":"5e46bd86b2b3d403c4db8fdf","title":"Three Comrades","description":"From the acclaimed author of All Quiet on the Western Front comes Three Comrades, a harrowing novel that follows a group of friends as they cope with upheaval in Germany between World Wars I and II.","cover_image":"sdgagsfg","type":0,"price":75,"currency":"USD","author_ids":[{"_id":"5e4554bdb7f6f522dc3156a0"},{"_id":"5e4692843577602830c4c5dc"}]}',
  level: 'info',
  timestamp: '2020-02-28T14:21:31.539Z'
}
{
  message: '>>>> printingEditionService.update(), result = false',
  level: 'error',
  timestamp: '2020-02-28T14:21:31.572Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-28T14:22:40.275Z'
}
{
  message: '>>>> printingEditionService.update(), with: printingEdition = {"_id":"5e46bd86b2b3d403c4db8fdf","title":"Three Comrades","description":"From the acclaimed author of All Quiet on the Western Front comes Three Comrades, a harrowing novel that follows a group of friends as they cope with upheaval in Germany between World Wars I and II.","cover_image":"sdgagsfg","type":0,"price":75,"currency":"USD","author_ids":[{"_id":"5e4554bdb7f6f522dc3156a0"},{"_id":"5e4692843577602830c4c5dc"}]}',
  level: 'info',
  timestamp: '2020-02-28T14:22:40.363Z'
}
{
  message: '>>>> printingEditionService.update(), result = false',
  level: 'error',
  timestamp: '2020-02-28T14:22:40.445Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-28T14:23:14.168Z'
}
{
  message: '>>>> printingEditionService.update(), with: printingEdition = {"_id":"5e46bd86b2b3d403c4db8fdf","title":"Three Comrades","description":"From the acclaimed author of All Quiet on the Western Front comes Three Comrades, a harrowing novel that follows a group of friends as they cope with upheaval in Germany between World Wars I and II.","cover_image":"sdgagsfg","type":0,"price":75,"currency":"USD","author_ids":[{"_id":"5e4554bdb7f6f522dc3156a0"},{"_id":"5e4692843577602830c4c5dc"}]}',
  level: 'info',
  timestamp: '2020-02-28T14:23:14.347Z'
}
{
  message: '>>>> printingEditionService.update(), result = false',
  level: 'error',
  timestamp: '2020-02-28T14:23:14.404Z'
}
{
  message: '>>>> printingEditionService.update(), with: printingEdition = {"_id":"5e46bd86b2b3d403c4db8fdf","title":"Three Comrades","description":"From the acclaimed author of All Quiet on the Western Front comes Three Comrades, a harrowing novel that follows a group of friends as they cope with upheaval in Germany between World Wars I and II.","cover_image":"sdgagsfg","type":0,"price":75,"currency":"USD","author_ids":[{"_id":"5e4554bdb7f6f522dc3156a0"},{"_id":"5e4692843577602830c4c5dc"}]}',
  level: 'info',
  timestamp: '2020-02-28T14:23:15.069Z'
}
{
  message: '>>>> printingEditionService.update(), result = false',
  level: 'error',
  timestamp: '2020-02-28T14:23:15.117Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-28T14:23:52.355Z'
}
{
  message: '>>>> printingEditionService.update(), with: printingEdition = {"_id":"5e46bd86b2b3d403c4db8fdf","title":"Three Comrades","description":"From the acclaimed author of All Quiet on the Western Front comes Three Comrades, a harrowing novel that follows a group of friends as they cope with upheaval in Germany between World Wars I and II.","cover_image":"sdgagsfg","type":0,"price":75,"currency":"USD","author_ids":[{"_id":"5e4554bdb7f6f522dc3156a0"},{"_id":"5e4692843577602830c4c5dc"}]}',
  level: 'info',
  timestamp: '2020-02-28T14:23:52.828Z'
}
{
  message: '>>>> printingEditionService.update(), result = false',
  level: 'error',
  timestamp: '2020-02-28T14:23:52.875Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-28T14:26:17.296Z'
}
{
  message: '>>>> printingEditionService.update(), with: printingEdition = {"_id":"5e46bd86b2b3d403c4db8fdf","title":"Three Comrades","description":"From the acclaimed author of All Quiet on the Western Front comes Three Comrades, a harrowing novel that follows a group of friends as they cope with upheaval in Germany between World Wars I and II.","cover_image":"sdgagsfg","type":0,"price":75,"currency":"USD","author_ids":[{"_id":"5e4554bdb7f6f522dc3156a0"},{"_id":"5e4692843577602830c4c5dc"}]}',
  level: 'info',
  timestamp: '2020-02-28T14:26:17.601Z'
}
{
  message: '>>>> printingEditionService.update(), result = false',
  level: 'error',
  timestamp: '2020-02-28T14:26:17.654Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-28T14:26:49.548Z'
}
{
  message: '>>>> printingEditionService.update(), with: printingEdition = {"_id":"5e46bd86b2b3d403c4db8fdf","title":"Three Comrades","description":"From the acclaimed author of All Quiet on the Western Front comes Three Comrades, a harrowing novel that follows a group of friends as they cope with upheaval in Germany between World Wars I and II.","cover_image":"sdgagsfg","type":0,"price":75,"currency":"USD","author_ids":[{"_id":"5e4554bdb7f6f522dc3156a0"},{"_id":"5e4692843577602830c4c5dc"}]}',
  level: 'info',
  timestamp: '2020-02-28T14:26:51.059Z'
}
{
  message: '>>>> printingEditionService.update(), result = false',
  level: 'error',
  timestamp: '2020-02-28T14:26:51.150Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-28T14:27:43.635Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-28T14:27:56.674Z'
}
{
  message: '>>>> printingEditionService.update(), with: printingEdition = {"_id":"5e46bd86b2b3d403c4db8fdf","title":"Three Comrades","description":"From the acclaimed author of All Quiet on the Western Front comes Three Comrades, a harrowing novel that follows a group of friends as they cope with upheaval in Germany between World Wars I and II.","cover_image":"sdgagsfg","type":0,"price":75,"currency":"USD","author_ids":[{"_id":"5e4554bdb7f6f522dc3156a0"},{"_id":"5e4692843577602830c4c5dc"}]}',
  level: 'info',
  timestamp: '2020-02-28T14:27:57.399Z'
}
{
  message: '>>>> printingEditionService.update(), result = false',
  level: 'error',
  timestamp: '2020-02-28T14:27:57.541Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-28T14:28:44.218Z'
}
{
  message: '>>>> printingEditionService.update(), with: printingEdition = {"_id":"5e46bd86b2b3d403c4db8fdf","title":"Three Comrades","description":"From the acclaimed author of All Quiet on the Western Front comes Three Comrades, a harrowing novel that follows a group of friends as they cope with upheaval in Germany between World Wars I and II.","cover_image":"sdgagsfg","type":0,"price":75,"currency":"USD","author_ids":[{"_id":"5e4554bdb7f6f522dc3156a0"},{"_id":"5e4692843577602830c4c5dc"}]}',
  level: 'info',
  timestamp: '2020-02-28T14:28:48.062Z'
}
{
  message: '>>>> printingEditionService.update(), result = false',
  level: 'error',
  timestamp: '2020-02-28T14:28:48.233Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-28T14:29:40.797Z'
}
{
  message: '>>>> printingEditionService.update(), with: printingEdition = {"_id":"5e46bd86b2b3d403c4db8fdf","title":"Three Comrades","description":"From the acclaimed author of All Quiet on the Western Front comes Three Comrades, a harrowing novel that follows a group of friends as they cope with upheaval in Germany between World Wars I and II.","cover_image":"sdgagsfg","type":0,"price":75,"currency":"USD","author_ids":[{"_id":"5e4554bdb7f6f522dc3156a0"},{"_id":"5e4692843577602830c4c5dc"}]}',
  level: 'info',
  timestamp: '2020-02-28T14:30:28.559Z'
}
{
  message: '>>>> printingEditionService.update(), result = false',
  level: 'error',
  timestamp: '2020-02-28T14:30:29.477Z'
}
{
  message: '>>>> authorService.getAuthors(), with: filter = {"searchString":"Leo Tolstoy","pageNumber":1,"pageSize":10}',
  level: 'info',
  timestamp: '2020-02-28T14:30:48.476Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-28T14:31:16.404Z'
}
{
  message: '>>>> printingEditionService.update(), with: printingEdition = {"_id":"5e46bd86b2b3d403c4db8fdf","title":"Three Comrades","description":"From the acclaimed author of All Quiet on the Western Front comes Three Comrades, a harrowing novel that follows a group of friends as they cope with upheaval in Germany between World Wars I and II.","cover_image":"sdgagsfg","type":0,"price":75,"currency":"USD","author_ids":[{"_id":"5e4554bdb7f6f522dc3156a0"},{"_id":"5e4692843577602830c4c5dc"}]}',
  level: 'info',
  timestamp: '2020-02-28T14:31:17.120Z'
}
{
  message: '>>>> printingEditionService.update(), result = false',
  level: 'error',
  timestamp: '2020-02-28T14:31:17.200Z'
}
{
  message: '>>>> authorService.getAuthors(), with: filter = {"searchString":"Leo Tolstoy","pageNumber":1,"pageSize":10}',
  level: 'info',
  timestamp: '2020-02-28T14:31:21.730Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-28T14:32:44.880Z'
}
{
  message: '>>>> printingEditionService.update(), with: printingEdition = {"_id":"5e46bd86b2b3d403c4db8fdf","title":"Three Comrades","description":"From the acclaimed author of All Quiet on the Western Front comes Three Comrades, a harrowing novel that follows a group of friends as they cope with upheaval in Germany between World Wars I and II.","cover_image":"sdgagsfg","type":0,"price":75,"currency":"USD","author_ids":[{"_id":"5e4554bdb7f6f522dc3156a0"},{"_id":"5e4692843577602830c4c5dc"}]}',
  level: 'info',
  timestamp: '2020-02-28T14:32:47.643Z'
}
{
  message: '>>>> printingEditionService.update(), result = false',
  level: 'error',
  timestamp: '2020-02-28T14:32:47.748Z'
}
{
  message: '>>>> authorService.getAuthors(), with: filter = {"searchString":"Leo Tolstoy","pageNumber":1,"pageSize":10}',
  level: 'info',
  timestamp: '2020-02-28T14:32:56.643Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-28T14:36:56.670Z'
}
{
  message: '>>>> printingEditionService.update(), with: printingEdition = {"_id":"5e46bd86b2b3d403c4db8fdf","title":"Three Comrades","description":"From the acclaimed author of All Quiet on the Western Front comes Three Comrades, a harrowing novel that follows a group of friends as they cope with upheaval in Germany between World Wars I and II.","cover_image":"sdgagsfg","type":0,"price":75,"currency":"USD","author_ids":[{"_id":"5e4554bdb7f6f522dc3156a0"},{"_id":"5e4692843577602830c4c5dc"}]}',
  level: 'info',
  timestamp: '2020-02-28T14:36:58.772Z'
}
{
  message: '>>>> printingEditionService.update(), result = false',
  level: 'error',
  timestamp: '2020-02-28T14:36:58.937Z'
}
{
  message: '>>>> authorService.getAuthors(), with: filter = {"searchString":"Leo Tolstoy","pageNumber":1,"pageSize":10}',
  level: 'info',
  timestamp: '2020-02-28T14:37:29.615Z'
}
{
  message: '>>>> printingEditionService.update(), with: printingEdition = {"_id":"5e46bd86b2b3d403c4db8fdf","title":"Three Comrades","description":"From the acclaimed author of All Quiet on the Western Front comes Three Comrades, a harrowing novel that follows a group of friends as they cope with upheaval in Germany between World Wars I and II.","cover_image":"sdgagsfg","type":0,"price":75,"currency":"USD","author_ids":[{"_id":"5e4554bdb7f6f522dc3156a0"},{"_id":"5e4692843577602830c4c5dc"}]}',
  level: 'info',
  timestamp: '2020-02-28T14:38:14.646Z'
}
{
  message: '>>>> printingEditionService.update(), result = false',
  level: 'error',
  timestamp: '2020-02-28T14:38:14.697Z'
}
{
  message: '>>>> printingEditionService.update(), with: printingEdition = {"_id":"5e46bd86b2b3d403c4db8fdf","title":"Three Comrades","description":"From the acclaimed author of All Quiet on the Western Front comes Three Comrades, a harrowing novel that follows a group of friends as they cope with upheaval in Germany between World Wars I and II.","cover_image":"sdgagsfg","type":0,"price":75,"currency":"USD","author_ids":[{"_id":"5e4554bdb7f6f522dc3156a0"},{"_id":"5e4692843577602830c4c5dc"}]}',
  level: 'info',
  timestamp: '2020-02-28T14:38:22.063Z'
}
{
  message: '>>>> printingEditionService.update(), result = false',
  level: 'error',
  timestamp: '2020-02-28T14:38:22.112Z'
}
{
  message: '>>>> authorService.getAuthors(), with: filter = {"searchString":"Leo Tolstoy","pageNumber":1,"pageSize":10}',
  level: 'info',
  timestamp: '2020-02-28T14:38:25.957Z'
}
{
  message: '>>>> printingEditionService.update(), with: printingEdition = {"_id":"5e46bd86b2b3d403c4db8fdf","title":"Three Comrades","description":"From the acclaimed author of All Quiet on the Western Front comes Three Comrades, a harrowing novel that follows a group of friends as they cope with upheaval in Germany between World Wars I and II.","cover_image":"sdgagsfg","type":0,"price":75,"currency":"USD","author_ids":[{"_id":"5e4554bdb7f6f522dc3156a0"},{"_id":"5e4692843577602830c4c5dc"}]}',
  level: 'info',
  timestamp: '2020-02-28T14:38:30.181Z'
}
{
  message: '>>>> printingEditionService.update(), result = false',
  level: 'error',
  timestamp: '2020-02-28T14:38:30.227Z'
}
{
  message: '>>>> authorService.getAuthors(), with: filter = {"searchString":"Leo Tolstoy","pageNumber":1,"pageSize":10}',
  level: 'info',
  timestamp: '2020-02-28T14:38:32.965Z'
}
{
  message: '>>>> printingEditionService.update(), with: printingEdition = {"_id":"5e46bd86b2b3d403c4db8fdf","title":"Three Comrades","description":"From the acclaimed author of All Quiet on the Western Front comes Three Comrades, a harrowing novel that follows a group of friends as they cope with upheaval in Germany between World Wars I and II.","cover_image":"sdgagsfg","type":0,"price":75,"currency":"USD","author_ids":[{"_id":"5e4554bdb7f6f522dc3156a0"},{"_id":"5e4692843577602830c4c5dc"}]}',
  level: 'info',
  timestamp: '2020-02-28T14:38:45.926Z'
}
{
  message: '>>>> printingEditionService.update(), result = false',
  level: 'error',
  timestamp: '2020-02-28T14:38:45.978Z'
}
{
  message: '>>>> authorService.getAuthors(), with: filter = {"searchString":"Leo Tolstoy","pageNumber":1,"pageSize":10}',
  level: 'info',
  timestamp: '2020-02-28T14:38:48.665Z'
}
{
  message: '>>>> printingEditionService.update(), with: printingEdition = {"_id":"5e46bd86b2b3d403c4db8fdf","title":"Three Comrades","description":"From the acclaimed author of All Quiet on the Western Front comes Three Comrades, a harrowing novel that follows a group of friends as they cope with upheaval in Germany between World Wars I and II.","cover_image":"sdgagsfg","type":0,"price":75,"currency":"USD","author_ids":[{"_id":"5e4554bdb7f6f522dc3156a0"},{"_id":"5e4692843577602830c4c5dc"}]}',
  level: 'info',
  timestamp: '2020-02-28T14:38:54.550Z'
}
{
  message: '>>>> printingEditionService.update(), result = false',
  level: 'error',
  timestamp: '2020-02-28T14:38:54.592Z'
}
{
  message: '>>>> authorService.getAuthors(), with: filter = {"searchString":"Leo Tolstoy","pageNumber":1,"pageSize":10}',
  level: 'info',
  timestamp: '2020-02-28T14:38:57.959Z'
}
{
  message: '>>>> printingEditionService.update(), with: printingEdition = {"_id":"5e46bd86b2b3d403c4db8fdf","title":"Three Comrades","description":"From the acclaimed author of All Quiet on the Western Front comes Three Comrades, a harrowing novel that follows a group of friends as they cope with upheaval in Germany between World Wars I and II.","cover_image":"sdgagsfg","type":0,"price":75,"currency":"USD","author_ids":[{"_id":"5e4554bdb7f6f522dc3156a0"},{"_id":"5e4692843577602830c4c5dc"}]}',
  level: 'info',
  timestamp: '2020-02-28T14:39:21.186Z'
}
{
  message: '>>>> printingEditionService.update(), result = false',
  level: 'error',
  timestamp: '2020-02-28T14:39:21.234Z'
}
{
  message: '>>>> authorService.getAuthors(), with: filter = {"searchString":"Leo Tolstoy","pageNumber":1,"pageSize":10}',
  level: 'info',
  timestamp: '2020-02-28T14:39:24.402Z'
}
{
  message: '>>>> printingEditionService.update(), with: printingEdition = {"_id":"5e46bd86b2b3d403c4db8fdf","title":"Three Comrades","description":"From the acclaimed author of All Quiet on the Western Front comes Three Comrades, a harrowing novel that follows a group of friends as they cope with upheaval in Germany between World Wars I and II.","cover_image":"sdgagsfg","type":0,"price":75,"currency":"USD","author_ids":[{"_id":"5e4554cbb7f6f522dc3156a1"},{"_id":"5e4692843577602830c4c5dc"}]}',
  level: 'info',
  timestamp: '2020-02-28T14:40:31.583Z'
}
{
  message: '>>>> authorService.getAuthors(), with: filter = {"searchString":"Leo Tolstoy","pageNumber":1,"pageSize":10}',
  level: 'info',
  timestamp: '2020-02-28T14:40:35.120Z'
}
{
  message: '>>>> authorService.getAuthors(), with: filter = {"searchString":"Victor","pageNumber":1,"pageSize":10}',
  level: 'info',
  timestamp: '2020-02-28T14:41:00.990Z'
}
{
  message: '>>>> printingEditionService.update(), with: printingEdition = {"_id":"5e46bd86b2b3d403c4db8fdf","title":"Three Comrades","description":"From the acclaimed author of All Quiet on the Western Front comes Three Comrades, a harrowing novel that follows a group of friends as they cope with upheaval in Germany between World Wars I and II.","cover_image":"sdgagsfg","type":0,"price":75,"currency":"USD","author_ids":[{"_id":"5e4692843577602830c4c5dc"}]}',
  level: 'info',
  timestamp: '2020-02-28T14:41:17.576Z'
}
{
  message: '>>>> authorService.getAuthors(), with: filter = {"searchString":"Victor","pageNumber":1,"pageSize":10}',
  level: 'info',
  timestamp: '2020-02-28T14:41:21.567Z'
}
{
  message: '>>>> printingEditionService.update(), with: printingEdition = {"_id":"5e46bd86b2b3d403c4db8fdf","title":"Three Comrades","description":"From the acclaimed author of All Quiet on the Western Front comes Three Comrades, a harrowing novel that follows a group of friends as they cope with upheaval in Germany between World Wars I and II.","cover_image":"sdgagsfg","type":0,"price":75,"currency":"USD","author_ids":[{"_id":"5e4554cbb7f6f522dc3156a1"},{"_id":"5e4692843577602830c4c5dc"}]}',
  level: 'info',
  timestamp: '2020-02-28T14:41:49.676Z'
}
{
  message: '>>>> authorService.getAuthors(), with: filter = {"searchString":"Victor","pageNumber":1,"pageSize":10}',
  level: 'info',
  timestamp: '2020-02-28T14:41:57.398Z'
}
{
  message: '>>>> printingEditionService.update(), with: printingEdition = {"_id":"5e46bd86b2b3d403c4db8fdf","title":"Three Comrades","description":"From the acclaimed author of All Quiet on the Western Front comes Three Comrades, a harrowing novel that follows a group of friends as they cope with upheaval in Germany between World Wars I and II.","cover_image":"sdgagsfg","type":0,"price":75,"currency":"USD","author_ids":[{"_id":"5e4692843577602830c4c5dc"}]}',
  level: 'info',
  timestamp: '2020-02-28T14:42:16.966Z'
}
{
  message: '>>>> authorService.getAuthors(), with: filter = {"searchString":"Victor","pageNumber":1,"pageSize":10}',
  level: 'info',
  timestamp: '2020-02-28T14:42:19.602Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-28T14:42:43.598Z'
}
{
  message: '>>>> printingEditionService.update(), with: printingEdition = {"_id":"5e46bd86b2b3d403c4db8fdf","title":"Three Comrades","description":"From the acclaimed author of All Quiet on the Western Front comes Three Comrades, a harrowing novel that follows a group of friends as they cope with upheaval in Germany between World Wars I and II.","cover_image":"sdgagsfg","type":0,"price":75,"currency":"USD","author_ids":[{"_id":"5e4554cbb7f6f522dc3156a1"},{"_id":"5e4692843577602830c4c5dc"}]}',
  level: 'info',
  timestamp: '2020-02-28T14:43:04.549Z'
}
{
  message: '>>>> authorService.getAuthors(), with: filter = {"searchString":"Victor","pageNumber":1,"pageSize":10}',
  level: 'info',
  timestamp: '2020-02-28T14:43:27.043Z'
}
{
  message: '>>>> printingEditionService.update(), with: printingEdition = {"_id":"5e46bd86b2b3d403c4db8fdf","title":"Three Comrades","description":"From the acclaimed author of All Quiet on the Western Front comes Three Comrades, a harrowing novel that follows a group of friends as they cope with upheaval in Germany between World Wars I and II.","cover_image":"sdgagsfg","type":0,"price":75,"currency":"USD","author_ids":[{"_id":"5e4692843577602830c4c5dc"}]}',
  level: 'info',
  timestamp: '2020-02-28T14:43:55.139Z'
}
{
  message: '>>>> authorService.getAuthors(), with: filter = {"searchString":"Victor","pageNumber":1,"pageSize":10}',
  level: 'info',
  timestamp: '2020-02-28T14:43:59.077Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-28T14:45:19.742Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-28T14:45:27.683Z'
}
{
  message: '>>>> printingEditionService.update(), with: printingEdition = {"_id":"5e46bd86b2b3d403c4db8fdf","title":"Three Comrades","description":"From the acclaimed author of All Quiet on the Western Front comes Three Comrades, a harrowing novel that follows a group of friends as they cope with upheaval in Germany between World Wars I and II.","cover_image":"sdgagsfg","type":0,"price":75,"currency":"USD","author_ids":[{"_id":"5e4554cbb7f6f522dc3156a1"},{"_id":"5e4692843577602830c4c5dc"}]}',
  level: 'info',
  timestamp: '2020-02-28T14:45:38.830Z'
}
{
  message: '>>>> authorService.getAuthors(), with: filter = {"searchString":"Victor","pageNumber":1,"pageSize":10}',
  level: 'info',
  timestamp: '2020-02-28T14:45:42.970Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-28T14:46:11.472Z'
}
{
  message: '>>>> printingEditionService.update(), with: printingEdition = {"_id":"5e46bd86b2b3d403c4db8fdf","title":"Three Comrades","description":"From the acclaimed author of All Quiet on the Western Front comes Three Comrades, a harrowing novel that follows a group of friends as they cope with upheaval in Germany between World Wars I and II.","cover_image":"sdgagsfg","type":0,"price":75,"currency":"USD","author_ids":[{"_id":"5e4692843577602830c4c5dc"}]}',
  level: 'info',
  timestamp: '2020-02-28T14:46:23.580Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-28T14:48:31.743Z'
}
{
  message: '>>>> printingEditionService.update(), with: printingEdition = {"_id":"5e46bd86b2b3d403c4db8fdf","title":"Three Comrades","description":"From the acclaimed author of All Quiet on the Western Front comes Three Comrades, a harrowing novel that follows a group of friends as they cope with upheaval in Germany between World Wars I and II.","cover_image":"sdgagsfg","type":0,"price":75,"currency":"USD","author_ids":[{"_id":"5e4554cbb7f6f522dc3156a1"},{"_id":"5e4692843577602830c4c5dc"}]}',
  level: 'info',
  timestamp: '2020-02-28T14:48:36.446Z'
}
{
  message: '>>>> authorService.getAuthors(), with: filter = {"searchString":"Victor","pageNumber":1,"pageSize":10}',
  level: 'info',
  timestamp: '2020-02-28T14:48:51.112Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-28T14:49:29.401Z'
}
{
  message: '>>>> printingEditionService.update(), with: printingEdition = {"_id":"5e46bd86b2b3d403c4db8fdf","title":"Three Comrades","description":"From the acclaimed author of All Quiet on the Western Front comes Three Comrades, a harrowing novel that follows a group of friends as they cope with upheaval in Germany between World Wars I and II.","cover_image":"sdgagsfg","type":0,"price":75,"currency":"USD","author_ids":[{"_id":"5e4554cbb7f6f522dc3156a1"},{"_id":"5e4692843577602830c4c5dc"}]}',
  level: 'info',
  timestamp: '2020-02-28T14:49:30.315Z'
}
{
  message: '>>>> printingEditionService.update(), result = false',
  level: 'error',
  timestamp: '2020-02-28T14:49:30.371Z'
}
{
  message: '>>>> authorService.getAuthors(), with: filter = {"searchString":"Victor","pageNumber":1,"pageSize":10}',
  level: 'info',
  timestamp: '2020-02-28T14:49:59.221Z'
}
{
  message: '>>>> authorService.getAuthors(), with: filter = {"searchString":"Victor","pageNumber":1,"pageSize":10}',
  level: 'info',
  timestamp: '2020-02-28T14:50:01.083Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-28T14:59:02.391Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-28T14:59:51.302Z'
}
{
  message: '>>>> printingEditionService.update(), with: printingEdition = {"_id":"5e46bd86b2b3d403c4db8fdf","title":"Three Comrades","description":"From the acclaimed author of All Quiet on the Western Front comes Three Comrades, a harrowing novel that follows a group of friends as they cope with upheaval in Germany between World Wars I and II.","cover_image":"sdgagsfg","type":0,"price":75,"currency":"USD","author_ids":[{"_id":"5e4554cbb7f6f522dc3156a1"},{"_id":"5e4692843577602830c4c5dc"}]}',
  level: 'info',
  timestamp: '2020-02-28T15:00:13.403Z'
}
{
  message: '>>>> printingEditionService.update(), result = false',
  level: 'error',
  timestamp: '2020-02-28T15:00:13.466Z'
}
{
  message: '>>>> printingEditionService.update(), with: printingEdition = {"_id":"5e46bd86b2b3d403c4db8fdf","title":"Three Comrades","description":"From the acclaimed author of All Quiet on the Western Front comes Three Comrades, a harrowing novel that follows a group of friends as they cope with upheaval in Germany between World Wars I and II.","cover_image":"sdgagsfg","type":0,"price":75,"currency":"USD","author_ids":[]}',
  level: 'info',
  timestamp: '2020-02-28T15:00:36.869Z'
}
{
  message: '>>>> authorService.getAuthors(), with: filter = {"searchString":"Victor","pageNumber":1,"pageSize":10}',
  level: 'info',
  timestamp: '2020-02-28T15:01:06.426Z'
}
{
  message: '>>>> printingEditionService.update(), with: printingEdition = {"_id":"5e46bd86b2b3d403c4db8fdf","title":"Three Comrades","description":"From the acclaimed author of All Quiet on the Western Front comes Three Comrades, a harrowing novel that follows a group of friends as they cope with upheaval in Germany between World Wars I and II.","cover_image":"sdgagsfg","type":0,"price":75,"currency":"USD","author_ids":[{"_id":"5e4554cbb7f6f522dc3156a1"},{"_id":"5e4692843577602830c4c5dc"}]}',
  level: 'info',
  timestamp: '2020-02-28T15:01:17.852Z'
}
{
  message: '>>>> printingEditionService.update(), with: printingEdition = {"_id":"5e46bd86b2b3d403c4db8fdf","title":"Three Comrades","description":"From the acclaimed author of All Quiet on the Western Front comes Three Comrades, a harrowing novel that follows a group of friends as they cope with upheaval in Germany between World Wars I and II.","cover_image":"sdgagsfg","type":0,"price":75,"currency":"USD","author_ids":[]}',
  level: 'info',
  timestamp: '2020-02-28T15:02:19.926Z'
}
{
  message: '>>>> printingEditionService.update(), with: printingEdition = {"_id":"5e46bd86b2b3d403c4db8fdf","title":"Three Comrades","description":"From the acclaimed author of All Quiet on the Western Front comes Three Comrades, a harrowing novel that follows a group of friends as they cope with upheaval in Germany between World Wars I and II.","cover_image":"sdgagsfg","type":0,"price":75,"currency":"USD","author_ids":[{"_id":"5e4554cbb7f6f522dc3156a1"},{"_id":"5e4692843577602830c4c5dc"}]}',
  level: 'info',
  timestamp: '2020-02-28T15:02:56.360Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-28T15:03:12.480Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-28T15:03:29.638Z'
}
{
  message: '>>>> printingEditionService.update(), with: printingEdition = {"_id":"5e46bd86b2b3d403c4db8fdf","title":"Three Comrades","description":"From the acclaimed author of All Quiet on the Western Front comes Three Comrades, a harrowing novel that follows a group of friends as they cope with upheaval in Germany between World Wars I and II.","cover_image":"sdgagsfg","type":0,"price":75,"currency":"USD","author_ids":[]}',
  level: 'info',
  timestamp: '2020-02-28T15:03:33.642Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-28T15:04:02.487Z'
}
{
  message: '>>>> authorService.getAuthors(), with: filter = {"searchString":"Victor","pageNumber":1,"pageSize":10}',
  level: 'info',
  timestamp: '2020-02-28T15:04:02.868Z'
}
{
  message: '>>>> printingEditionService.update(), with: printingEdition = {"_id":"5e46bd86b2b3d403c4db8fdf","title":"Three Comrades","description":"From the acclaimed author of All Quiet on the Western Front comes Three Comrades, a harrowing novel that follows a group of friends as they cope with upheaval in Germany between World Wars I and II.","cover_image":"sdgagsfg","type":0,"price":75,"currency":"USD","author_ids":[{"_id":"5e4554cbb7f6f522dc3156a1"},{"_id":"5e4692843577602830c4c5dc"}]}',
  level: 'info',
  timestamp: '2020-02-28T15:04:13.669Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-28T15:04:52.035Z'
}
{
  message: '>>>> printingEditionService.update(), with: printingEdition = {"_id":"5e46bd86b2b3d403c4db8fdf","title":"Three Comrades","description":"From the acclaimed author of All Quiet on the Western Front comes Three Comrades, a harrowing novel that follows a group of friends as they cope with upheaval in Germany between World Wars I and II.","cover_image":"sdgagsfg","type":0,"price":75,"currency":"USD","author_ids":[]}',
  level: 'info',
  timestamp: '2020-02-28T15:05:16.582Z'
}
{
  message: '>>>> printingEditionService.update(), with: printingEdition = {"_id":"5e46bd86b2b3d403c4db8fdf","title":"Three Comrades","description":"From the acclaimed author of All Quiet on the Western Front comes Three Comrades, a harrowing novel that follows a group of friends as they cope with upheaval in Germany between World Wars I and II.","cover_image":"sdgagsfg","type":0,"price":75,"currency":"USD","author_ids":[{"_id":"5e4554cbb7f6f522dc3156a1"},{"_id":"5e4692843577602830c4c5dc"}]}',
  level: 'info',
  timestamp: '2020-02-28T15:05:34.742Z'
}
{
  message: '>>>> printingEditionService.update(), with: printingEdition = {"_id":"5e46bd86b2b3d403c4db8fdf","title":"Three Comrades","description":"From the acclaimed author of All Quiet on the Western Front comes Three Comrades, a harrowing novel that follows a group of friends as they cope with upheaval in Germany between World Wars I and II.","cover_image":"sdgagsfg","type":0,"price":75,"currency":"USD","author_ids":[]}',
  level: 'info',
  timestamp: '2020-02-28T15:06:17.040Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-28T15:06:51.074Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-28T15:07:22.445Z'
}
{
  message: '>>>> printingEditionService.update(), with: printingEdition = {"_id":"5e46bd86b2b3d403c4db8fdf","title":"Three Comrades","description":"From the acclaimed author of All Quiet on the Western Front comes Three Comrades, a harrowing novel that follows a group of friends as they cope with upheaval in Germany between World Wars I and II.","cover_image":"sdgagsfg","type":0,"price":75,"currency":"USD","author_ids":[{"_id":"5e4554cbb7f6f522dc3156a1"},{"_id":"5e4692843577602830c4c5dc"}]}',
  level: 'info',
  timestamp: '2020-02-28T15:07:32.311Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-28T15:09:18.115Z'
}
{
  message: '>>>> printingEditionService.update(), with: printingEdition = {"_id":"5e46bd86b2b3d403c4db8fdf","title":"Three Comrades","description":"From the acclaimed author of All Quiet on the Western Front comes Three Comrades, a harrowing novel that follows a group of friends as they cope with upheaval in Germany between World Wars I and II.","cover_image":"sdgagsfg","type":0,"price":75,"currency":"USD","author_ids":[]}',
  level: 'info',
  timestamp: '2020-02-28T15:09:21.954Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-28T15:10:20.100Z'
}
{
  message: '>>>> printingEditionService.update(), with: printingEdition = {"_id":"5e46bd86b2b3d403c4db8fdf","title":"Three Comrades","description":"From the acclaimed author of All Quiet on the Western Front comes Three Comrades, a harrowing novel that follows a group of friends as they cope with upheaval in Germany between World Wars I and II.","cover_image":"sdgagsfg","type":0,"price":75,"currency":"USD","author_ids":[]}',
  level: 'info',
  timestamp: '2020-02-28T15:10:24.267Z'
}
{
  message: '>>>> printingEditionService.update(), result = false',
  level: 'error',
  timestamp: '2020-02-28T15:10:24.293Z'
}
{
  message: '>>>> printingEditionService.update(), with: printingEdition = {"_id":"5e46bd86b2b3d403c4db8fdf","title":"Three Comrades","description":"From the acclaimed author of All Quiet on the Western Front comes Three Comrades, a harrowing novel that follows a group of friends as they cope with upheaval in Germany between World Wars I and II.","cover_image":"sdgagsfg","type":0,"price":75,"currency":"USD","author_ids":[{"_id":"5e4554cbb7f6f522dc3156a1"},{"_id":"5e4692843577602830c4c5dc"}]}',
  level: 'info',
  timestamp: '2020-02-28T15:10:39.235Z'
}
{
  message: '>>>> printingEditionService.update(), with: printingEdition = {"_id":"5e46bd86b2b3d403c4db8fdf","title":"Three Comrades","description":"From the acclaimed author of All Quiet on the Western Front comes Three Comrades, a harrowing novel that follows a group of friends as they cope with upheaval in Germany between World Wars I and II.","cover_image":"sdgagsfg","type":0,"price":75,"currency":"USD","author_ids":[{"_id":"5e4554cbb7f6f522dc3156a1"},{"_id":"5e4692843577602830c4c5dc"}]}',
  level: 'info',
  timestamp: '2020-02-28T15:10:47.617Z'
}
{
  message: '>>>> printingEditionService.update(), result = false',
  level: 'error',
  timestamp: '2020-02-28T15:10:47.668Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-28T15:11:17.386Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-28T15:11:44.382Z'
}
{
  message: '>>>> printingEditionService.update(), with: printingEdition = {"_id":"5e46bd86b2b3d403c4db8fdf","title":"Three Comrades","description":"From the acclaimed author of All Quiet on the Western Front comes Three Comrades, a harrowing novel that follows a group of friends as they cope with upheaval in Germany between World Wars I and II.","cover_image":"sdgagsfg","type":0,"price":75,"currency":"USD","author_ids":[]}',
  level: 'info',
  timestamp: '2020-02-28T15:11:46.683Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-28T15:12:47.036Z'
}
{
  message: '>>>> printingEditionService.update(), with: printingEdition = {"_id":"5e46bd86b2b3d403c4db8fdf","title":"Three Comrades","description":"From the acclaimed author of All Quiet on the Western Front comes Three Comrades, a harrowing novel that follows a group of friends as they cope with upheaval in Germany between World Wars I and II.","cover_image":"sdgagsfg","type":0,"price":75,"currency":"USD","author_ids":[]}',
  level: 'info',
  timestamp: '2020-02-28T15:12:47.625Z'
}
{
  message: '>>>> printingEditionService.update(), result = false',
  level: 'error',
  timestamp: '2020-02-28T15:12:47.643Z'
}
{
  message: '>>>> printingEditionService.update(), with: printingEdition = {"_id":"5e46bd86b2b3d403c4db8fdf","title":"Three Comrades","description":"From the acclaimed author of All Quiet on the Western Front comes Three Comrades, a harrowing novel that follows a group of friends as they cope with upheaval in Germany between World Wars I and II.","cover_image":"sdgagsfg","type":0,"price":75,"currency":"USD","author_ids":[{"_id":"5e4554cbb7f6f522dc3156a1"},{"_id":"5e4692843577602830c4c5dc"}]}',
  level: 'info',
  timestamp: '2020-02-28T15:12:59.199Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-28T15:13:36.343Z'
}
{
  message: '>>>> printingEditionService.update(), with: printingEdition = {"_id":"5e46bd86b2b3d403c4db8fdf","title":"Three Comrades","description":"From the acclaimed author of All Quiet on the Western Front comes Three Comrades, a harrowing novel that follows a group of friends as they cope with upheaval in Germany between World Wars I and II.","cover_image":"sdgagsfg","type":0,"price":75,"currency":"USD","author_ids":[{"_id":"5e4554cbb7f6f522dc3156a1"},{"_id":"5e4692843577602830c4c5dc"}]}',
  level: 'info',
  timestamp: '2020-02-28T15:13:36.420Z'
}
{
  message: '>>>> printingEditionService.update(), result = false',
  level: 'error',
  timestamp: '2020-02-28T15:13:36.504Z'
}
{
  message: '>>>> printingEditionService.update(), with: printingEdition = {"_id":"5e46bd86b2b3d403c4db8fdf","title":"Three Comrades","description":"From the acclaimed author of All Quiet on the Western Front comes Three Comrades, a harrowing novel that follows a group of friends as they cope with upheaval in Germany between World Wars I and II.","cover_image":"sdgagsfg","type":0,"price":75,"currency":"USD","author_ids":[]}',
  level: 'info',
  timestamp: '2020-02-28T15:13:45.206Z'
}
{
  message: '>>>> authorService.getAuthors(), with: filter = {"searchString":"Victor","pageNumber":1,"pageSize":10}',
  level: 'info',
  timestamp: '2020-02-28T15:13:50.877Z'
}
{
  message: '>>>> printingEditionService.update(), with: printingEdition = {"_id":"5e46bd86b2b3d403c4db8fdf","title":"Three Comrades","description":"From the acclaimed author of All Quiet on the Western Front comes Three Comrades, a harrowing novel that follows a group of friends as they cope with upheaval in Germany between World Wars I and II.","cover_image":"sdgagsfg","type":0,"price":75,"currency":"USD","author_ids":[{"_id":"5e4554cbb7f6f522dc3156a1"},{"_id":"5e4692843577602830c4c5dc"}]}',
  level: 'info',
  timestamp: '2020-02-28T15:14:23.802Z'
}
{
  message: '>>>> authorService.getAuthors(), with: filter = {"searchString":"Victor","pageNumber":1,"pageSize":10}',
  level: 'info',
  timestamp: '2020-02-28T15:14:38.324Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-28T15:16:23.623Z'
}
{
  message: '>>>> printingEditionService.update(), with: printingEdition = {"_id":"5e46bd86b2b3d403c4db8fdf","title":"Three Comrades","description":"From the acclaimed author of All Quiet on the Western Front comes Three Comrades, a harrowing novel that follows a group of friends as they cope with upheaval in Germany between World Wars I and II.","cover_image":"sdgagsfg","type":0,"price":75,"currency":"USD","author_ids":[{"_id":"5e4554cbb7f6f522dc3156a1"},{"_id":"5e4692843577602830c4c5dc"}]}',
  level: 'info',
  timestamp: '2020-02-28T15:16:30.078Z'
}
{
  message: '>>>> printingEditionService.update(), result = false',
  level: 'error',
  timestamp: '2020-02-28T15:16:30.125Z'
}
{
  message: '>>>> authorService.getAuthors(), with: filter = {"searchString":"Victor","pageNumber":1,"pageSize":10}',
  level: 'info',
  timestamp: '2020-02-28T15:16:33.400Z'
}
{
  message: '>>>> printingEditionService.update(), with: printingEdition = {"_id":"5e46bd86b2b3d403c4db8fdf","title":"Three Comrades","description":"From the acclaimed author of All Quiet on the Western Front comes Three Comrades, a harrowing novel that follows a group of friends as they cope with upheaval in Germany between World Wars I and II.","cover_image":"sdgagsfg","type":0,"price":75,"currency":"USD","author_ids":[{"_id":"5e4692843577602830c4c5dc"}]}',
  level: 'info',
  timestamp: '2020-02-28T15:16:46.012Z'
}
{
  message: '>>>> authorService.getAuthors(), with: filter = {"searchString":"Victor","pageNumber":1,"pageSize":10}',
  level: 'info',
  timestamp: '2020-02-28T15:16:49.000Z'
}
{
  message: '>>>> authorService.getAuthors(), with: filter = {"searchString":"weber","pageNumber":1,"pageSize":10}',
  level: 'info',
  timestamp: '2020-02-28T15:17:07.150Z'
}
{
  message: '>>>> printingEditionService.update(), with: printingEdition = {"_id":"5e46bd86b2b3d403c4db8fdf","title":"Three Comrades","description":"From the acclaimed author of All Quiet on the Western Front comes Three Comrades, a harrowing novel that follows a group of friends as they cope with upheaval in Germany between World Wars I and II.","cover_image":"sdgagsfg","type":0,"price":75,"currency":"USD","author_ids":[{"_id":"5e4d09f63696501a00e2b31a"}]}',
  level: 'info',
  timestamp: '2020-02-28T15:17:29.913Z'
}
{
  message: '>>>> authorService.getAuthors(), with: filter = {"searchString":"weber","pageNumber":1,"pageSize":10}',
  level: 'info',
  timestamp: '2020-02-28T15:17:48.806Z'
}
{
  message: '>>>> authorService.getAuthors(), with: filter = {"searchString":"stend","pageNumber":1,"pageSize":10}',
  level: 'info',
  timestamp: '2020-02-28T15:18:06.415Z'
}
{
  message: '>>>> printingEditionService.update(), with: printingEdition = {"_id":"5e46bd86b2b3d403c4db8fdf","title":"Three Comrades","description":"From the acclaimed author of All Quiet on the Western Front comes Three Comrades, a harrowing novel that follows a group of friends as they cope with upheaval in Germany between World Wars I and II.","cover_image":"sdgagsfg","type":0,"price":75,"currency":"USD","author_ids":[]}',
  level: 'info',
  timestamp: '2020-02-28T15:18:19.734Z'
}
{
  message: '>>>> authorService.getAuthors(), with: filter = {"searchString":"stend","pageNumber":1,"pageSize":10}',
  level: 'info',
  timestamp: '2020-02-28T15:18:23.290Z'
}
{
  message: '>>>> printingEditionService.update(), with: printingEdition = {"_id":"5e46bd86b2b3d403c4db8fdf","title":"Three Comrades","description":"From the acclaimed author of All Quiet on the Western Front comes Three Comrades, a harrowing novel that follows a group of friends as they cope with upheaval in Germany between World Wars I and II.","cover_image":"sdgagsfg","type":0,"price":75,"currency":"USD","author_ids":[{"_id":"5e4d09f63696501a00e2b31a"},{"_id":"5e455520b7f6f522dc3156a4"}]}',
  level: 'info',
  timestamp: '2020-02-28T15:19:08.982Z'
}
{
  message: '>>>> authorService.getAuthors(), with: filter = {"searchString":"stend","pageNumber":1,"pageSize":10}',
  level: 'info',
  timestamp: '2020-02-28T15:19:20.833Z'
}
{
  message: '>>>> authorService.getAuthors(), with: filter = {"searchString":"ale","pageNumber":1,"pageSize":10}',
  level: 'info',
  timestamp: '2020-02-28T15:19:28.152Z'
}
{
  message: '>>>> printingEditionService.update(), with: printingEdition = {"_id":"5e46bd86b2b3d403c4db8fdf","title":"Three Comrades","description":"From the acclaimed author of All Quiet on the Western Front comes Three Comrades, a harrowing novel that follows a group of friends as they cope with upheaval in Germany between World Wars I and II.","cover_image":"sdgagsfg","type":0,"price":75,"currency":"USD","author_ids":[{"_id":"5e4d09f63696501a00e2b31a"}]}',
  level: 'info',
  timestamp: '2020-02-28T15:19:39.034Z'
}
{
  message: '>>>> authorService.getAuthors(), with: filter = {"searchString":"ale","pageNumber":1,"pageSize":10}',
  level: 'info',
  timestamp: '2020-02-28T15:19:41.325Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-28T15:20:17.530Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-28T15:20:32.368Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-28T15:33:50.802Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-28T15:35:33.182Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-28T15:37:57.020Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-28T15:39:00.355Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-28T15:39:53.234Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-28T15:52:44.532Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-28T15:53:33.947Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-28T15:54:19.870Z'
}
{
  message: '>>>> authorService.getAuthors(), with: filter = {"pageNumber":1,"pageSize":10}',
  level: 'info',
  timestamp: '2020-02-28T15:55:08.532Z'
}
{
  message: '>>>> authorService.getAuthors(), with: filter = {"pageNumber":2,"pageSize":10}',
  level: 'info',
  timestamp: '2020-02-28T15:55:31.483Z'
}
{
  message: '>>>> authorService.update(), with: author = {"name":"Victor Hugo","_id":"5e4554cbb7f6f522dc3156a1"}',
  level: 'info',
  timestamp: '2020-02-28T16:03:17.403Z'
}
{
  message: '>>>> printingEditionService.create(), with: printingEditionParam = {"_id":"5e46bd86b2b3d403c4db8fdf","title":" Komarr","description":"From the acclaimed author of All Quiet on the Western Front comes Three Comrades, a harrowing novel that follows a group of friends as they cope with upheaval in Germany between World Wars I and II.","cover_image":"sdgagsfg","type":0,"price":90,"currency":"USD","author_ids":[{"_id":"5e4bc6f7ff84370d80484184"},{"_id":"5e4501706461544ec45595a6"}]}',
  level: 'info',
  timestamp: '2020-02-28T16:07:50.835Z'
}
{
  message: '>>>> printingEditionService.create(), with: printingEditionParam = {"title":" Komarr","description":"From the acclaimed author of All Quiet on the Western Front comes Three Comrades, a harrowing novel that follows a group of friends as they cope with upheaval in Germany between World Wars I and II.","cover_image":"sdgagsfg","type":0,"price":90,"currency":"USD","author_ids":[{"_id":"5e4bc6f7ff84370d80484184"},{"_id":"5e4501706461544ec45595a6"}]}',
  level: 'info',
  timestamp: '2020-02-28T16:08:02.410Z'
}
{
  message: '>>>> authorService.getAuthors(), with: filter = {"searchString":"Keyes","pageNumber":1,"pageSize":10}',
  level: 'info',
  timestamp: '2020-02-28T16:08:42.551Z'
}
{
  message: '>>>> authorService.getAuthors(), with: filter = {"searchString":"K","pageNumber":1,"pageSize":10}',
  level: 'info',
  timestamp: '2020-02-28T16:08:53.403Z'
}
{
  message: '>>>> authorService.update(), with: author = {"name":"Lois McMaster Bujold","_id":"5e4554f0b7f6f522dc3156a3"}',
  level: 'info',
  timestamp: '2020-02-28T16:11:27.533Z'
}
{
  message: '>>>> authorService.update(), with: author = {"name":"Lois McMaster Bujold","_id":"5e4554f0b7f6f522dc3156a3"}',
  level: 'info',
  timestamp: '2020-02-28T16:11:32.553Z'
}
{
  message: '>>>> authorService.update(), result = false',
  level: 'error',
  timestamp: '2020-02-28T16:11:32.556Z'
}
{
  message: '>>>> authorService.getAuthors(), with: filter = {"searchString":"lois","pageNumber":1,"pageSize":10}',
  level: 'info',
  timestamp: '2020-02-28T16:11:44.669Z'
}
{
  message: '>>>> authorService.getAuthors(), with: filter = {"searchString":"Lois","pageNumber":1,"pageSize":10}',
  level: 'info',
  timestamp: '2020-02-28T16:12:26.250Z'
}
{
  message: '>>>> authorService.getAuthors(), with: filter = {"searchString":"is","pageNumber":1,"pageSize":10}',
  level: 'info',
  timestamp: '2020-02-28T16:12:36.370Z'
}
{
  message: '>>>> authorService.getAuthors(), with: filter = {"searchString":"gab","pageNumber":1,"pageSize":10}',
  level: 'info',
  timestamp: '2020-02-28T16:12:48.067Z'
}
{
  message: '>>>> authorService.getAuthors(), with: filter = {"searchString":"al","pageNumber":1,"pageSize":10}',
  level: 'info',
  timestamp: '2020-02-28T16:13:48.444Z'
}
{
  message: '>>>> authorService.getAuthors(), with: filter = {"searchString":"lo","pageNumber":1,"pageSize":10}',
  level: 'info',
  timestamp: '2020-02-28T16:13:55.229Z'
}
{
  message: '>>>> authorService.getAuthors(), with: filter = {"searchString":"Shakespeare","pageNumber":1,"pageSize":10}',
  level: 'info',
  timestamp: '2020-02-28T16:14:57.763Z'
}
{
  message: '>>>> authorService.getAuthors(), with: filter = {"searchString":"Shakespeare","pageNumber":1,"pageSize":10}',
  level: 'info',
  timestamp: '2020-02-28T16:15:43.524Z'
}
{
  message: '>>>> authorService.getAuthors(), with: filter = {"searchString":"lois","pageNumber":1,"pageSize":10}',
  level: 'info',
  timestamp: '2020-02-28T16:15:48.863Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-28T16:28:58.510Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-28T16:44:07.207Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-28T16:44:34.731Z'
}
{
  message: '>>>> authorService.getAuthors(), with: filter = {"pageNumber":1,"pageSize":10}',
  level: 'info',
  timestamp: '2020-02-28T16:45:18.702Z'
}
{
  message: '>>>> authorService.getAuthors(), with: filter = {"pageNumber":3,"pageSize":10}',
  level: 'info',
  timestamp: '2020-02-28T16:45:27.440Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-28T16:52:35.419Z'
}
{
  message: '>>>> authService.logIn(), with: model = {"email":"morgenshtern1988@gmail.com","passwordHash":"25012005"}',
  level: 'info',
  timestamp: '2020-02-28T16:55:26.273Z'
}
{
  message: '>>>> authService.logIn(), with: model = {"email":"morgensadscfhtern1988@gmail.com","passwordHash":"25012005"}',
  level: 'info',
  timestamp: '2020-02-28T16:56:48.125Z'
}
{
  message: '>>>> authService.logIn(), result = user is not found',
  level: 'error',
  timestamp: '2020-02-28T16:56:48.129Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-28T17:06:22.537Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-02-28T17:16:01.847Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-02T09:26:56.788Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-02T10:04:19.892Z'
}
{
  message: '>>>> authorService.getAuthors(), with: filter = {"pageNumber":3,"pageSize":10}',
  level: 'info',
  timestamp: '2020-03-02T10:04:47.800Z'
}
{
  message: '>>>> authorService.getAuthors(), with: filter = {"searchString":"au","pageNumber":3,"pageSize":10}',
  level: 'info',
  timestamp: '2020-03-02T10:05:22.901Z'
}
{
  message: '>>>> authorService.getAuthors(), with: filter = {"searchString":"au","pageNumber":1,"pageSize":10}',
  level: 'info',
  timestamp: '2020-03-02T10:05:29.335Z'
}
{
  message: '>>>> authorService.getAuthors(), with: filter = {"searchString":"some","pageNumber":1,"pageSize":10}',
  level: 'info',
  timestamp: '2020-03-02T10:05:41.770Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-02T10:06:26.552Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-02T10:07:19.811Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-02T10:08:31.793Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-02T10:10:05.379Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-02T10:12:00.373Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-02T10:13:49.520Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-02T10:18:34.862Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-02T10:19:46.882Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-02T10:20:14.112Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-02T10:20:57.431Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-02T10:21:26.012Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-02T10:24:43.533Z'
}
{
  message: '>>>> authorService.getAuthors(), with: filter = {"pageNumber":1,"pageSize":30}',
  level: 'info',
  timestamp: '2020-03-02T10:27:38.658Z'
}
{
  message: '>>>> authorService.getAuthors(), with: filter = {"searchString":"krol","pageNumber":1,"pageSize":30}',
  level: 'info',
  timestamp: '2020-03-02T10:28:03.825Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-02T10:29:00.567Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-02T10:40:17.442Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-02T10:46:45.203Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-02T10:48:28.446Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-02T10:48:47.982Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-02T11:07:59.288Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-02T11:09:19.100Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-02T11:09:33.610Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-02T11:10:04.972Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-02T11:10:46.205Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-02T11:11:14.479Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-02T11:11:47.097Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-02T11:12:35.018Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-02T11:13:17.714Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-02T11:13:51.655Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-02T11:20:30.012Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-02T11:21:43.798Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-02T11:28:25.146Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-02T11:28:54.717Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-02T11:29:11.379Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-02T11:30:13.386Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-02T11:31:11.466Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-02T11:31:38.316Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-02T11:32:16.106Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-02T11:35:12.832Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-02T11:49:27.658Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-02T11:50:52.804Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-02T11:51:06.508Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-02T12:13:51.366Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-02T12:22:44.972Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-02T12:25:40.099Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-02T12:26:17.942Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-02T12:38:17.554Z'
}
{
  message: '>>>> authorService.getAuthors(), with: filter = {"pageNumber":1,"pageSize":30}',
  level: 'info',
  timestamp: '2020-03-02T12:47:23.519Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-02T12:59:15.438Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-02T12:59:22.831Z'
}
{
  message: '>>>> authorService.getAuthors(), with: filter = {"searchString":"krol","pageNumber":1,"pageSize":30}',
  level: 'info',
  timestamp: '2020-03-02T12:59:23.698Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-02T12:59:52.930Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-02T13:00:51.199Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-02T13:01:48.901Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-02T13:03:04.283Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-02T13:04:37.113Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-02T13:06:23.944Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-02T13:07:02.808Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-02T13:07:32.660Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-02T13:08:37.005Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-02T13:18:14.788Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-02T13:18:39.468Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-02T13:22:03.497Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-02T13:44:48.584Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-02T13:45:47.241Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-02T13:46:46.280Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-02T13:48:06.965Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-02T13:50:03.832Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-02T13:50:19.503Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-02T13:52:08.931Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-02T13:53:28.544Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-02T14:11:31.662Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-02T14:12:12.887Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-02T14:12:23.163Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-02T14:13:15.534Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-02T14:13:57.062Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-02T14:14:53.398Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-02T14:15:34.968Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-02T14:16:14.280Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-02T14:17:21.612Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-02T14:18:54.676Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-02T14:19:34.867Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-02T14:21:17.404Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-02T14:50:35.676Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-02T14:50:54.369Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-02T14:51:48.623Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-02T14:52:54.130Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-02T14:53:45.648Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-02T14:54:32.933Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-02T14:56:00.255Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-02T14:57:59.628Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-02T14:59:55.643Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-02T15:00:04.355Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-02T15:01:31.279Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-02T15:01:41.716Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-02T15:05:20.911Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-02T15:09:29.120Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-02T15:53:01.160Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-02T15:55:53.123Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-02T15:56:12.934Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-02T15:56:57.437Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-02T15:57:15.787Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-02T15:58:18.281Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-02T15:58:30.556Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-02T16:00:31.246Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-02T16:00:51.536Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-02T16:02:19.303Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-02T16:03:46.355Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-02T16:04:45.515Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-02T16:05:18.801Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-02T16:05:34.750Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-02T16:05:48.035Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-02T16:06:22.522Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-02T16:07:34.788Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-02T16:07:50.038Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-02T16:08:16.806Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-02T16:08:33.287Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-02T16:09:43.226Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-02T16:11:31.660Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-02T16:11:57.387Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-02T16:12:37.475Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-02T16:14:32.296Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-02T16:15:24.263Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-02T16:16:00.722Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-02T16:17:45.135Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-03T07:52:44.420Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-03T07:54:03.530Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-03T07:54:55.226Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-03T07:57:14.300Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-03T07:57:44.996Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-03T07:58:12.742Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-03T07:58:54.716Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-03T07:59:08.668Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-03T07:59:27.882Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-03T08:07:28.133Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-03T08:08:24.525Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-03T08:08:54.981Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-03T08:09:12.803Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-03T08:13:16.484Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-03T10:29:39.465Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-03T10:30:03.528Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-03T10:31:47.505Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-03T10:33:22.605Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-03T10:34:01.623Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-03T10:35:23.593Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-03T10:35:39.395Z'
}
{
  message: '>>>> authorService.getAuthors(), with: filter = {"searchString":"weber","pageNumber":1,"pageSize":30}',
  level: 'info',
  timestamp: '2020-03-03T10:36:29.352Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-03T10:36:53.644Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-03T10:38:18.515Z'
}
{
  message: '>>>> authorService.create(), with: author = {"name":"Terry Pratchett"}',
  level: 'info',
  timestamp: '2020-03-03T10:39:44.291Z'
}
{
  message: '>>>> authorService.create(), with: author = {"name":"Jeffrey Richter"}',
  level: 'info',
  timestamp: '2020-03-03T10:40:41.051Z'
}
{
  message: '>>>> authorService.create(), with: author = {"name":"Fyodor Dostoevsky"}',
  level: 'info',
  timestamp: '2020-03-03T10:41:18.901Z'
}
{
  message: '>>>> authorService.create(), with: author = {"name":"Dante Alighieri"}',
  level: 'info',
  timestamp: '2020-03-03T10:41:39.473Z'
}
{
  message: '>>>> authorService.create(), with: author = {"name":"Leo Tolstoy"}',
  level: 'info',
  timestamp: '2020-03-03T10:41:52.161Z'
}
{
  message: '>>>> authorService.create(), with: author = {"name":"Victor Hugo"}',
  level: 'info',
  timestamp: '2020-03-03T10:42:07.311Z'
}
{
  message: '>>>> authorService.create(), with: author = {"name":"William Shakespeare"}',
  level: 'info',
  timestamp: '2020-03-03T10:42:21.820Z'
}
{
  message: '>>>> authorService.create(), with: author = {"name":"Stendhal"}',
  level: 'info',
  timestamp: '2020-03-03T10:42:54.358Z'
}
{
  message: '>>>> authorService.create(), with: author = {"name":"Alexander Pushkin"}',
  level: 'info',
  timestamp: '2020-03-03T10:43:14.960Z'
}
{
  message: '>>>> authorService.create(), with: author = {"name":"Franz Kafka"}',
  level: 'info',
  timestamp: '2020-03-03T10:43:36.634Z'
}
{
  message: '>>>> authorService.create(), with: author = {"name":"Anton Chekhov"}',
  level: 'info',
  timestamp: '2020-03-03T10:43:48.066Z'
}
{
  message: '>>>> authorService.create(), with: author = {"name":"J.R.R. Tolkien"}',
  level: 'info',
  timestamp: '2020-03-03T10:44:04.592Z'
}
{
  message: '>>>> printingEditionService.create(), with: printingEditionParam = {"title":"The Lord of the Rings","description":"ll three parts of the epic masterpiece The Lord of the Rings – The Fellowship of the Ring, The Two Towers & The Return of the King – available as one download, featuring the definitive edition of the text, hyperlinked footnotes and page references, and 3 maps including a detailed map of Middle-earth.","cover_image":"C:/assets/image","type":0,"price":13.9,"currency":"USD","author_ids":[{"_id":"5e5e34f4309c2333c06e11bc"}]}',
  level: 'info',
  timestamp: '2020-03-03T10:46:47.744Z'
}
{
  message: '>>>> authorService.getAuthors(), with: filter = {"searchString":"weber","pageNumber":1,"pageSize":30}',
  level: 'info',
  timestamp: '2020-03-03T10:48:14.600Z'
}
{
  message: '>>>> authorService.getAuthors(), with: filter = {"pageNumber":1,"pageSize":30}',
  level: 'info',
  timestamp: '2020-03-03T10:48:21.373Z'
}
{
  message: '>>>> authorService.getAuthors(), with: filter = {"searchString":"tol","pageNumber":1,"pageSize":30}',
  level: 'info',
  timestamp: '2020-03-03T10:48:38.483Z'
}
{
  message: '>>>> printingEditionService.create(), with: printingEditionParam = {"title":"The Brothers Karamazov","description":"The Brothers Karamasov is a murder mystery, a courtroom drama, and an exploration of erotic rivalry in a series of triangular love affairs involving the “wicked and sentimental” Fyodor Pavlovich Karamazov and his three sons―the impulsive and sensual Dmitri; the coldly rational Ivan; and the healthy, red-cheeked young novice Alyosha.","cover_image":"C:/assets/image","type":0,"price":15,"currency":"USD","author_ids":[{"_id":"5e5e344e309c2333c06e11b3"}]}',
  level: 'info',
  timestamp: '2020-03-03T10:50:05.856Z'
}
{
  message: `>>>> printingEditionService.create(), with: printingEditionParam = {"title":"Crime and Punishment","description":"The two years before he wrote Crime and Punishment (1866) had been bad ones for Dostoyevsky. His wife and brother had died; the magazine he and his brother had started, Epoch, collapsed under its load of debt; and he was threatened with debtor's prison. With an advance that he managed to wangle for an unwritten novel, he fled to Wiesbaden, hoping to win enough at the roulette table to get himself out of debt. Instead, he lost all his money; he had to pawn his clothes and beg friends for loans to pay his hotel bill and get back to Russia. One of his begging letters went to a magazine editor, asking for an advance on yet another unwritten novel — which he described as Crime and Punishment.","cover_image":"C:/assets/image","type":0,"price":10,"currency":"USD","author_ids":[{"_id":"5e5e344e309c2333c06e11b3"}]}`,
  level: 'info',
  timestamp: '2020-03-03T10:50:51.789Z'
}
{
  message: '>>>> authorService.getAuthors(), with: filter = {"searchString":"tols","pageNumber":1,"pageSize":30}',
  level: 'info',
  timestamp: '2020-03-03T10:51:02.021Z'
}
{
  message: '>>>> authorService.getAuthors(), with: filter = {"searchString":"dos","pageNumber":1,"pageSize":30}',
  level: 'info',
  timestamp: '2020-03-03T10:51:37.987Z'
}
{
  message: '>>>> printingEditionService.create(), with: printingEditionParam = {"title":"The Idiot","description":"Richard Pevear and Larissa Volokhonsky’s masterful translation of The Idiot is destined to stand with their versions of Crime and Punishment, The Brothers Karamazov, and Demons as the definitive Dostoevsky in English.","cover_image":"C:/assets/image","type":0,"price":25,"currency":"USD","author_ids":[{"_id":"5e5e344e309c2333c06e11b3"}]}',
  level: 'info',
  timestamp: '2020-03-03T10:52:35.443Z'
}
{
  message: '>>>> printingEditionService.create(), with: printingEditionParam = {"title":"CLR via C#","description":"Dig deep and master the intricacies of the common language runtime, C#, and .NET development. Led by programming expert Jeffrey Richter, a longtime consultant to the Microsoft .NET team - you’ll gain pragmatic insights for building robust, reliable, and responsive apps and components.","cover_image":"C:/assets/image","type":0,"price":125,"currency":"USD","author_ids":[{"_id":"5e5e3429309c2333c06e11b2"},{"_id":"5e5e348d309c2333c06e11b7"}]}',
  level: 'info',
  timestamp: '2020-03-03T10:54:15.028Z'
}
{
  message: `>>>> printingEditionService.create(), with: printingEditionParam = {"title":"The Divine Comedy","description":"The Divine Comedy is the precursor of modern literature, and this translation - decades in the making - gives us the entire epic as a single, coherent and compulsively listenable lyric poem. Written in the early 14th century and completed in 1321, the year of Dante's death, The Divine Comedy is perhaps the greatest work of epic poetry ever composed","cover_image":"C:/assets/image","type":0,"price":54,"currency":"USD","author_ids":[{"_id":"5e5e3463309c2333c06e11b4"},{"_id":"5e5e348d309c2333c06e11b7"}]}`,
  level: 'info',
  timestamp: '2020-03-03T10:56:31.591Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-03T11:03:07.492Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-03T11:06:50.516Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-03T11:13:30.419Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-03T11:15:22.736Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-03T11:15:46.765Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-03T12:08:10.930Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-03T12:50:09.851Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-03T12:56:02.949Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-03T12:57:04.887Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-03T12:57:12.566Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-03T12:58:05.430Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-03T12:59:48.681Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-03T13:01:51.031Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-03T13:03:25.866Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-03T13:03:38.976Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-03T13:04:34.475Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-03T13:04:56.189Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-03T13:10:58.069Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-03T13:11:19.841Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-03T13:57:24.761Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-04T07:30:41.924Z'
}
{
  message: '>>>> printingEditionService.create(), with: printingEditionParam = {"title":"The Metamorphosis","description":"The Metamorphosis (original German title: Die Verwandlung) is a short novel by Franz Kafka, first published in 1915. It is often cited as one of the seminal works of fiction of the 20th century and is widely studied in colleges and universities across the western world. The story begins with a traveling salesman, Gregor Samsa, waking to find himself transformed into an insect.","cover_image":"C:/assets/image","type":0,"price":3.99,"currency":"USD","author_ids":[{"_id":"5e5e34d8309c2333c06e11ba"}]}',
  level: 'info',
  timestamp: '2020-03-04T07:33:08.069Z'
}
{
  message: '>>>> printingEditionService.update(), with: printingEdition = {"title":"The Metamorphosis","description":"The Metamorphosis (original German title: Die Verwandlung) is a short novel by Franz Kafka, first published in 1915. It is often cited as one of the seminal works of fiction of the 20th century and is widely studied in colleges and universities across the western world. The story begins with a traveling salesman, Gregor Samsa, waking to find himself transformed into an insect.","cover_image":"C:/assets/image","type":0,"price":3.99,"currency":"USD","author_ids":[{"_id":"5e5e34e4309c2333c06e11bb"}]}',
  level: 'info',
  timestamp: '2020-03-04T07:34:48.410Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-04T07:36:38.047Z'
}
{
  message: '>>>> printingEditionService.update(), with: printingEdition = {"title":"The Metamorphosis","description":"The Metamorphosis (original German title: Die Verwandlung) is a short novel by Franz Kafka, first published in 1915. It is often cited as one of the seminal works of fiction of the 20th century and is widely studied in colleges and universities across the western world. The story begins with a traveling salesman, Gregor Samsa, waking to find himself transformed into an insect.","cover_image":"C:/assets/image","type":0,"price":3.99,"currency":"USD","author_ids":[{"_id":"5e5e34e4309c2333c06e11bb"}]}',
  level: 'info',
  timestamp: '2020-03-04T07:36:41.444Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-04T07:36:56.674Z'
}
{
  message: '>>>> printingEditionService.update(), with: printingEdition = {"title":"The Metamorphosis","description":"The Metamorphosis (original German title: Die Verwandlung) is a short novel by Franz Kafka, first published in 1915. It is often cited as one of the seminal works of fiction of the 20th century and is widely studied in colleges and universities across the western world. The story begins with a traveling salesman, Gregor Samsa, waking to find himself transformed into an insect.","cover_image":"C:/assets/image","type":0,"price":3.99,"currency":"USD","author_ids":[{"_id":"5e5e34e4309c2333c06e11bb"}]}',
  level: 'info',
  timestamp: '2020-03-04T07:37:02.566Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-04T07:37:19.729Z'
}
{
  message: '>>>> printingEditionService.update(), with: printingEdition = {"title":"The Metamorphosis","description":"The Metamorphosis (original German title: Die Verwandlung) is a short novel by Franz Kafka, first published in 1915. It is often cited as one of the seminal works of fiction of the 20th century and is widely studied in colleges and universities across the western world. The story begins with a traveling salesman, Gregor Samsa, waking to find himself transformed into an insect.","cover_image":"C:/assets/image","type":0,"price":3.99,"currency":"USD","author_ids":[{"_id":"5e5e34e4309c2333c06e11bb"}]}',
  level: 'info',
  timestamp: '2020-03-04T07:37:25.858Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-04T07:38:05.240Z'
}
{
  message: '>>>> printingEditionService.update(), with: printingEdition = {"title":"The Metamorphosis","description":"The Metamorphosis (original German title: Die Verwandlung) is a short novel by Franz Kafka, first published in 1915. It is often cited as one of the seminal works of fiction of the 20th century and is widely studied in colleges and universities across the western world. The story begins with a traveling salesman, Gregor Samsa, waking to find himself transformed into an insect.","cover_image":"C:/assets/image","type":0,"price":3.99,"currency":"USD","author_ids":[{"_id":"5e5e34e4309c2333c06e11bb"}]}',
  level: 'info',
  timestamp: '2020-03-04T07:38:05.405Z'
}
{
  message: '>>>> printingEditionService.update(), with: printingEdition = {"_id":"5e5f59b4b75df521ccdd6a0b","title":"The Metamorphosis","description":"The Metamorphosis (original German title: Die Verwandlung) is a short novel by Franz Kafka, first published in 1915. It is often cited as one of the seminal works of fiction of the 20th century and is widely studied in colleges and universities across the western world. The story begins with a traveling salesman, Gregor Samsa, waking to find himself transformed into an insect.","cover_image":"C:/assets/image","type":0,"price":3.99,"currency":"USD","author_ids":[{"_id":"5e5e34e4309c2333c06e11bb"}]}',
  level: 'info',
  timestamp: '2020-03-04T07:39:01.639Z'
}
{
  message: '>>>> authorService.getAuthors(), with: filter = {"searchString":"cheh","pageNumber":1,"pageSize":30}',
  level: 'info',
  timestamp: '2020-03-04T07:39:33.629Z'
}
{
  message: '>>>> authorService.getAuthors(), with: filter = {"searchString":"che","pageNumber":1,"pageSize":30}',
  level: 'info',
  timestamp: '2020-03-04T07:39:38.757Z'
}
{
  message: '>>>> authorService.getAuthors(), with: filter = {"searchString":"anto","pageNumber":1,"pageSize":30}',
  level: 'info',
  timestamp: '2020-03-04T07:39:51.142Z'
}
{
  message: '>>>> authorService.getAuthors(), with: filter = {"searchString":"kaf","pageNumber":1,"pageSize":30}',
  level: 'info',
  timestamp: '2020-03-04T07:39:59.853Z'
}
{
  message: '>>>> printingEditionService.update(), with: printingEdition = {"_id":"5e5f59b4b75df521ccdd6a0b","title":"The Metamorphosis","description":"The Metamorphosis (original German title: Die Verwandlung) is a short novel by Franz Kafka, first published in 1915. It is often cited as one of the seminal works of fiction of the 20th century and is widely studied in colleges and universities across the western world. The story begins with a traveling salesman, Gregor Samsa, waking to find himself transformed into an insect.","cover_image":"C:/assets/image","type":0,"price":3.99,"currency":"USD","author_ids":[{"_id":"5e5e34e4309c2333c06e11bb"},{"_id":"5e5e34d8309c2333c06e11ba"}]}',
  level: 'info',
  timestamp: '2020-03-04T07:40:33.528Z'
}
{
  message: '>>>> authorService.getAuthors(), with: filter = {"searchString":"kaf","pageNumber":1,"pageSize":30}',
  level: 'info',
  timestamp: '2020-03-04T07:40:45.029Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-04T07:41:50.941Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-04T07:41:57.445Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-04T07:43:33.705Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-04T07:44:04.863Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-04T07:45:30.079Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-04T07:46:08.058Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-04T07:46:37.226Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-04T07:46:52.924Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-04T09:06:14.350Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-04T09:22:57.945Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-04T09:30:12.788Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-04T09:36:58.606Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-04T09:37:34.199Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-04T09:50:23.287Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-04T09:58:36.087Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-04T10:22:01.386Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-04T10:23:29.572Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-04T10:24:08.384Z'
}
{
  message: '>>>> authService.logIn(), with: model = {"email":"paderborner2019@gmail.com","passwordHash":"25012005"}',
  level: 'info',
  timestamp: '2020-03-04T10:51:13.771Z'
}
{
  message: '>>>> authService.logIn(), with: model = {"email":"paderborner2019@gmail.com","passwordHash":"25012005"}',
  level: 'info',
  timestamp: '2020-03-04T11:06:24.869Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-04T11:20:04.688Z'
}
{
  message: '>>>> authService.register(), with: user = {"userName":"params","email":"params@yandex.com","avatar":"C:/Anuitex/avatar","firstName":"reove","lastName":"test","passwordHash":"25012005"}',
  level: 'info',
  timestamp: '2020-03-04T11:20:05.180Z'
}
{
  message: '>>>> authService.register(), with: user = {"userName":"kjfgkjfg","email":"params@yandex.com","avatar":"C:/Anuitex/avatar","firstName":"reove","lastName":"test","passwordHash":"25012005"}',
  level: 'info',
  timestamp: '2020-03-04T11:20:54.850Z'
}
{
  message: '>>>> authService.register(), with: user = {"userName":"kjfgkjfg","email":"params@yandex.com","avatar":"C:/Anuitex/avatar","firstName":"reove","lastName":"test","passwordHash":"25012005"}',
  level: 'info',
  timestamp: '2020-03-04T11:21:10.957Z'
}
{
  message: '>>>> authService.register(), with: user = {"userName":"kjfgkjfg","email":"params@yandex.com","avatar":"C:/Anuitex/avatar","firstName":"reove","lastName":"test","passwordHash":"25012005"}',
  level: 'info',
  timestamp: '2020-03-04T11:21:29.775Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-04T11:36:46.686Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-04T11:37:37.669Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-04T11:46:37.772Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-04T11:50:57.987Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-04T12:00:52.684Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-04T12:08:52.170Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-04T12:09:50.768Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-04T12:15:33.417Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-04T12:17:42.426Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-04T12:18:55.296Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-04T12:20:41.784Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-04T14:25:42.473Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-04T14:26:23.330Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-04T14:27:26.291Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-04T14:28:25.021Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-04T14:29:11.620Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-04T14:30:14.262Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-04T14:43:33.671Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-04T14:44:21.590Z'
}
{
  message: '>>>> authService.register(), with: user = {"user_id":"5e3c19a004abf333fc8a2668","items":{"OrderItem":[{"printing_edition_id":"5e46bd86b2b3d403c4db8fdf","count":2,"price":150,"currency":"USD"},{"printing_edition_id":"5e4ceab1c4321b25fc7d58b1","count":1,"price":230,"currency":"USD"}]},"payment_info":{"Payment":{"transaction_id":"gcfhjdsagcfg"}}}',
  level: 'info',
  timestamp: '2020-03-04T14:45:54.283Z'
}
{
  message: '>>>> authService.register(), invalid data = instance requires property "userName",instance requires property "email",instance requires property "firstName",instance requires property "lastName",instance requires property "passwordHash"',
  level: 'error',
  timestamp: '2020-03-04T14:45:54.287Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-04T14:46:34.190Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-04T15:05:21.754Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-04T15:05:52.009Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-04T15:07:37.371Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-04T15:10:10.574Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-04T15:11:18.677Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-04T15:11:41.326Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-04T15:23:18.032Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-04T15:23:58.632Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-04T15:25:23.017Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-04T15:28:54.848Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-04T15:29:46.354Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-04T15:37:30.625Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-04T15:41:15.028Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-04T15:41:33.406Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-04T15:54:37.518Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-04T15:56:46.722Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-04T15:57:47.057Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-05T09:05:30.521Z'
}
{
  message: '>>>> authService.logIn(), with: model = {"email":"morgenshbvgfdsbfdbdastern1988@gmail.com","passwordHash":"25012005"}',
  level: 'info',
  timestamp: '2020-03-05T09:05:34.943Z'
}
{
  message: '>>>> authService.logIn(), result = user is not found',
  level: 'error',
  timestamp: '2020-03-05T09:05:34.985Z'
}
{
  message: '>>>> authService.logIn(), with: model = {"email":"paderborner2019@gmail.com","passwordHash":"25012005"}',
  level: 'info',
  timestamp: '2020-03-05T09:21:02.342Z'
}
{
  message: '>>>> authService.logIn(), with: model = {"email":"paderborner2019@gmail.com","passwordHash":"dsfg"}',
  level: 'info',
  timestamp: '2020-03-05T09:49:02.371Z'
}
{
  message: '>>>> authService.logIn(), result = invalid password',
  level: 'error',
  timestamp: '2020-03-05T09:49:02.470Z'
}
{
  message: '>>>> authService.logIn(), with: model = {"email":"morgenshtern1988@gmail .com","passwordHash":"25012005"}',
  level: 'info',
  timestamp: '2020-03-05T10:00:39.553Z'
}
{
  message: '>>>> authService.logIn(), result = user is not found',
  level: 'error',
  timestamp: '2020-03-05T10:00:39.572Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-05T10:01:10.406Z'
}
{
  message: '>>>> authService.register(), with: user = {}',
  level: 'info',
  timestamp: '2020-03-05T10:06:28.265Z'
}
{
  message: '>>>> authService.register(), invalid data = instance requires property "userName",instance requires property "email",instance requires property "firstName",instance requires property "lastName",instance requires property "passwordHash"',
  level: 'error',
  timestamp: '2020-03-05T10:06:28.268Z'
}
{
  message: '>>>> authService.register(), with: user = {}',
  level: 'info',
  timestamp: '2020-03-05T10:06:33.668Z'
}
{
  message: '>>>> authService.register(), invalid data = instance requires property "userName",instance requires property "email",instance requires property "firstName",instance requires property "lastName",instance requires property "passwordHash"',
  level: 'error',
  timestamp: '2020-03-05T10:06:33.676Z'
}
{
  message: '>>>> authService.logIn(), with: model = {}',
  level: 'info',
  timestamp: '2020-03-05T10:07:22.195Z'
}
{
  message: '>>>> authService.logIn(), invalid data = instance requires property "email",instance requires property "passwordHash"',
  level: 'error',
  timestamp: '2020-03-05T10:07:22.197Z'
}
{
  message: '>>>> authService.logIn(), with: model = {}',
  level: 'info',
  timestamp: '2020-03-05T10:08:57.235Z'
}
{
  message: '>>>> authService.logIn(), invalid data = instance requires property "email",instance requires property "passwordHash"',
  level: 'error',
  timestamp: '2020-03-05T10:08:57.244Z'
}
{
  message: '>>>> authService.logIn(), with: model = {}',
  level: 'info',
  timestamp: '2020-03-05T10:08:57.832Z'
}
{
  message: '>>>> authService.logIn(), invalid data = instance requires property "email",instance requires property "passwordHash"',
  level: 'error',
  timestamp: '2020-03-05T10:08:57.835Z'
}
{
  message: '>>>> authService.logIn(), with: model = {}',
  level: 'info',
  timestamp: '2020-03-05T10:09:05.267Z'
}
{
  message: '>>>> authService.logIn(), invalid data = instance requires property "email",instance requires property "passwordHash"',
  level: 'error',
  timestamp: '2020-03-05T10:09:05.276Z'
}
{
  message: '>>>> authService.logIn(), with: model = {}',
  level: 'info',
  timestamp: '2020-03-05T10:09:56.865Z'
}
{
  message: '>>>> authService.logIn(), invalid data = instance requires property "email",instance requires property "passwordHash"',
  level: 'error',
  timestamp: '2020-03-05T10:09:56.866Z'
}
{
  message: '>>>> authService.logIn(), with: model = {}',
  level: 'info',
  timestamp: '2020-03-05T10:22:25.240Z'
}
{
  message: '>>>> authService.logIn(), invalid data = instance requires property "email",instance requires property "passwordHash"',
  level: 'error',
  timestamp: '2020-03-05T10:22:25.258Z'
}
{
  message: '>>>> authService.logIn(), with: model = {}',
  level: 'info',
  timestamp: '2020-03-05T10:23:23.026Z'
}
{
  message: '>>>> authService.logIn(), invalid data = instance requires property "email",instance requires property "passwordHash"',
  level: 'error',
  timestamp: '2020-03-05T10:23:23.028Z'
}
{
  message: '>>>> authService.logIn(), with: model = {}',
  level: 'info',
  timestamp: '2020-03-05T10:23:26.422Z'
}
{
  message: '>>>> authService.logIn(), invalid data = instance requires property "email",instance requires property "passwordHash"',
  level: 'error',
  timestamp: '2020-03-05T10:23:26.431Z'
}
{
  message: '>>>> authService.logIn(), with: model = {}',
  level: 'info',
  timestamp: '2020-03-05T10:23:26.774Z'
}
{
  message: '>>>> authService.logIn(), invalid data = instance requires property "email",instance requires property "passwordHash"',
  level: 'error',
  timestamp: '2020-03-05T10:23:26.776Z'
}
{
  message: '>>>> authService.logIn(), with: model = {}',
  level: 'info',
  timestamp: '2020-03-05T10:23:26.997Z'
}
{
  message: '>>>> authService.logIn(), invalid data = instance requires property "email",instance requires property "passwordHash"',
  level: 'error',
  timestamp: '2020-03-05T10:23:27.000Z'
}
{
  message: '>>>> authService.logIn(), with: model = {}',
  level: 'info',
  timestamp: '2020-03-05T10:23:27.173Z'
}
{
  message: '>>>> authService.logIn(), invalid data = instance requires property "email",instance requires property "passwordHash"',
  level: 'error',
  timestamp: '2020-03-05T10:23:27.175Z'
}
{
  message: '>>>> authService.logIn(), with: model = {}',
  level: 'info',
  timestamp: '2020-03-05T10:23:27.333Z'
}
{
  message: '>>>> authService.logIn(), invalid data = instance requires property "email",instance requires property "passwordHash"',
  level: 'error',
  timestamp: '2020-03-05T10:23:27.341Z'
}
{
  message: '>>>> authService.logIn(), with: model = {}',
  level: 'info',
  timestamp: '2020-03-05T10:23:27.501Z'
}
{
  message: '>>>> authService.logIn(), invalid data = instance requires property "email",instance requires property "passwordHash"',
  level: 'error',
  timestamp: '2020-03-05T10:23:27.509Z'
}
{
  message: '>>>> authService.logIn(), with: model = {}',
  level: 'info',
  timestamp: '2020-03-05T10:23:27.668Z'
}
{
  message: '>>>> authService.logIn(), invalid data = instance requires property "email",instance requires property "passwordHash"',
  level: 'error',
  timestamp: '2020-03-05T10:23:27.670Z'
}
{
  message: '>>>> authService.logIn(), with: model = {}',
  level: 'info',
  timestamp: '2020-03-05T10:23:27.845Z'
}
{
  message: '>>>> authService.logIn(), invalid data = instance requires property "email",instance requires property "passwordHash"',
  level: 'error',
  timestamp: '2020-03-05T10:23:27.853Z'
}
{
  message: '>>>> authService.logIn(), with: model = {}',
  level: 'info',
  timestamp: '2020-03-05T10:23:28.005Z'
}
{
  message: '>>>> authService.logIn(), invalid data = instance requires property "email",instance requires property "passwordHash"',
  level: 'error',
  timestamp: '2020-03-05T10:23:28.014Z'
}
{
  message: '>>>> authService.logIn(), with: model = {}',
  level: 'info',
  timestamp: '2020-03-05T10:23:57.879Z'
}
{
  message: '>>>> authService.logIn(), invalid data = instance requires property "email",instance requires property "passwordHash"',
  level: 'error',
  timestamp: '2020-03-05T10:23:57.881Z'
}
{
  message: '>>>> authService.logIn(), with: model = {}',
  level: 'info',
  timestamp: '2020-03-05T10:25:54.864Z'
}
{
  message: '>>>> authService.logIn(), invalid data = instance requires property "email",instance requires property "passwordHash"',
  level: 'error',
  timestamp: '2020-03-05T10:25:54.875Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-05T10:42:07.900Z'
}
{
  message: '>>>> authService.logIn(), with: model = {"email":"asd","passwordHash":"sac"}',
  level: 'info',
  timestamp: '2020-03-05T11:10:11.082Z'
}
{
  message: '>>>> authService.logIn(), invalid data = instance.email does not meet minimum length of 4,instance.passwordHash does not meet minimum length of 4',
  level: 'error',
  timestamp: '2020-03-05T11:10:11.099Z'
}
{
  message: '>>>> authService.logIn(), with: model = {}',
  level: 'info',
  timestamp: '2020-03-05T11:34:58.375Z'
}
{
  message: '>>>> authService.logIn(), invalid data = instance requires property "email",instance requires property "passwordHash"',
  level: 'error',
  timestamp: '2020-03-05T11:34:58.421Z'
}
{
  message: '>>>> authService.logIn(), with: model = {}',
  level: 'info',
  timestamp: '2020-03-05T11:35:24.836Z'
}
{
  message: '>>>> authService.logIn(), invalid data = instance requires property "email",instance requires property "passwordHash"',
  level: 'error',
  timestamp: '2020-03-05T11:35:24.838Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-05T11:46:05.910Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-05T11:57:20.666Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-05T11:57:28.540Z'
}
{
  message: '>>>> authService.logIn(), with: model = {}',
  level: 'info',
  timestamp: '2020-03-05T11:57:41.549Z'
}
{
  message: '>>>> authService.logIn(), invalid data = instance requires property "email",instance requires property "passwordHash"',
  level: 'error',
  timestamp: '2020-03-05T11:57:41.552Z'
}
{
  message: '>>>> authService.logIn(), with: model = {"email":"asd","passwordHash":"sac"}',
  level: 'info',
  timestamp: '2020-03-05T12:22:24.008Z'
}
{
  message: '>>>> authService.logIn(), invalid data = instance.email does not meet minimum length of 4,instance.passwordHash does not meet minimum length of 4',
  level: 'error',
  timestamp: '2020-03-05T12:22:24.012Z'
}
{
  message: '>>>> authService.logIn(), with: model = {"email":"asd","passwordHash":"sac"}',
  level: 'info',
  timestamp: '2020-03-05T12:22:25.473Z'
}
{
  message: '>>>> authService.logIn(), invalid data = instance.email does not meet minimum length of 4,instance.passwordHash does not meet minimum length of 4',
  level: 'error',
  timestamp: '2020-03-05T12:22:25.475Z'
}
{
  message: '>>>> authService.logIn(), with: model = {"email":"asd","passwordHash":"sac"}',
  level: 'info',
  timestamp: '2020-03-05T12:22:27.106Z'
}
{
  message: '>>>> authService.logIn(), invalid data = instance.email does not meet minimum length of 4,instance.passwordHash does not meet minimum length of 4',
  level: 'error',
  timestamp: '2020-03-05T12:22:27.114Z'
}
{
  message: '>>>> authService.logIn(), with: model = {"email":"asd","passwordHash":"sac"}',
  level: 'info',
  timestamp: '2020-03-05T12:22:29.192Z'
}
{
  message: '>>>> authService.logIn(), invalid data = instance.email does not meet minimum length of 4,instance.passwordHash does not meet minimum length of 4',
  level: 'error',
  timestamp: '2020-03-05T12:22:29.200Z'
}
{
  message: '>>>> authService.logIn(), with: model = {"email":"paderborner2019@gmail.com","passwordHash":"25012005"}',
  level: 'info',
  timestamp: '2020-03-05T14:47:12.488Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-05T15:26:55.854Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-06T08:26:39.286Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-06T08:28:23.341Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-06T08:28:55.096Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-06T08:29:29.966Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-06T08:31:50.016Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-06T11:38:01.304Z'
}
{
  message: '>>>> authService.logIn(), with: model = {"email":"paderborner2019@gmail.com","passwordHash":"25012005"}',
  level: 'info',
  timestamp: '2020-03-06T12:14:32.540Z'
}
{
  message: '>>>> authService.logIn(), with: model = {"email":"params@yandex.com","passwordHash":"25012005"}',
  level: 'info',
  timestamp: '2020-03-06T12:26:40.713Z'
}
{
  message: '>>>> authService.logIn(), with: model = {"email":"morgenshtern1988@gmail.com","passwordHash":"25012005"}',
  level: 'info',
  timestamp: '2020-03-06T12:28:19.293Z'
}
{
  message: '>>>> authService.logIn(), with: model = {"email":"morgenshtern1988@gmail.com","passwordHash":"25012005"}',
  level: 'info',
  timestamp: '2020-03-06T12:33:00.907Z'
}
{
  message: '>>>> authService.logIn(), with: model = {"email":"morgenshtern1988@gmail.com","passwordHash":"25012005"}',
  level: 'info',
  timestamp: '2020-03-06T12:34:53.407Z'
}
{
  message: '>>>> authService.logIn(), with: model = {"email":"morgenshtern1988@gmail.com","passwordHash":"25012005"}',
  level: 'info',
  timestamp: '2020-03-06T12:35:55.284Z'
}
{
  message: '>>>> authService.logIn(), with: model = {"email":"morgenshtern1988@gmail.com","passwordHash":"25012005"}',
  level: 'info',
  timestamp: '2020-03-06T12:36:35.588Z'
}
{
  message: '>>>> authService.logIn(), with: model = {"email":"morgenshtern1988@gmail.com","passwordHash":"25012005"}',
  level: 'info',
  timestamp: '2020-03-06T12:42:53.560Z'
}
{
  message: '>>>> authService.logIn(), with: model = {"email":"morgenshtern1988@gmail.com","passwordHash":"25012005"}',
  level: 'info',
  timestamp: '2020-03-06T12:44:11.865Z'
}
{
  message: '>>>> authService.logIn(), with: model = {"email":"morgenshtern1988@gmail.com","passwordHash":"25012005"}',
  level: 'info',
  timestamp: '2020-03-06T12:44:48.760Z'
}
{
  message: '>>>> authService.logIn(), with: model = {"email":"morgenshtern1988@gmail.com","passwordHash":"25012005"}',
  level: 'info',
  timestamp: '2020-03-06T12:46:57.846Z'
}
{
  message: '>>>> authService.logIn(), with: model = {"email":"morgenshtern1988@gmail.com","passwordHash":"25012005"}',
  level: 'info',
  timestamp: '2020-03-06T12:48:28.149Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-06T16:01:26.035Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-10T07:43:54.834Z'
}
{
  message: '>>>> authService.logIn(), with: model = {"email":"morgenshtern1988@gmail.com","passwordHash":"25012005"}',
  level: 'info',
  timestamp: '2020-03-10T07:44:54.895Z'
}
{
  message: '>>>> authService.logIn(), with: model = {"email":"paderborner2019@gmail.com","passwordHash":"25012005"}',
  level: 'info',
  timestamp: '2020-03-10T07:55:51.236Z'
}
{
  message: '>>>> authService.logIn(), with: model = {"email":"params@yandex.com","passwordHash":"25012005"}',
  level: 'info',
  timestamp: '2020-03-10T07:56:46.206Z'
}
{
  message: '>>>> authService.logIn(), with: model = {}',
  level: 'info',
  timestamp: '2020-03-10T08:02:23.645Z'
}
{
  message: '>>>> authService.logIn(), invalid data = instance requires property "email",instance requires property "passwordHash"',
  level: 'error',
  timestamp: '2020-03-10T08:02:23.657Z'
}
{
  message: '>>>> authService.logIn(), with: model = {}',
  level: 'info',
  timestamp: '2020-03-10T08:34:07.197Z'
}
{
  message: '>>>> authService.logIn(), invalid data = instance requires property "email",instance requires property "passwordHash"',
  level: 'error',
  timestamp: '2020-03-10T08:34:07.384Z'
}
{
  message: '>>>> authService.logIn(), with: model = {}',
  level: 'info',
  timestamp: '2020-03-10T08:37:01.159Z'
}
{
  message: '>>>> authService.logIn(), invalid data = instance requires property "email",instance requires property "passwordHash"',
  level: 'error',
  timestamp: '2020-03-10T08:37:01.162Z'
}
{
  message: '>>>> authService.logIn(), with: model = {}',
  level: 'info',
  timestamp: '2020-03-10T08:39:01.714Z'
}
{
  message: '>>>> authService.logIn(), invalid data = instance requires property "email",instance requires property "passwordHash"',
  level: 'error',
  timestamp: '2020-03-10T08:39:01.716Z'
}
{
  message: '>>>> authService.logIn(), with: model = {}',
  level: 'info',
  timestamp: '2020-03-10T08:40:09.812Z'
}
{
  message: '>>>> authService.logIn(), invalid data = instance requires property "email",instance requires property "passwordHash"',
  level: 'error',
  timestamp: '2020-03-10T08:40:09.814Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-10T08:41:19.985Z'
}
{
  message: '>>>> authService.logIn(), with: model = {}',
  level: 'info',
  timestamp: '2020-03-10T08:41:29.474Z'
}
{
  message: '>>>> authService.logIn(), invalid data = instance requires property "email",instance requires property "passwordHash"',
  level: 'error',
  timestamp: '2020-03-10T08:41:29.488Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-10T08:42:05.688Z'
}
{
  message: '>>>> authService.logIn(), with: model = {}',
  level: 'info',
  timestamp: '2020-03-10T08:42:07.206Z'
}
{
  message: '>>>> authService.logIn(), invalid data = instance requires property "email",instance requires property "passwordHash"',
  level: 'error',
  timestamp: '2020-03-10T08:42:07.217Z'
}
{
  message: '>>>> authService.logIn(), with: model = {}',
  level: 'info',
  timestamp: '2020-03-10T08:42:51.354Z'
}
{
  message: '>>>> authService.logIn(), invalid data = instance requires property "email",instance requires property "passwordHash"',
  level: 'error',
  timestamp: '2020-03-10T08:42:51.364Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-10T08:44:10.520Z'
}
{
  message: '>>>> authService.logIn(), with: model = {}',
  level: 'info',
  timestamp: '2020-03-10T08:44:10.562Z'
}
{
  message: '>>>> authService.logIn(), invalid data = instance requires property "email",instance requires property "passwordHash"',
  level: 'error',
  timestamp: '2020-03-10T08:44:10.574Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-10T08:45:28.692Z'
}
{
  message: '>>>> authService.logIn(), with: model = {"email":"sdfgsfdg","passwordHash":"sdfgsdfgd"}',
  level: 'info',
  timestamp: '2020-03-10T08:45:29.707Z'
}
{
  message: '>>>> authService.logIn(), result = user is not found',
  level: 'error',
  timestamp: '2020-03-10T08:45:29.721Z'
}
{
  message: '>>>> authService.logIn(), with: model = {"email":"morgenshtern1988@gmail.com","passwordHash":"25012005"}',
  level: 'info',
  timestamp: '2020-03-10T08:46:12.121Z'
}
{
  message: '>>>> authService.logIn(), with: model = {"email":"morgenshtern1988@gmail.com"}',
  level: 'info',
  timestamp: '2020-03-10T08:50:44.963Z'
}
{
  message: '>>>> authService.logIn(), invalid data = instance requires property "passwordHash"',
  level: 'error',
  timestamp: '2020-03-10T08:50:44.998Z'
}
{
  message: '>>>> authService.logIn(), with: model = {"email":"morgenshtern1988@gmail.com","passwordHash":"25012005"}',
  level: 'info',
  timestamp: '2020-03-10T08:51:42.302Z'
}
{
  message: '>>>> authService.logIn(), with: model = {"email":"morgenshtern1988@gmail.com","passwordHash":"25012005"}',
  level: 'info',
  timestamp: '2020-03-10T08:53:25.230Z'
}
{
  message: '>>>> authService.logIn(), with: model = {"email":"morgenshtern1988@gmail.com","passwordHash":"25012005"}',
  level: 'info',
  timestamp: '2020-03-10T08:54:04.473Z'
}
{
  message: '>>>> authService.logIn(), with: model = {"email":"morgenshtern1988@gmail.com","passwordHash":"25012005"}',
  level: 'info',
  timestamp: '2020-03-10T08:55:24.265Z'
}
{
  message: '>>>> authService.logIn(), with: model = {"email":"morgenshtern1988@gmail.com","passwordHash":"25012005"}',
  level: 'info',
  timestamp: '2020-03-10T08:56:05.381Z'
}
{
  message: '>>>> authService.logIn(), with: model = {"email":"morgenshtern1988@gmail.com","passwordHash":"25012005"}',
  level: 'info',
  timestamp: '2020-03-10T09:01:55.741Z'
}
{
  message: '>>>> authService.logIn(), with: model = {"email":"morgenshtern1988@gmail.com","passwordHash":"25012005"}',
  level: 'info',
  timestamp: '2020-03-10T09:02:15.640Z'
}
{
  message: '>>>> authService.logIn(), with: model = {"email":"morgenshtern1988@gmail.com","passwordHash":"25012005"}',
  level: 'info',
  timestamp: '2020-03-10T09:02:56.423Z'
}
{
  message: '>>>> authService.logIn(), with: model = {"email":"morgenshtern1988@gmail.com"}',
  level: 'info',
  timestamp: '2020-03-10T09:03:54.342Z'
}
{
  message: '>>>> authService.logIn(), invalid data = instance requires property "passwordHash"',
  level: 'error',
  timestamp: '2020-03-10T09:03:54.347Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-10T09:14:14.452Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-10T09:15:26.605Z'
}
{
  message: '>>>> authService.logIn(), with: model = {"email":"morgenshtern1988@gmail.com","passwordHash":"25012005"}',
  level: 'info',
  timestamp: '2020-03-10T09:15:36.764Z'
}
{
  message: '>>>> authService.logIn(), with: model = {"email":"morgenshtern1988@gmail.com","passwordHash":"25012005"}',
  level: 'info',
  timestamp: '2020-03-10T09:16:20.985Z'
}
{
  message: '>>>> authService.logIn(), with: model = {"email":"morgenshtern1988@gmail.com","passwordHash":"25012005"}',
  level: 'info',
  timestamp: '2020-03-10T09:16:57.682Z'
}
{
  message: '>>>> authService.logIn(), with: model = {"email":"morgenshtern1988@gmail.com","passwordHash":"25012005"}',
  level: 'info',
  timestamp: '2020-03-10T09:22:14.929Z'
}
{
  message: '>>>> authService.logIn(), with: model = {"email":"morgenshtern1988@gmail.com","passwordHash":"25012005"}',
  level: 'info',
  timestamp: '2020-03-10T09:23:59.347Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-10T09:44:41.660Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-10T09:46:21.807Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-10T09:46:37.948Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-10T09:47:07.296Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-10T09:47:19.465Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-10T09:47:49.799Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-10T10:19:18.023Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-10T10:20:23.112Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-10T10:21:18.685Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-10T10:21:30.710Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-10T10:22:42.982Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-10T10:23:34.116Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-10T10:23:59.024Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-10T10:24:36.813Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-10T10:24:51.487Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-10T10:25:45.058Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-10T10:26:26.433Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-10T10:26:52.404Z'
}
{
  message: '>>>> authService.logIn(), with: model = {"email":"morgenshtern1988@gmail.com","passwordHash":"25012005"}',
  level: 'info',
  timestamp: '2020-03-10T10:26:52.686Z'
}
{
  message: '>>>> authService.logIn(), with: model = {"email":"morgenshtern1988@gmail.com","passwordHash":"25012005"}',
  level: 'info',
  timestamp: '2020-03-10T10:51:27.472Z'
}
{
  message: '>>>> authService.logIn(), with: model = {"email":"morgenshtern1988@gmail.com","passwordHash":"25012005"}',
  level: 'info',
  timestamp: '2020-03-10T10:51:33.448Z'
}
{
  message: '>>>> authService.logIn(), with: model = {"email":"morgenshtern1988@gmail.com","passwordHash":"25012005"}',
  level: 'info',
  timestamp: '2020-03-10T10:53:23.999Z'
}
{
  message: '>>>> authService.logIn(), with: model = {"email":"morgenshtern1988@gmail.com","passwordHash":"25012005"}',
  level: 'info',
  timestamp: '2020-03-10T10:54:18.446Z'
}
{
  message: '>>>> authService.logIn(), with: model = {"email":"morgenshtern1988@gmail.com","passwordHash":"25012005"}',
  level: 'info',
  timestamp: '2020-03-10T10:54:35.375Z'
}
{
  message: '>>>> authService.logIn(), with: model = {"email":"morgenshtern1988@gmail.com","passwordHash":"25012005"}',
  level: 'info',
  timestamp: '2020-03-10T10:56:00.077Z'
}
{
  message: '>>>> authService.logIn(), with: model = {"email":"morgenshtern1988@gmail.com","passwordHash":"25012005"}',
  level: 'info',
  timestamp: '2020-03-10T11:05:57.995Z'
}
{
  message: '>>>> authService.logIn(), with: model = {"email":"morgenshtern1988@gmail.com","passwordHash":"25012005"}',
  level: 'info',
  timestamp: '2020-03-10T11:07:01.028Z'
}
{
  message: '>>>> authService.logIn(), with: model = {"email":"morgenshtern1988@gmail.com","passwordHash":"25012005"}',
  level: 'info',
  timestamp: '2020-03-10T11:08:15.139Z'
}
{
  message: '>>>> authService.logIn(), with: model = {"email":"morgenshtern1988@gmail.com"}',
  level: 'info',
  timestamp: '2020-03-10T11:10:14.597Z'
}
{
  message: '>>>> authService.logIn(), invalid data = instance requires property "passwordHash"',
  level: 'error',
  timestamp: '2020-03-10T11:10:14.601Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-10T11:11:47.534Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-10T11:12:11.140Z'
}
{
  message: '>>>> authService.logIn(), with: model = {"email":"morgenshtern1988@gmail.com","password":"25012005"}',
  level: 'info',
  timestamp: '2020-03-10T11:30:40.727Z'
}
{
  message: '>>>> authService.logIn(), invalid data = instance additionalProperty "password" exists in instance when not allowed,instance requires property "passwordHash"',
  level: 'error',
  timestamp: '2020-03-10T11:30:40.730Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-10T11:31:24.532Z'
}
{
  message: '>>>> authService.logIn(), with: model = {"email":"morgenshtern1988@gmail.com","password":"25012005"}',
  level: 'info',
  timestamp: '2020-03-10T11:31:24.775Z'
}
{
  message: '>>>> authService.logIn(), with: model = {"email":"morgenshtern1988@gmail.com","password":"25012005"}',
  level: 'info',
  timestamp: '2020-03-10T12:07:46.080Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-10T12:08:32.736Z'
}
{
  message: '>>>> authService.logIn(), with: model = {"email":"morgenshtern1988@gmail.com","password":"25012005"}',
  level: 'info',
  timestamp: '2020-03-10T12:08:33.144Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-10T12:08:52.957Z'
}
{
  message: '>>>> authService.logIn(), with: model = {"email":"morgenshtern1988@gmail.com","password":"25012005"}',
  level: 'info',
  timestamp: '2020-03-10T12:20:51.153Z'
}
{
  message: '>>>> authService.logIn(), with: model = {"email":"morgenshtern1988@gmail.com","password":"25012005"}',
  level: 'info',
  timestamp: '2020-03-10T12:22:11.228Z'
}
{
  message: '>>>> authService.logIn(), with: model = {"email":"morgenshtern1988@gmail.com","password":"25012005"}',
  level: 'info',
  timestamp: '2020-03-10T12:41:48.133Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-10T12:54:43.673Z'
}
{
  message: '>>>> authService.logIn(), with: model = {"email":"morgenshtern1988@gmail.com","password":"25012005"}',
  level: 'info',
  timestamp: '2020-03-10T12:55:05.910Z'
}
{
  message: '>>>> authService.logIn(), with: model = {"email":"morgenshtern1988@","password":"25012005"}',
  level: 'info',
  timestamp: '2020-03-10T12:55:26.371Z'
}
{
  message: '>>>> authService.logIn(), result = user is not found',
  level: 'error',
  timestamp: '2020-03-10T12:55:26.374Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-10T14:05:03.856Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-10T14:06:12.057Z'
}
{
  message: '>>>> authorService.getAuthors(), with: filter = {"searchString":"kaf","pageNumber":1,"pageSize":30}',
  level: 'info',
  timestamp: '2020-03-10T14:06:19.976Z'
}
{
  message: '>>>> authorService.getAuthors(), with: filter = {"pageNumber":1,"pageSize":30}',
  level: 'info',
  timestamp: '2020-03-10T14:06:29.400Z'
}
{
  message: '>>>> authService.logIn(), with: model = {"email":"morgenshtern1988@gmail.com","password":"25012005"}',
  level: 'info',
  timestamp: '2020-03-10T14:07:23.822Z'
}
{
  message: '>>>> authService.logIn(), with: model = {"email":"morgenshtern1988@gmail.com","password":"25012005"}',
  level: 'info',
  timestamp: '2020-03-10T14:45:01.228Z'
}
{
  message: '>>>> authService.logIn(), with: model = {"email":"1988@gmail.com","password":"25012005"}',
  level: 'info',
  timestamp: '2020-03-10T14:45:17.138Z'
}
{
  message: '>>>> authService.logIn(), result = user is not found',
  level: 'error',
  timestamp: '2020-03-10T14:45:17.142Z'
}
{
  message: '>>>> authService.logIn(), with: model = {"email":"htern1988@gmail.com","password":"25012005"}',
  level: 'info',
  timestamp: '2020-03-10T14:46:23.884Z'
}
{
  message: '>>>> authService.logIn(), result = user is not found',
  level: 'error',
  timestamp: '2020-03-10T14:46:23.895Z'
}
{
  message: '>>>> authService.logIn(), with: model = {"email":"htern1988@gmail.com","password":"25012005"}',
  level: 'info',
  timestamp: '2020-03-10T14:46:26.473Z'
}
{
  message: '>>>> authService.logIn(), result = user is not found',
  level: 'error',
  timestamp: '2020-03-10T14:46:26.476Z'
}
{
  message: '>>>> authService.logIn(), with: model = {}',
  level: 'info',
  timestamp: '2020-03-10T15:12:09.652Z'
}
{
  message: '>>>> authService.logIn(), invalid data = instance requires property "email",instance requires property "password"',
  level: 'error',
  timestamp: '2020-03-10T15:12:09.655Z'
}
{
  message: '>>>> authService.logIn(), with: model = {}',
  level: 'info',
  timestamp: '2020-03-10T15:13:41.290Z'
}
{
  message: '>>>> authService.logIn(), invalid data = instance requires property "email",instance requires property "password"',
  level: 'error',
  timestamp: '2020-03-10T15:13:41.306Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-10T15:14:42.909Z'
}
{
  message: '>>>> authService.logIn(), with: model = {"email":"morgenshbvgfdsbfdbdastern1988@gmail.com","password":"25012005"}',
  level: 'info',
  timestamp: '2020-03-10T15:14:45.791Z'
}
{
  message: '>>>> authService.logIn(), result = user is not found',
  level: 'error',
  timestamp: '2020-03-10T15:14:45.800Z'
}
{
  message: '>>>> authService.logIn(), with: model = {"email":"morgenshbvgfdsbfdbdastern1988@gmail.com","password":"25012005"}',
  level: 'info',
  timestamp: '2020-03-10T15:14:58.805Z'
}
{
  message: '>>>> authService.logIn(), result = user is not found',
  level: 'error',
  timestamp: '2020-03-10T15:14:58.819Z'
}
{
  message: '>>>> authService.logIn(), with: model = {"email":"morgenshtern1988@gmail.com","password":"25012005"}',
  level: 'info',
  timestamp: '2020-03-10T15:24:06.838Z'
}
{
  message: '>>>> authService.logIn(), with: model = {"email":"morgenshtern1988@gmail.com","password":"25012005"}',
  level: 'info',
  timestamp: '2020-03-10T15:24:59.305Z'
}
{
  message: '>>>> authService.logIn(), with: model = {"email":"morgenshtern1988@gmail.com","password":"25012005"}',
  level: 'info',
  timestamp: '2020-03-10T15:26:39.190Z'
}
{
  message: '>>>> authService.logIn(), with: model = {"email":"morgenshtern1988@gmail.com","password":"25012005"}',
  level: 'info',
  timestamp: '2020-03-10T15:26:50.445Z'
}
{
  message: '>>>> authService.logIn(), with: model = {"email":"morgenshtern1988@gmail.com","password":"25012005"}',
  level: 'info',
  timestamp: '2020-03-10T15:28:17.486Z'
}
{
  message: '>>>> authService.logIn(), with: model = {"email":"morgenshtern1988@gmail.com","password":"25012005"}',
  level: 'info',
  timestamp: '2020-03-10T16:23:21.391Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-10T16:25:08.822Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-11T08:04:07.311Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-11T08:37:01.313Z'
}
{
  message: '>>>> userService.getById(), with user id = {}',
  level: 'info',
  timestamp: '2020-03-11T08:37:08.025Z'
}
{
  message: '>>>> userService.getById(), invalid data = {}',
  level: 'error',
  timestamp: '2020-03-11T08:37:08.034Z'
}
{
  message: '>>>> userService.getById(), with user id = {}',
  level: 'info',
  timestamp: '2020-03-11T08:37:31.880Z'
}
{
  message: '>>>> userService.getById(), invalid data = {}',
  level: 'error',
  timestamp: '2020-03-11T08:37:31.889Z'
}
{
  message: '>>>> userService.getById(), with user id = {}',
  level: 'info',
  timestamp: '2020-03-11T08:38:20.062Z'
}
{
  message: '>>>> userService.getById(), invalid data = {}',
  level: 'error',
  timestamp: '2020-03-11T08:38:20.074Z'
}
{
  message: '>>>> userService.getById(), with user id = {}',
  level: 'info',
  timestamp: '2020-03-11T08:39:24.730Z'
}
{
  message: '>>>> userService.getById(), invalid data = {}',
  level: 'error',
  timestamp: '2020-03-11T08:39:24.744Z'
}
{
  message: '>>>> authService.logIn(), with: model = {"email":"morgenshtern1988@gmail.com","password":"25012005"}',
  level: 'info',
  timestamp: '2020-03-11T09:38:30.368Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-11T10:07:06.836Z'
}
{
  message: '>>>> authService.logIn(), with: model = {"email":"morgenshtern1988@gmail.com","password":"25012005"}',
  level: 'info',
  timestamp: '2020-03-11T10:10:15.650Z'
}
{
  message: '>>>> authService.logIn(), with: model = {}',
  level: 'info',
  timestamp: '2020-03-11T10:21:52.151Z'
}
{
  message: '>>>> authService.logIn(), invalid data = instance requires property "email",instance requires property "password"',
  level: 'error',
  timestamp: '2020-03-11T10:21:52.152Z'
}
{
  message: '>>>> authService.logIn(), with: model = {}',
  level: 'info',
  timestamp: '2020-03-11T10:22:20.520Z'
}
{
  message: '>>>> authService.logIn(), invalid data = instance requires property "email",instance requires property "password"',
  level: 'error',
  timestamp: '2020-03-11T10:22:20.529Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-11T10:30:12.448Z'
}
{
  message: '>>>> authService.logIn(), with: model = {}',
  level: 'info',
  timestamp: '2020-03-11T10:36:06.609Z'
}
{
  message: '>>>> authService.logIn(), invalid data = instance requires property "email",instance requires property "password"',
  level: 'error',
  timestamp: '2020-03-11T10:36:06.611Z'
}
{
  message: '>>>> authService.logIn(), with: model = {}',
  level: 'info',
  timestamp: '2020-03-11T10:49:43.108Z'
}
{
  message: '>>>> authService.logIn(), invalid data = instance requires property "email",instance requires property "password"',
  level: 'error',
  timestamp: '2020-03-11T10:49:43.111Z'
}
{
  message: '>>>> authService.logIn(), with: model = {}',
  level: 'info',
  timestamp: '2020-03-11T11:09:26.374Z'
}
{
  message: '>>>> authService.logIn(), invalid data = instance requires property "email",instance requires property "password"',
  level: 'error',
  timestamp: '2020-03-11T11:09:26.390Z'
}
{
  message: '>>>> authService.logIn(), with: model = {}',
  level: 'info',
  timestamp: '2020-03-11T11:09:44.524Z'
}
{
  message: '>>>> authService.logIn(), invalid data = instance requires property "email",instance requires property "password"',
  level: 'error',
  timestamp: '2020-03-11T11:09:44.540Z'
}
{
  message: '>>>> authService.logIn(), with: model = {}',
  level: 'info',
  timestamp: '2020-03-11T11:38:57.408Z'
}
{
  message: '>>>> authService.logIn(), invalid data = instance requires property "email",instance requires property "password"',
  level: 'error',
  timestamp: '2020-03-11T11:38:57.419Z'
}
{
  message: '>>>> authService.logIn(), with: model = {}',
  level: 'info',
  timestamp: '2020-03-11T11:39:56.581Z'
}
{
  message: '>>>> authService.logIn(), invalid data = instance requires property "email",instance requires property "password"',
  level: 'error',
  timestamp: '2020-03-11T11:39:56.592Z'
}
{
  message: '>>>> authService.logIn(), with: model = {}',
  level: 'info',
  timestamp: '2020-03-11T11:41:12.958Z'
}
{
  message: '>>>> authService.logIn(), invalid data = instance requires property "email",instance requires property "password"',
  level: 'error',
  timestamp: '2020-03-11T11:41:12.980Z'
}
{
  message: '>>>> authService.logIn(), with: model = {"email":"morgenshtern1988@gmail.com","password":"25012005"}',
  level: 'info',
  timestamp: '2020-03-11T11:41:46.436Z'
}
{
  message: '>>>> authService.logIn(), with: model = {}',
  level: 'info',
  timestamp: '2020-03-11T11:44:33.935Z'
}
{
  message: '>>>> authService.logIn(), invalid data = instance requires property "email",instance requires property "password"',
  level: 'error',
  timestamp: '2020-03-11T11:44:33.938Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-11T11:46:31.531Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-11T11:46:53.103Z'
}
{
  message: '>>>> authService.logIn(), with: model = {}',
  level: 'info',
  timestamp: '2020-03-11T11:47:10.706Z'
}
{
  message: '>>>> authService.logIn(), invalid data = instance requires property "email",instance requires property "password"',
  level: 'error',
  timestamp: '2020-03-11T11:47:10.709Z'
}
{
  message: '>>>> authService.logIn(), with: model = {}',
  level: 'info',
  timestamp: '2020-03-11T11:48:19.800Z'
}
{
  message: '>>>> authService.logIn(), invalid data = instance requires property "email",instance requires property "password"',
  level: 'error',
  timestamp: '2020-03-11T11:48:19.810Z'
}
{
  message: '>>>> authService.logIn(), with: model = {}',
  level: 'info',
  timestamp: '2020-03-11T11:48:51.637Z'
}
{
  message: '>>>> authService.logIn(), invalid data = instance requires property "email",instance requires property "password"',
  level: 'error',
  timestamp: '2020-03-11T11:48:51.648Z'
}
{
  message: '>>>> authService.logIn(), with: model = {}',
  level: 'info',
  timestamp: '2020-03-11T11:49:07.969Z'
}
{
  message: '>>>> authService.logIn(), invalid data = instance requires property "email",instance requires property "password"',
  level: 'error',
  timestamp: '2020-03-11T11:49:07.973Z'
}
{
  message: '>>>> authService.logIn(), with: model = {"email":"morgenshtern1988@gmail.com","password":"25012005"}',
  level: 'info',
  timestamp: '2020-03-11T11:53:46.091Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-11T11:56:53.676Z'
}
{
  message: '>>>> authService.logIn(), with: model = {}',
  level: 'info',
  timestamp: '2020-03-11T11:56:54.369Z'
}
{
  message: '>>>> authService.logIn(), invalid data = instance requires property "email",instance requires property "password"',
  level: 'error',
  timestamp: '2020-03-11T11:56:54.370Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-11T11:58:08.420Z'
}
{
  message: '>>>> authService.logIn(), with: model = {}',
  level: 'info',
  timestamp: '2020-03-11T11:58:12.172Z'
}
{
  message: '>>>> authService.logIn(), invalid data = instance requires property "email",instance requires property "password"',
  level: 'error',
  timestamp: '2020-03-11T11:58:12.174Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-11T11:59:46.312Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-11T12:21:21.688Z'
}
{
  message: '>>>> authService.logIn(), with: model = {"password":"25012005"}',
  level: 'info',
  timestamp: '2020-03-11T12:25:58.344Z'
}
{
  message: '>>>> authService.logIn(), invalid data = instance requires property "email"',
  level: 'error',
  timestamp: '2020-03-11T12:25:58.346Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-11T12:26:40.196Z'
}
{
  message: '>>>> authService.logIn(), with: model = {"password":"25012005"}',
  level: 'info',
  timestamp: '2020-03-11T12:26:40.254Z'
}
{
  message: '>>>> authService.logIn(), invalid data = instance requires property "email"',
  level: 'error',
  timestamp: '2020-03-11T12:26:40.256Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-11T13:15:19.961Z'
}
{
  message: '>>>> authService.logIn(), with: model = {"password":"25012005"}',
  level: 'info',
  timestamp: '2020-03-11T13:15:24.872Z'
}
{
  message: '>>>> authService.logIn(), invalid data = instance requires property "email"',
  level: 'error',
  timestamp: '2020-03-11T13:15:24.881Z'
}
{
  message: '>>>> authService.logIn(), with: model = {"password":"25012005"}',
  level: 'info',
  timestamp: '2020-03-11T13:16:47.707Z'
}
{
  message: '>>>> authService.logIn(), invalid data = instance requires property "email"',
  level: 'error',
  timestamp: '2020-03-11T13:16:47.716Z'
}
{
  message: '>>>> authService.logIn(), with: model = {"password":"25012005"}',
  level: 'info',
  timestamp: '2020-03-11T13:17:36.680Z'
}
{
  message: '>>>> authService.logIn(), invalid data = instance requires property "email"',
  level: 'error',
  timestamp: '2020-03-11T13:17:36.686Z'
}
{
  message: '>>>> authService.logIn(), with: model = {"password":"25012005"}',
  level: 'info',
  timestamp: '2020-03-11T13:18:22.037Z'
}
{
  message: '>>>> authService.logIn(), invalid data = instance requires property "email"',
  level: 'error',
  timestamp: '2020-03-11T13:18:22.049Z'
}
{
  message: '>>>> authService.logIn(), with: model = {"password":"25012005"}',
  level: 'info',
  timestamp: '2020-03-11T13:19:35.248Z'
}
{
  message: '>>>> authService.logIn(), invalid data = instance requires property "email"',
  level: 'error',
  timestamp: '2020-03-11T13:19:35.263Z'
}
{
  message: '>>>> authService.logIn(), with: model = {"password":"25012005"}',
  level: 'info',
  timestamp: '2020-03-11T13:19:44.495Z'
}
{
  message: '>>>> authService.logIn(), invalid data = instance requires property "email"',
  level: 'error',
  timestamp: '2020-03-11T13:19:44.509Z'
}
{
  message: '>>>> authService.logIn(), with: model = {"email":"morgenshtern1988@gmail.com","password":"25012005"}',
  level: 'info',
  timestamp: '2020-03-11T13:20:00.953Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-11T16:08:15.924Z'
}
{
  message: '>>>> authService.logIn(), with: model = {"email":"ddsfdsd","password":"25012005"}',
  level: 'info',
  timestamp: '2020-03-11T16:08:21.709Z'
}
{
  message: '>>>> authService.logIn(), result = user is not found',
  level: 'error',
  timestamp: '2020-03-11T16:08:21.749Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-12T08:08:09.455Z'
}
{
  message: '>>>> authService.logIn(), with: model = {"email":"ddsfdsd","password":"25012005"}',
  level: 'info',
  timestamp: '2020-03-12T08:30:21.723Z'
}
{
  message: '>>>> authService.logIn(), result = user is not found',
  level: 'error',
  timestamp: '2020-03-12T08:30:21.816Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-12T09:14:13.983Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-12T11:00:20.797Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-12T11:15:20.259Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-12T14:55:27.595Z'
}
{
  message: '>>>> authService.confirmEmail(), error  {"email":"vasilets.seven@gmail.com"} has not been assigned to any user ',
  level: 'error',
  timestamp: '2020-03-12T14:55:59.159Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-12T14:57:16.419Z'
}
{
  message: '>>>> authService.confirmEmail(), error  {"email":"vasilets.seven@gmail.com"} has not been assigned to any user ',
  level: 'error',
  timestamp: '2020-03-12T14:57:17.767Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-12T14:57:58.799Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-13T14:34:03.309Z'
}
{
  message: '>>>> authService.register(), with: user = {"user":{"userName":"HokkeyMan","firstName":"Gordie ","lastName":"yuk ","email":"80939404335","password":"25012005"}}',
  level: 'info',
  timestamp: '2020-03-13T14:45:42.524Z'
}
{
  message: '>>>> authService.register(), invalid data = instance requires property "userName",instance requires property "email",instance requires property "firstName",instance requires property "lastName",instance requires property "passwordHash"',
  level: 'error',
  timestamp: '2020-03-13T14:45:42.529Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-13T14:56:30.091Z'
}
{
  message: '>>>> authService.register(), with: user = {"userName":"HokkeyMan","firstName":"Gordie ","lastName":"yuk ","email":"80939404335","password":"25012005"}',
  level: 'info',
  timestamp: '2020-03-13T14:56:30.357Z'
}
{
  message: '>>>> authService.register(), invalid data = instance requires property "passwordHash"',
  level: 'error',
  timestamp: '2020-03-13T14:56:30.361Z'
}
{
  message: '>>>> authService.register(), with: user = {"userName":"HokkeyMan","firstName":"Gordie ","lastName":"yuk ","email":"80939404335","passwordHash":"25012005"}',
  level: 'info',
  timestamp: '2020-03-13T14:58:52.474Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-13T15:00:41.385Z'
}
{
  message: '>>>> authService.register(), with: user = {"userName":"HokkeyManasdf","firstName":"Gordie ","lastName":"yuk ","email":"80939404335","passwordHash":"25012005"}',
  level: 'info',
  timestamp: '2020-03-13T15:00:41.534Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-13T16:06:20.651Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-16T13:43:03.947Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-16T13:45:04.595Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-16T13:45:31.072Z'
}
{
  message: '>>>> authService.logIn(), with: model = {"email":"morgenshtern1988@gmail.com","password":"25012005"}',
  level: 'info',
  timestamp: '2020-03-16T13:45:31.688Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-16T13:47:50.300Z'
}
{
  message: '>>>> authService.logIn(), with: model = {"email":"morgenshtern1988@gmail.com","password":"25012005"}',
  level: 'info',
  timestamp: '2020-03-16T13:48:16.380Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-16T13:54:19.012Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-16T14:03:08.343Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-17T10:42:37.666Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-03-17T10:43:36.995Z'
}
{
  message: '>>>> authService.register(), with: user = {"userName":"fronMen","firstName":"Gordie ","lastName":"How","email":"someEmail@yandex.en","passwordHash":"25012005","LoginRequest":{"password":"25012005"}}',
  level: 'info',
  timestamp: '2020-03-17T10:45:28.302Z'
}
{
  message: '>>>> authService.register(), invalid data = instance.lastName does not meet minimum length of 4',
  level: 'error',
  timestamp: '2020-03-17T10:45:28.314Z'
}
{
  message: '>>>> authService.register(), with: user = {"userName":"fronMen","firstName":"Gordie ","lastName":"Hows","email":"someEmail@yandex.en","passwordHash":"25012005","LoginRequest":{"password":"25012005"}}',
  level: 'info',
  timestamp: '2020-03-17T10:46:16.036Z'
}
{
  message: '>>>> authService.register(), with: user = {"userName":"fronMen","firstName":"Gordie ","lastName":"Hows","email":"someEmail@yandex.en","passwordHash":"25012005","LoginRequest":{"password":"25012005"}}',
  level: 'info',
  timestamp: '2020-03-17T10:47:32.345Z'
}
{
  message: '>>>> authService.register(), with: user = {"userName":"fronMen","firstName":"Gordie ","lastName":"Hows","email":"someEmail@yandex.en","passwordHash":"25012005","LoginRequest":{"password":"25012005"}}',
  level: 'info',
  timestamp: '2020-03-17T10:50:03.124Z'
}
{
  message: '>>>> authService.register(), with: user = {"userName":"HokkeyMan","firstName":"Gordie ","lastName":"yuk","email":"morgenshtern1988@gmail.com","passwordHash":"25012005","LoginRequest":{"password":"25012005"}}',
  level: 'info',
  timestamp: '2020-03-17T10:53:57.118Z'
}
{
  message: '>>>> authService.register(), invalid data = instance.lastName does not meet minimum length of 4',
  level: 'error',
  timestamp: '2020-03-17T10:53:57.120Z'
}
{
  message: '>>>> authService.register(), with: user = {"userName":"HokkeyMan","firstName":"Gordie ","lastName":"yuk","email":"morgenshtern1988@gmail.com","passwordHash":"25012005","LoginRequest":{"password":"25012005"}}',
  level: 'info',
  timestamp: '2020-03-17T11:31:33.971Z'
}
{
  message: '>>>> authService.register(), invalid data = instance.lastName does not meet minimum length of 4',
  level: 'error',
  timestamp: '2020-03-17T11:31:33.972Z'
}
{
  message: '>>>> authService.register(), with: user = {"email":"80939404335"}',
  level: 'info',
  timestamp: '2020-03-17T11:52:28.719Z'
}
{
  message: '>>>> authService.register(), invalid data = instance requires property "userName",instance requires property "firstName",instance requires property "lastName",instance requires property "passwordHash"',
  level: 'error',
  timestamp: '2020-03-17T11:52:28.734Z'
}
{
  message: '>>>> authService.register(), with: user = {"email":"80939404335"}',
  level: 'info',
  timestamp: '2020-03-17T11:52:29.224Z'
}
{
  message: '>>>> authService.register(), invalid data = instance requires property "userName",instance requires property "firstName",instance requires property "lastName",instance requires property "passwordHash"',
  level: 'error',
  timestamp: '2020-03-17T11:52:29.232Z'
}
{
  message: '>>>> authService.register(), with: user = {"email":"80939404335"}',
  level: 'info',
  timestamp: '2020-03-17T11:52:29.561Z'
}
{
  message: '>>>> authService.register(), invalid data = instance requires property "userName",instance requires property "firstName",instance requires property "lastName",instance requires property "passwordHash"',
  level: 'error',
  timestamp: '2020-03-17T11:52:29.569Z'
}
{
  message: '>>>> authService.register(), with: user = {"email":"80939404335"}',
  level: 'info',
  timestamp: '2020-03-17T11:52:30.001Z'
}
{
  message: '>>>> authService.register(), invalid data = instance requires property "userName",instance requires property "firstName",instance requires property "lastName",instance requires property "passwordHash"',
  level: 'error',
  timestamp: '2020-03-17T11:52:30.003Z'
}
{
  message: '>>>> authService.register(), with: user = {"userName":"fg"}',
  level: 'info',
  timestamp: '2020-03-17T12:40:49.492Z'
}
{
  message: '>>>> authService.register(), invalid data = instance.userName does not meet minimum length of 4,instance requires property "email",instance requires property "firstName",instance requires property "lastName",instance requires property "passwordHash"',
  level: 'error',
  timestamp: '2020-03-17T12:40:49.503Z'
}
{
  message: '>>>> authService.register(), with: user = {"firstName":"sdf","userName":"fgnjh","email":"p["}',
  level: 'info',
  timestamp: '2020-03-17T13:44:51.218Z'
}
{
  message: '>>>> authService.register(), invalid data = instance.email does not meet minimum length of 4,instance.firstName does not meet minimum length of 4,instance requires property "lastName",instance requires property "passwordHash"',
  level: 'error',
  timestamp: '2020-03-17T13:44:51.222Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-04-03T09:06:39.127Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-04-03T09:13:11.304Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-04-03T14:51:54.056Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-04-03T15:45:01.026Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-04-06T11:36:00.933Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-04-06T11:38:28.906Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-04-06T12:00:21.195Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-04-06T12:14:19.702Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-04-06T12:14:37.095Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-04-06T12:46:28.906Z'
}
{
  message: '>>>> authorService.get()',
  level: 'info',
  timestamp: '2020-04-06T12:46:39.717Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-04-06T12:47:46.987Z'
}
{
  message: '>>>> authorService.get()',
  level: 'info',
  timestamp: '2020-04-06T12:47:50.221Z'
}
{
  message: '>>>> authorService.get()',
  level: 'info',
  timestamp: '2020-04-06T12:49:50.232Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-04-06T12:52:01.319Z'
}
{
  message: '>>>> authorService.get()',
  level: 'info',
  timestamp: '2020-04-06T12:52:04.514Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-04-06T12:52:46.418Z'
}
{
  message: '>>>> authorService.get()',
  level: 'info',
  timestamp: '2020-04-06T12:53:18.510Z'
}
{
  message: '>>>> authorService.get()',
  level: 'info',
  timestamp: '2020-04-06T12:53:52.934Z'
}
{
  message: '>>>> authorService.get()',
  level: 'info',
  timestamp: '2020-04-06T12:56:03.181Z'
}
{
  message: '>>>> authorService.get()',
  level: 'info',
  timestamp: '2020-04-06T12:56:58.711Z'
}
{
  message: '>>>> authorService.get()',
  level: 'info',
  timestamp: '2020-04-06T12:59:41.074Z'
}
{
  message: '>>>> authorService.get()',
  level: 'info',
  timestamp: '2020-04-06T12:59:44.513Z'
}
{
  message: '>>>> authorService.get()',
  level: 'info',
  timestamp: '2020-04-06T13:00:10.421Z'
}
{
  message: '>>>> authorService.get()',
  level: 'info',
  timestamp: '2020-04-06T13:00:12.377Z'
}
{
  message: '>>>> authorService.get()',
  level: 'info',
  timestamp: '2020-04-06T13:00:29.027Z'
}
{
  message: '>>>> authorService.get()',
  level: 'info',
  timestamp: '2020-04-06T13:00:32.910Z'
}
{
  message: '>>>> authorService.get()',
  level: 'info',
  timestamp: '2020-04-06T13:00:49.347Z'
}
{
  message: '>>>> authorService.get()',
  level: 'info',
  timestamp: '2020-04-06T13:01:35.744Z'
}
{
  message: '>>>> authorService.get()',
  level: 'info',
  timestamp: '2020-04-06T13:01:50.081Z'
}
{
  message: '>>>> authorService.get()',
  level: 'info',
  timestamp: '2020-04-06T13:03:50.086Z'
}
{
  message: '>>>> authorService.get()',
  level: 'info',
  timestamp: '2020-04-06T14:24:49.170Z'
}
{
  message: '>>>> authorService.get()',
  level: 'info',
  timestamp: '2020-04-06T14:25:26.042Z'
}
{
  message: '>>>> authorService.get()',
  level: 'info',
  timestamp: '2020-04-06T14:27:04.019Z'
}
{
  message: '>>>> authorService.get()',
  level: 'info',
  timestamp: '2020-04-06T14:32:39.235Z'
}
{
  message: '>>>> authorService.get()',
  level: 'info',
  timestamp: '2020-04-06T14:33:20.048Z'
}
{
  message: '>>>> authorService.get()',
  level: 'info',
  timestamp: '2020-04-06T14:36:50.137Z'
}
{
  message: '>>>> authorService.get()',
  level: 'info',
  timestamp: '2020-04-06T14:37:13.228Z'
}
{
  message: '>>>> authorService.get()',
  level: 'info',
  timestamp: '2020-04-06T14:37:19.831Z'
}
{
  message: '>>>> authorService.get()',
  level: 'info',
  timestamp: '2020-04-06T14:38:09.861Z'
}
{
  message: '>>>> authorService.get()',
  level: 'info',
  timestamp: '2020-04-06T14:44:35.513Z'
}
{
  message: '>>>> authorService.get()',
  level: 'info',
  timestamp: '2020-04-06T14:44:58.169Z'
}
{
  message: '>>>> authorService.get()',
  level: 'info',
  timestamp: '2020-04-06T14:45:18.719Z'
}
{
  message: '>>>> authorService.get()',
  level: 'info',
  timestamp: '2020-04-06T14:45:46.769Z'
}
{
  message: '>>>> authorService.get()',
  level: 'info',
  timestamp: '2020-04-06T14:48:57.602Z'
}
{
  message: '>>>> authorService.get()',
  level: 'info',
  timestamp: '2020-04-06T14:50:00.427Z'
}
{
  message: '>>>> authorService.get()',
  level: 'info',
  timestamp: '2020-04-06T14:50:22.548Z'
}
{
  message: '>>>> authorService.get()',
  level: 'info',
  timestamp: '2020-04-06T14:56:59.370Z'
}
{
  message: '>>>> authorService.get()',
  level: 'info',
  timestamp: '2020-04-06T14:58:03.274Z'
}
{
  message: '>>>> authorService.get()',
  level: 'info',
  timestamp: '2020-04-06T15:00:37.196Z'
}
{
  message: '>>>> authorService.get()',
  level: 'info',
  timestamp: '2020-04-06T15:01:14.114Z'
}
{
  message: '>>>> authorService.get()',
  level: 'info',
  timestamp: '2020-04-06T15:05:13.341Z'
}
{
  message: '>>>> authorService.get()',
  level: 'info',
  timestamp: '2020-04-06T15:07:23.313Z'
}
{
  message: '>>>> authorService.get()',
  level: 'info',
  timestamp: '2020-04-06T15:08:26.369Z'
}
{
  message: '>>>> authorService.get()',
  level: 'info',
  timestamp: '2020-04-06T15:09:00.680Z'
}
{
  message: '>>>> authorService.get()',
  level: 'info',
  timestamp: '2020-04-06T15:09:59.043Z'
}
{
  message: '>>>> authorService.get()',
  level: 'info',
  timestamp: '2020-04-06T16:21:27.258Z'
}
{
  message: '>>>> authorService.get()',
  level: 'info',
  timestamp: '2020-04-06T16:30:53.687Z'
}
{
  message: '>>>> authorService.get()',
  level: 'info',
  timestamp: '2020-04-06T16:31:49.152Z'
}
{
  message: '>>>> authorService.get()',
  level: 'info',
  timestamp: '2020-04-06T16:31:51.111Z'
}
{
  message: '>>>> authorService.get()',
  level: 'info',
  timestamp: '2020-04-06T16:33:42.371Z'
}
{
  message: '>>>> authorService.get()',
  level: 'info',
  timestamp: '2020-04-06T16:35:08.176Z'
}
{
  message: '>>>> authorService.get()',
  level: 'info',
  timestamp: '2020-04-06T16:40:09.570Z'
}
{
  message: '>>>> authorService.get()',
  level: 'info',
  timestamp: '2020-04-06T16:49:26.454Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-04-06T16:51:15.534Z'
}
{
  message: '>>>> authorService.get()',
  level: 'info',
  timestamp: '2020-04-06T16:51:37.546Z'
}
{
  message: '>>>> authorService.get()',
  level: 'info',
  timestamp: '2020-04-06T16:51:39.987Z'
}
{
  message: '>>>> authorService.get()',
  level: 'info',
  timestamp: '2020-04-06T16:52:05.197Z'
}
{
  message: '>>>> authorService.get()',
  level: 'info',
  timestamp: '2020-04-06T17:20:53.663Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-04-06T17:22:59.058Z'
}
{
  message: '>>>> authorService.getAuthors(), with: filter = {}',
  level: 'info',
  timestamp: '2020-04-06T17:23:02.160Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-04-06T17:23:54.453Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-04-06T17:35:33.986Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-04-06T18:01:01.516Z'
}
{
  message: '>>>> authorService.get()',
  level: 'info',
  timestamp: '2020-04-06T18:01:14.619Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-04-06T18:03:06.865Z'
}
{
  message: '>>>> authorService.get()',
  level: 'info',
  timestamp: '2020-04-06T18:03:08.774Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-04-06T18:03:30.956Z'
}
{
  message: '>>>> authorService.get()',
  level: 'info',
  timestamp: '2020-04-06T18:03:37.937Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-04-06T18:04:03.489Z'
}
{
  message: '>>>> authorService.get()',
  level: 'info',
  timestamp: '2020-04-06T18:04:06.907Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-04-06T18:06:03.523Z'
}
{
  message: '>>>> authorService.get()',
  level: 'info',
  timestamp: '2020-04-06T18:06:06.615Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-04-06T18:06:40.382Z'
}
{
  message: '>>>> authorService.get()',
  level: 'info',
  timestamp: '2020-04-06T18:06:43.421Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-04-06T18:07:56.794Z'
}
{
  message: '>>>> authorService.get()',
  level: 'info',
  timestamp: '2020-04-06T18:08:02.406Z'
}
{
  message: '>>>> authorService.get()',
  level: 'info',
  timestamp: '2020-04-06T18:08:07.223Z'
}
{
  message: '>>>> authorService.get()',
  level: 'info',
  timestamp: '2020-04-06T18:08:18.676Z'
}
{
  message: '>>>> authorService.create(), with: author = {"searchString":"","sortType":0,"pageNumber":1,"pageSize":10,"sortTable":""}',
  level: 'info',
  timestamp: '2020-04-06T18:09:45.302Z'
}
{
  message: '>>>> authorService.create(), invalid data = instance additionalProperty "searchString" exists in instance when not allowed,instance additionalProperty "sortType" exists in instance when not allowed,instance additionalProperty "pageNumber" exists in instance when not allowed,instance additionalProperty "pageSize" exists in instance when not allowed,instance additionalProperty "sortTable" exists in instance when not allowed,instance requires property "name"',
  level: 'error',
  timestamp: '2020-04-06T18:09:45.316Z'
}
{
  message: '>>>> authorService.create(), with: author = {}',
  level: 'info',
  timestamp: '2020-04-06T18:09:51.580Z'
}
{
  message: '>>>> authorService.create(), invalid data = instance requires property "name"',
  level: 'error',
  timestamp: '2020-04-06T18:09:51.585Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-04-06T18:11:03.452Z'
}
{
  message: '>>>> authorService.get()',
  level: 'info',
  timestamp: '2020-04-06T18:11:09.673Z'
}
{
  message: '>>>> authorService.get()',
  level: 'info',
  timestamp: '2020-04-06T18:14:59.069Z'
}
{
  message: '>>>> authorService.get()',
  level: 'info',
  timestamp: '2020-04-06T18:15:54.091Z'
}
{
  message: '>>>> authorService.get()',
  level: 'info',
  timestamp: '2020-04-06T18:26:03.995Z'
}
{
  message: '>>>> authorService.get()',
  level: 'info',
  timestamp: '2020-04-06T18:27:53.258Z'
}
{
  message: '>>>> authorService.get()',
  level: 'info',
  timestamp: '2020-04-06T18:50:25.536Z'
}
{
  message: '>>>> authorService.get()',
  level: 'info',
  timestamp: '2020-04-06T18:54:53.722Z'
}
{
  message: '>>>> authorService.get()',
  level: 'info',
  timestamp: '2020-04-06T18:55:48.105Z'
}
{
  message: '>>>> authorService.get()',
  level: 'info',
  timestamp: '2020-04-06T18:58:26.563Z'
}
{
  message: '>>>> authorService.get()',
  level: 'info',
  timestamp: '2020-04-06T19:00:11.392Z'
}
{
  message: '>>>> authorService.get()',
  level: 'info',
  timestamp: '2020-04-06T19:10:52.560Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-04-06T19:12:30.103Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-04-06T19:14:34.541Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-04-06T19:15:18.786Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-04-06T19:15:36.473Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-04-06T19:16:19.699Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-04-06T19:16:54.918Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-04-06T19:18:21.673Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-04-06T19:18:53.708Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-04-06T19:19:28.585Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-04-06T19:20:29.171Z'
}
{
  message: '>>>> authorService.get()',
  level: 'info',
  timestamp: '2020-04-06T19:22:28.617Z'
}
{
  message: '>>>> authorService.get()',
  level: 'info',
  timestamp: '2020-04-06T19:23:19.099Z'
}
{
  message: '>>>> authorService.get()',
  level: 'info',
  timestamp: '2020-04-06T19:26:28.575Z'
}
{
  message: '>>>> authorService.get()',
  level: 'info',
  timestamp: '2020-04-06T19:26:49.500Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-04-06T19:50:01.144Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-04-07T07:38:07.258Z'
}
{
  message: '>>>> authorService.get()',
  level: 'info',
  timestamp: '2020-04-07T07:41:41.407Z'
}
{
  message: '>>>> authorService.get()',
  level: 'info',
  timestamp: '2020-04-07T07:41:59.715Z'
}
{
  message: '>>>> authorService.get()',
  level: 'info',
  timestamp: '2020-04-07T07:42:26.788Z'
}
{
  message: '>>>> authorService.get()',
  level: 'info',
  timestamp: '2020-04-07T07:43:33.694Z'
}
{
  message: '>>>> authorService.get()',
  level: 'info',
  timestamp: '2020-04-07T07:43:48.843Z'
}
{
  message: '>>>> authorService.get()',
  level: 'info',
  timestamp: '2020-04-07T07:44:35.861Z'
}
{
  message: '>>>> authorService.get()',
  level: 'info',
  timestamp: '2020-04-07T07:44:39.694Z'
}
{
  message: '>>>> authorService.get()',
  level: 'info',
  timestamp: '2020-04-07T07:44:45.904Z'
}
{
  message: '>>>> authorService.get()',
  level: 'info',
  timestamp: '2020-04-07T07:44:49.541Z'
}
{
  message: '>>>> authorService.get()',
  level: 'info',
  timestamp: '2020-04-07T07:45:02.750Z'
}
{
  message: '>>>> authorService.get()',
  level: 'info',
  timestamp: '2020-04-07T07:45:06.503Z'
}
{
  message: '>>>> authorService.get()',
  level: 'info',
  timestamp: '2020-04-07T07:48:30.814Z'
}
{
  message: '>>>> authorService.get()',
  level: 'info',
  timestamp: '2020-04-07T07:49:42.641Z'
}
{
  message: '>>>> authorService.get()',
  level: 'info',
  timestamp: '2020-04-07T07:52:30.808Z'
}
{
  message: '>>>> authorService.get()',
  level: 'info',
  timestamp: '2020-04-07T07:54:34.454Z'
}
{
  message: '>>>> authorService.get()',
  level: 'info',
  timestamp: '2020-04-07T07:58:06.943Z'
}
{
  message: '>>>> authorService.get()',
  level: 'info',
  timestamp: '2020-04-07T08:01:10.985Z'
}
{
  message: '>>>> authorService.get()',
  level: 'info',
  timestamp: '2020-04-07T08:06:03.024Z'
}
{
  message: '>>>> authorService.get()',
  level: 'info',
  timestamp: '2020-04-07T08:06:33.296Z'
}
{
  message: '>>>> authorService.get()',
  level: 'info',
  timestamp: '2020-04-07T08:06:36.598Z'
}
{
  message: '>>>> authorService.get()',
  level: 'info',
  timestamp: '2020-04-07T08:08:03.792Z'
}
{
  message: '>>>> authorService.get()',
  level: 'info',
  timestamp: '2020-04-07T08:16:01.136Z'
}
{
  message: '>>>> authorService.get()',
  level: 'info',
  timestamp: '2020-04-07T08:26:59.537Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-04-07T08:28:42.958Z'
}
{
  message: '>>>> authorService.get()',
  level: 'info',
  timestamp: '2020-04-07T08:32:48.401Z'
}
{
  message: '>>>> authorService.get()',
  level: 'info',
  timestamp: '2020-04-07T08:34:04.261Z'
}
{
  message: '>>>> printingEditionService.create(), with: printingEditionParam = {"dispatchConfig":null,"_targetInst":null,"_dispatchListeners":null,"_dispatchInstances":null,"nativeEvent":null,"type":null,"target":null,"eventPhase":null,"bubbles":null,"cancelable":null,"defaultPrevented":null,"isTrusted":null,"view":null,"detail":null,"screenX":null,"screenY":null,"clientX":null,"clientY":null,"pageX":null,"pageY":null,"ctrlKey":null,"shiftKey":null,"altKey":null,"metaKey":null,"button":null,"buttons":null}',
  level: 'info',
  timestamp: '2020-04-07T08:35:00.514Z'
}
{
  message: '>>>> printingEditionService.create(), with: printingEditionParam = {"price":"31","discription":"dafdasfadfd","title":"adfadf"}',
  level: 'info',
  timestamp: '2020-04-07T08:35:53.242Z'
}
{
  message: '>>>> authorService.get()',
  level: 'info',
  timestamp: '2020-04-07T08:38:21.849Z'
}
{
  message: '>>>> printingEditionService.create(), with: printingEditionParam = {"dispatchConfig":null,"_targetInst":null,"_dispatchListeners":null,"_dispatchInstances":null,"nativeEvent":null,"type":null,"target":null,"eventPhase":null,"bubbles":null,"cancelable":null,"defaultPrevented":null,"isTrusted":null,"view":null,"detail":null,"screenX":null,"screenY":null,"clientX":null,"clientY":null,"pageX":null,"pageY":null,"ctrlKey":null,"shiftKey":null,"altKey":null,"metaKey":null,"button":null,"buttons":null}',
  level: 'info',
  timestamp: '2020-04-07T08:39:14.103Z'
}
{
  message: '>>>> printingEditionService.create(), with: printingEditionParam = {"discription":"ascasc","price":"24","category":"EUR","title":"ascasc"}',
  level: 'info',
  timestamp: '2020-04-07T08:39:14.116Z'
}
{
  message: '>>>> authorService.get()',
  level: 'info',
  timestamp: '2020-04-07T08:44:16.492Z'
}
{
  message: '>>>> printingEditionService.create(), with: printingEditionParam = {"PrintingEdition":{"price":"54","category":"Newspaper","discription":"fsdfsd","title":"dsfds"}}',
  level: 'info',
  timestamp: '2020-04-07T08:46:08.235Z'
}
{
  message: '>>>> printingEditionService.create(), with: printingEditionParam = {"PrintingEdition":{"price":"54","category":"Newspaper","discription":"fsdfsd","title":"dsfds"}}',
  level: 'info',
  timestamp: '2020-04-07T08:47:48.248Z'
}
{
  message: '>>>> authorService.get()',
  level: 'info',
  timestamp: '2020-04-07T08:48:44.276Z'
}
{
  message: '>>>> printingEditionService.create(), with: printingEditionParam = {"PrintingEdition":{"price":"234","discription":"asrgrg","title":"asfgfdasg"}}',
  level: 'info',
  timestamp: '2020-04-07T08:49:02.324Z'
}
{
  message: '>>>> authorService.get()',
  level: 'info',
  timestamp: '2020-04-07T08:50:40.518Z'
}
{
  message: '>>>> printingEditionService.create(), with: printingEditionParam = {"PrintingEdition":{"title":"zxcvzxv","discription":"dvsd","price":"234"}}',
  level: 'info',
  timestamp: '2020-04-07T08:51:10.355Z'
}
{
  message: '>>>> printingEditionService.create(), with: printingEditionParam = {"PrintingEdition":{"title":"zxcvzxv","discription":"dvsd","price":"234"}}',
  level: 'info',
  timestamp: '2020-04-07T08:51:20.636Z'
}
{
  message: '>>>> authorService.get()',
  level: 'info',
  timestamp: '2020-04-07T08:51:36.993Z'
}
{
  message: '>>>> printingEditionService.create(), with: printingEditionParam = {"PrintingEdition":{"price":"23452","category":"GBP","discription":"afaf","title":"vdv"}}',
  level: 'info',
  timestamp: '2020-04-07T08:52:27.095Z'
}
{
  message: '>>>> authorService.get()',
  level: 'info',
  timestamp: '2020-04-07T09:01:19.626Z'
}
{
  message: '>>>> printingEditionService.create(), with: printingEditionParam = {"PrintingEdition":{"price":"76","category":"GBP","discription":"dssdsdg","title":"sdgsdg"}}',
  level: 'info',
  timestamp: '2020-04-07T09:03:10.246Z'
}
{
  message: '>>>> authorService.get()',
  level: 'info',
  timestamp: '2020-04-07T09:03:12.759Z'
}
{
  message: '>>>> printingEditionService.create(), with: printingEditionParam = {"PrintingEdition":{"title":"dvsddv","discription":"dvs","price":"324"}}',
  level: 'info',
  timestamp: '2020-04-07T09:04:38.913Z'
}
{
  message: '>>>> printingEditionService.create(), with: printingEditionParam = {"PrintingEdition":{"title":"dvsddv","discription":"dvs","price":"324","currency":"CHF","category":"Newspaper"}}',
  level: 'info',
  timestamp: '2020-04-07T09:05:13.928Z'
}
{
  message: '>>>> authorService.get()',
  level: 'info',
  timestamp: '2020-04-07T09:05:17.578Z'
}
{
  message: '>>>> printingEditionService.create(), with: printingEditionParam = {"PrintingEdition":{"discription":"asf","title":"asf"}}',
  level: 'info',
  timestamp: '2020-04-07T09:12:14.160Z'
}
{
  message: '>>>> authorService.get()',
  level: 'info',
  timestamp: '2020-04-07T09:12:17.054Z'
}
{
  message: '>>>> authorService.get()',
  level: 'info',
  timestamp: '2020-04-07T09:13:51.387Z'
}
{
  message: '>>>> printingEditionService.create(), with: printingEditionParam = {"PrintingEdition":{"authors":" ","title":"sdgsdgg","discription":"sdg"}}',
  level: 'info',
  timestamp: '2020-04-07T09:13:56.909Z'
}
{
  message: '>>>> printingEditionService.create(), with: printingEditionParam = {"PrintingEdition":{"authors":" ","title":"sdgsdgg","discription":"sdg"}}',
  level: 'info',
  timestamp: '2020-04-07T09:13:57.259Z'
}
{
  message: '>>>> printingEditionService.create(), with: printingEditionParam = {"PrintingEdition":{"authors":" ","title":"sdgsdgg","discription":"sdgzxv"}}',
  level: 'info',
  timestamp: '2020-04-07T09:17:41.509Z'
}
{
  message: '>>>> authorService.get()',
  level: 'info',
  timestamp: '2020-04-07T09:17:44.629Z'
}
{
  message: '>>>> authorService.get()',
  level: 'info',
  timestamp: '2020-04-07T09:50:24.326Z'
}
{
  message: '>>>> authorService.get()',
  level: 'info',
  timestamp: '2020-04-07T09:52:23.152Z'
}
{
  message: '>>>> authorService.get()',
  level: 'info',
  timestamp: '2020-04-07T09:53:21.512Z'
}
{
  message: '>>>> authorService.get()',
  level: 'info',
  timestamp: '2020-04-07T10:37:41.445Z'
}
{
  message: '>>>> authorService.getAuthors(), with: filter = {"searchString":"","pageNumber":1,"pageSize":10,"sortTable":"","sortType":0}',
  level: 'info',
  timestamp: '2020-04-07T10:53:46.562Z'
}
{
  message: '>>>> authorService.getAuthors(), with: filter = {"searchString":"","pageNumber":1,"pageSize":10,"sortTable":"","sortType":0}',
  level: 'info',
  timestamp: '2020-04-07T10:54:18.332Z'
}
{
  message: '>>>> authorService.getAuthors(), with: filter = {"searchString":"","pageNumber":1,"pageSize":10,"sortTable":"","sortType":0}',
  level: 'info',
  timestamp: '2020-04-07T10:54:27.393Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-04-07T14:33:50.133Z'
}
{
  message: '>>>> authorService.getAuthors(), with: filter = {"searchString":"","pageNumber":1,"pageSize":10,"sortTable":"","sortType":0}',
  level: 'info',
  timestamp: '2020-04-07T15:04:59.402Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-04-07T15:06:57.549Z'
}
{
  message: '>>>> authorService.getAuthors(), with: filter = {"searchString":"","pageNumber":1,"pageSize":10,"sortTable":"","sortType":0}',
  level: 'info',
  timestamp: '2020-04-07T15:07:32.156Z'
}
{
  message: 'server started listening on port 8000',
  level: 'info',
  timestamp: '2020-04-07T15:11:39.337Z'
}
{
  message: '>>>> authorService.getAuthors(), with: filter = {"searchString":"","pageNumber":1,"pageSize":10,"sortTable":"","sortType":0}',
  level: 'info',
  timestamp: '2020-04-07T15:12:29.020Z'
}
{
  message: '>>>> authorService.getAuthors(), with: filter = {"searchString":"","pageNumber":1,"pageSize":10,"sortTable":"","sortType":0}',
  level: 'info',
  timestamp: '2020-04-07T15:15:41.204Z'
}
{
  message: '>>>> authorService.getAuthors(), with: filter = {"searchString":"","pageNumber":1,"pageSize":10,"sortTable":"","sortType":0}',
  level: 'info',
  timestamp: '2020-04-07T15:17:08.547Z'
}
{
  message: '>>>> authorService.getAuthors(), with: filter = {"searchString":"","pageNumber":1,"pageSize":10,"sortTable":"","sortType":0}',
  level: 'info',
  timestamp: '2020-04-07T15:17:19.036Z'
}
{
  message: '>>>> authorService.getAuthors(), with: filter = {"searchString":"","pageNumber":1,"pageSize":10,"sortTable":"","sortType":0}',
  level: 'info',
  timestamp: '2020-04-07T15:17:34.416Z'
}
{
  message: '>>>> authorService.getAuthors(), with: filter = {"searchString":"","pageNumber":1,"pageSize":10,"sortTable":"","sortType":0}',
  level: 'info',
  timestamp: '2020-04-07T15:21:49.779Z'
}
{
  message: '>>>> authorService.getAuthors(), with: filter = {"searchString":"","pageNumber":1,"pageSize":10,"sortTable":"","sortType":0}',
  level: 'info',
  timestamp: '2020-04-07T15:21:49.790Z'
}
